//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#region Entities (merged)

namespace Srk.BetaseriesApi2 {
    using System;
    using System.Runtime.Serialization;
    
    /// <summary>
    /// Response format for 'comments/comment'.
    /// </summary>
    public class Comment
    {
        
        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        [DataMember()]
        public string id { get; set; }
        
        /// <summary>
        /// Gets or sets the user_id.
        /// </summary>
        [DataMember()]
        public int user_id { get; set; }
        
        /// <summary>
        /// Gets or sets the login.
        /// </summary>
        [DataMember()]
        public string login { get; set; }
        
        /// <summary>
        /// Gets or sets the avatar.
        /// </summary>
        [DataMember()]
        public string avatar { get; set; }
        
        /// <summary>
        /// Gets or sets the date.
        /// </summary>
        [DataMember()]
        public DateTime date { get; set; }
        
        /// <summary>
        /// Gets or sets the text.
        /// </summary>
        [DataMember()]
        public string text { get; set; }
        
        /// <summary>
        /// Gets or sets the inner_id.
        /// </summary>
        [DataMember()]
        public int inner_id { get; set; }
        
        /// <summary>
        /// Gets or sets the in_reply_to.
        /// </summary>
        [DataMember()]
        public int in_reply_to { get; set; }
    }
    
    /// <summary>
    /// Response format for 'comments/replies'.
    /// </summary>
    public class CommentReply
    {
    }
    
    /// <summary>
    /// Response format for 'messages/discussion'.
    /// </summary>
    public class MessageDiscussion
    {
    }
    
    /// <summary>
    /// Response format for 'messages/inbox'.
    /// </summary>
    public class MessageInbox
    {
    }
    
    /// <summary>
    /// Response format for 'messages/message'.
    /// </summary>
    public class MessageMessage
    {
        
        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        [DataMember()]
        public int id { get; set; }
        
        /// <summary>
        /// Gets or sets the message_id.
        /// </summary>
        [DataMember()]
        public int message_id { get; set; }
        
        /// <summary>
        /// Gets or sets the inner_id.
        /// </summary>
        [DataMember()]
        public int inner_id { get; set; }
        
        /// <summary>
        /// Gets or sets the sender.
        /// </summary>
        [DataMember()]
        public SenderClass sender { get; set; }
        
        public class SenderClass {
            
            /// <summary>
            /// Gets or sets the id.
            /// </summary>
            [DataMember()]
            public int id { get; set; }
            
            /// <summary>
            /// Gets or sets the login.
            /// </summary>
            [DataMember()]
            public string login { get; set; }
        }
        
        /// <summary>
        /// Gets or sets the recipient.
        /// </summary>
        [DataMember()]
        public RecipientClass recipient { get; set; }
        
        public class RecipientClass {
            
            /// <summary>
            /// Gets or sets the id.
            /// </summary>
            [DataMember()]
            public int id { get; set; }
            
            /// <summary>
            /// Gets or sets the login.
            /// </summary>
            [DataMember()]
            public string login { get; set; }
        }
        
        /// <summary>
        /// Gets or sets the date.
        /// </summary>
        [DataMember()]
        public DateTime date { get; set; }
        
        /// <summary>
        /// Gets or sets the title.
        /// </summary>
        [DataMember()]
        public string title { get; set; }
        
        /// <summary>
        /// Gets or sets the text.
        /// </summary>
        [DataMember()]
        public string text { get; set; }
        
        /// <summary>
        /// Gets or sets the unread.
        /// </summary>
        [DataMember()]
        public bool unread { get; set; }
        
        /// <summary>
        /// Gets or sets the has_unread.
        /// </summary>
        [DataMember()]
        public bool has_unread { get; set; }
    }
    
    /// <summary>
    /// Response format for 'messages/read'.
    /// </summary>
    public class MessageRead
    {
        
        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        [DataMember()]
        public int id { get; set; }
        
        /// <summary>
        /// Gets or sets the message_id.
        /// </summary>
        [DataMember()]
        public int message_id { get; set; }
        
        /// <summary>
        /// Gets or sets the inner_id.
        /// </summary>
        [DataMember()]
        public int inner_id { get; set; }
        
        /// <summary>
        /// Gets or sets the sender.
        /// </summary>
        [DataMember()]
        public SenderClass sender { get; set; }
        
        public class SenderClass {
            
            /// <summary>
            /// Gets or sets the id.
            /// </summary>
            [DataMember()]
            public int id { get; set; }
            
            /// <summary>
            /// Gets or sets the login.
            /// </summary>
            [DataMember()]
            public string login { get; set; }
        }
        
        /// <summary>
        /// Gets or sets the recipient.
        /// </summary>
        [DataMember()]
        public RecipientClass recipient { get; set; }
        
        public class RecipientClass {
            
            /// <summary>
            /// Gets or sets the id.
            /// </summary>
            [DataMember()]
            public int id { get; set; }
            
            /// <summary>
            /// Gets or sets the login.
            /// </summary>
            [DataMember()]
            public string login { get; set; }
        }
        
        /// <summary>
        /// Gets or sets the date.
        /// </summary>
        [DataMember()]
        public DateTime date { get; set; }
        
        /// <summary>
        /// Gets or sets the title.
        /// </summary>
        [DataMember()]
        public string title { get; set; }
        
        /// <summary>
        /// Gets or sets the text.
        /// </summary>
        [DataMember()]
        public string text { get; set; }
        
        /// <summary>
        /// Gets or sets the unread.
        /// </summary>
        [DataMember()]
        public bool unread { get; set; }
        
        /// <summary>
        /// Gets or sets the has_unread.
        /// </summary>
        [DataMember()]
        public bool has_unread { get; set; }
    }
    
    /// <summary>
    /// Response format for 'shows/characters'.
    /// </summary>
    public class ShowCharacter
    {
    }
    
    /// <summary>
    /// Response format for 'shows/pictures'.
    /// </summary>
    public class ShowPicture
    {
    }
    
    /// <summary>
    /// Response format for 'timeline/friends'.
    /// </summary>
    public class TimelineFriend
    {
    }
    
    /// <summary>
    /// Response format for 'timeline/home'.
    /// </summary>
    public class TimelineHome
    {
    }
    
    /// <summary>
    /// Response format for 'timeline/member'.
    /// </summary>
    public class TimelineMember
    {
    }
    
    /// <summary>
    /// Response format for 'AuthenticationResult'.
    /// </summary>
    [DataContract]
    public class AuthenticationResult : BaseResponse
    {
        
        /// <summary>
        /// Gets or sets the User.
        /// </summary>
        [DataMember(Name = "user")]
        public UserClass User { get; set; }
        
        public class UserClass {
            
            /// <summary>
            /// Gets or sets the Id.
            /// </summary>
            [DataMember(Name = "id")]
            public int Id { get; set; }
            
            /// <summary>
            /// Gets or sets the Login.
            /// </summary>
            [DataMember(Name = "login")]
            public string Login { get; set; }
            
            /// <summary>
            /// Gets or sets the InAccount.
            /// </summary>
            [DataMember(Name = "in_account")]
            public bool InAccount { get; set; }
        }
        
        /// <summary>
        /// Gets or sets the Hash.
        /// </summary>
        [DataMember(Name = "hash")]
        public string Hash { get; set; }
        
        /// <summary>
        /// Gets or sets the Token.
        /// </summary>
        [DataMember(Name = "token")]
        public string Token { get; set; }
    }
}

#endregion


#region ArgumentEnums (merged)

namespace Srk.BetaseriesApi2 {
    using System;
    
    /// <summary>
    /// Response format id 'episode|show|member|movie'.
    /// </summary>
    /// <remark>
    /// ARGID:episode|show|member|movie
    /// ARGDESC:Type d&#x27;élément : episode|show|member|movie
    /// </remark>
    public enum EntityType {
        episode,
        show,
        member,
        movie,
    }
    
    /// <summary>
    /// Response format id 'all|vovf|vo|vf'.
    /// </summary>
    /// <remark>
    /// ARGID:all|vovf|vo|vf
    /// ARGDESC:Affiche les épisodes avec certains sous-titres disponibles : all|vovf|vo|vf (Facultatif)
    /// </remark>
    public enum SubtitleFilter {
        all,
        vovf,
        vo,
        vf,
    }
    
    /// <summary>
    /// Response format id 'open|requests|friends|nobody'.
    /// </summary>
    /// <remark>
    /// ARGID:open|requests|friends|nobody
    /// ARGDESC:Valeur de l&#x27;option (1 ou 0, pour friendship : open|requests|friends|nobody)
    /// </remark>
    public enum ProfileConfidentiality {
        open,
        requests,
        friends,
        nobody,
    }
    
    /// <summary>
    /// Response format id 'title|popularity'.
    /// </summary>
    /// <remark>
    /// ARGID:title|popularity
    /// ARGDESC:Ordre de retour (title|popularity), par défaut title
    /// </remark>
    public enum TitlePopularity {
        title,
        popularity,
    }
    
    /// <summary>
    /// Response format id 'title|popularity|followers'.
    /// </summary>
    /// <remark>
    /// ARGID:title|popularity|followers
    /// ARGDESC:Ordre de retour (title|popularity|followers), par défaut title
    /// </remark>
    public enum TitlePopularityFollower {
        title,
        popularity,
        followers,
    }
}

#endregion


#region Services

namespace Srk.BetaseriesApi2 {
    using System;
    using System.Collections.Generic;
    using Newtonsoft.Json;

    public partial class BetaseriesClient {

        private BetaseriesCommentsClient commentsClient;
        public BetaseriesCommentsClient Comments {
            get { return this.commentsClient ?? (this.commentsClient = new BetaseriesCommentsClient(this)); }
        }

        private BetaseriesEpisodesClient episodesClient;
        public BetaseriesEpisodesClient Episodes {
            get { return this.episodesClient ?? (this.episodesClient = new BetaseriesEpisodesClient(this)); }
        }

        private BetaseriesFriendsClient friendsClient;
        public BetaseriesFriendsClient Friends {
            get { return this.friendsClient ?? (this.friendsClient = new BetaseriesFriendsClient(this)); }
        }

        private BetaseriesMembersClient membersClient;
        public BetaseriesMembersClient Members {
            get { return this.membersClient ?? (this.membersClient = new BetaseriesMembersClient(this)); }
        }

        private BetaseriesMessagesClient messagesClient;
        public BetaseriesMessagesClient Messages {
            get { return this.messagesClient ?? (this.messagesClient = new BetaseriesMessagesClient(this)); }
        }

        private BetaseriesMoviesClient moviesClient;
        public BetaseriesMoviesClient Movies {
            get { return this.moviesClient ?? (this.moviesClient = new BetaseriesMoviesClient(this)); }
        }

        private BetaseriesPicturesClient picturesClient;
        public BetaseriesPicturesClient Pictures {
            get { return this.picturesClient ?? (this.picturesClient = new BetaseriesPicturesClient(this)); }
        }

        private BetaseriesPlanningClient planningClient;
        public BetaseriesPlanningClient Planning {
            get { return this.planningClient ?? (this.planningClient = new BetaseriesPlanningClient(this)); }
        }

        private BetaseriesShowsClient showsClient;
        public BetaseriesShowsClient Shows {
            get { return this.showsClient ?? (this.showsClient = new BetaseriesShowsClient(this)); }
        }

        private BetaseriesSubtitlesClient subtitlesClient;
        public BetaseriesSubtitlesClient Subtitles {
            get { return this.subtitlesClient ?? (this.subtitlesClient = new BetaseriesSubtitlesClient(this)); }
        }

        private BetaseriesTimelineClient timelineClient;
        public BetaseriesTimelineClient Timeline {
            get { return this.timelineClient ?? (this.timelineClient = new BetaseriesTimelineClient(this)); }
        }
    }


    public partial class BetaseriesCommentsClient {
        private readonly BetaseriesClient client;

        public BetaseriesCommentsClient(BetaseriesClient client) {
            this.client = client;
        }


        /// <summary>
        /// Envoie un commentaire pour l'élément spécifié.
        /// Call for POST 'comments/comment'.
        /// </summary>
        /// <param name="type">Type d&#x27;élément : episode|show|member|movie</param>
        /// <param name="id">ID de l&#x27;élément en question</param>
        /// <param name="text">Texte du commentaire</param>
        /// <param name="in_reply_to">Si c&#x27;est une réponse, inner_id du commentaire correspondant (Facultatif)</param>
        public Srk.BetaseriesApi2.Comment Post(EntityType type, string id, string text, string in_reply_to)
        {
            var context = new RequestContext();
            context.Method =  "POST";
            context.UrlPath = "comments/comment";
            context.AddUrlArgumentToUrlQueryString("type", type.ToString());
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToPostContent("text", text);
            context.AddUrlArgumentToUrlQueryString("in_reply_to", in_reply_to);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse<Srk.BetaseriesApi2.Comment>>(response);
            this.client.HandleErrors(result);
            return result.Data;
        }

        /// <summary>
        /// Supprime un commentaire de l'utilisateur identifié.
        /// Call for DELETE 'comments/comment'.
        /// </summary>
        /// <param name="id">ID du commentaire</param>
        public Srk.BetaseriesApi2.Comment Delete(string id)
        {
            var context = new RequestContext();
            context.Method =  "DELETE";
            context.UrlPath = "comments/comment";
            context.AddUrlArgumentToUrlQueryString("id", id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse<Srk.BetaseriesApi2.Comment>>(response);
            this.client.HandleErrors(result);
            return result.Data;
        }

        /// <summary>
        /// Récupère les commentaires pour un élément donné.
        /// Call for GET 'comments/comments'.
        /// </summary>
        /// <param name="type">Type d&#x27;élément : episode|show|member|movie</param>
        /// <param name="id">ID de l&#x27;élément en question</param>
        /// <param name="nbpp">Nombre de commentaires par page</param>
        /// <param name="since_id">ID du dernier commentaire reçu (Facultatif)</param>
        /// <param name="order">Ordre chronologique de retour, desc ou asc (Défaut asc)</param>
        /// <param name="replies">Inclure les réponses aux commentaires (1 ou 0, par défaut 1)</param>
        public Srk.BetaseriesApi2.Comment Get(EntityType type, string id, string nbpp, string since_id, string order, string replies)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "comments/comments";
            context.AddUrlArgumentToUrlQueryString("type", type.ToString());
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("nbpp", nbpp);
            context.AddUrlArgumentToUrlQueryString("since_id", since_id);
            context.AddUrlArgumentToUrlQueryString("order", order);
            context.AddUrlArgumentToUrlQueryString("replies", replies);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse<Srk.BetaseriesApi2.Comment>>(response);
            this.client.HandleErrors(result);
            return result.Data;
        }

        /// <summary>
        /// Récupère les réponses d'un commentaire donné.
        /// Call for GET 'comments/replies'.
        /// </summary>
        /// <param name="id">ID du commentaire</param>
        /// <param name="order">Ordre chronologique de retour, desc ou asc (Défaut asc)</param>
        public Srk.BetaseriesApi2.CommentReply Reply(string id, string order)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "comments/replies";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("order", order);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse<Srk.BetaseriesApi2.CommentReply>>(response);
            this.client.HandleErrors(result);
            return result.Data;
        }

        /// <summary>
        /// Inscrit le membre aux notifications e-mail pour l'élément donné.
        /// Call for POST 'comments/subscription'.
        /// </summary>
        /// <param name="type">Type d&#x27;élément : episode|show|member|movie</param>
        /// <param name="id">ID de l&#x27;élément en question</param>
        public void Subscribe(EntityType type, string id)
        {
            var context = new RequestContext();
            context.Method =  "POST";
            context.UrlPath = "comments/subscription";
            context.AddUrlArgumentToUrlQueryString("type", type.ToString());
            context.AddUrlArgumentToUrlQueryString("id", id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Désinscrit le membre aux notifications e-mail pour l'élément donné.
        /// Call for DELETE 'comments/subscription'.
        /// </summary>
        /// <param name="type">Type d&#x27;élément : episode|show|member|movie</param>
        /// <param name="id">ID de l&#x27;élément en question</param>
        public void Unsubscribe(EntityType type, string id)
        {
            var context = new RequestContext();
            context.Method =  "DELETE";
            context.UrlPath = "comments/subscription";
            context.AddUrlArgumentToUrlQueryString("type", type.ToString());
            context.AddUrlArgumentToUrlQueryString("id", id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }
    }

    public partial class BetaseriesEpisodesClient {
        private readonly BetaseriesClient client;

        public BetaseriesEpisodesClient(BetaseriesClient client) {
            this.client = client;
        }


        /// <summary>
        /// Affiche les informations d'un épisode.
        /// Call for GET 'episodes/display'.
        /// </summary>
        /// <param name="id">ID de l&#x27;épisode. Vous pouvez en mettre plusieurs en les séparant par un virgule (Facultatif si thetvdb_id renseigné)</param>
        /// <param name="thetvdb_id">ID de l&#x27;épisode sur TheTVDB. Vous pouvez en mettre plusieurs en les séparant par un virgule (Facultatif si id renseigné)</param>
        /// <param name="subtitles">Affiche les sous-titres si renseigné (Facultatif)</param>
        public void GetById(string id, string thetvdb_id, string subtitles)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "episodes/display";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("thetvdb_id", thetvdb_id);
            context.AddUrlArgumentToUrlQueryString("subtitles", subtitles);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Marque un épisode comme téléchargé.
        /// Call for POST 'episodes/downloaded'.
        /// </summary>
        /// <param name="id">ID de l&#x27;épisode (Facultatif si thetvdb_id renseigné)</param>
        /// <param name="thetvdb_id">ID de l&#x27;épisode sur TheTVDB (Facultatif si id renseigné)</param>
        public void MarkDownloaded(string id, string thetvdb_id)
        {
            var context = new RequestContext();
            context.Method =  "POST";
            context.UrlPath = "episodes/downloaded";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("thetvdb_id", thetvdb_id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Enlève le marquage d'un épisode comme téléchargé.
        /// Call for DELETE 'episodes/downloaded'.
        /// </summary>
        /// <param name="id">ID de l&#x27;épisode (Facultatif si thetvdb_id renseigné)</param>
        /// <param name="thetvdb_id">ID de l&#x27;épisode sur TheTVDB (Facultatif si id renseigné)</param>
        public void UnmarkDownloaded(string id, string thetvdb_id)
        {
            var context = new RequestContext();
            context.Method =  "DELETE";
            context.UrlPath = "episodes/downloaded";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("thetvdb_id", thetvdb_id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Récupère la liste des épisodes à voir.
        /// Call for GET 'episodes/list'.
        /// </summary>
        /// <param name="subtitles">Affiche les épisodes avec certains sous-titres disponibles : all|vovf|vo|vf (Facultatif)</param>
        /// <param name="limit">Limite à un nombre d&#x27;épisodes par série (Facultatif)</param>
        /// <param name="showId">ID de la série (Facultatif)</param>
        /// <param name="userId">ID du membre (Facultatif, par défaut membre identifié)</param>
        public void List(SubtitleFilter subtitles, string limit, string showId, string userId)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "episodes/list";
            context.AddUrlArgumentToUrlQueryString("subtitles", subtitles.ToString());
            context.AddUrlArgumentToUrlQueryString("limit", limit);
            context.AddUrlArgumentToUrlQueryString("showId", showId);
            context.AddUrlArgumentToUrlQueryString("userId", userId);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Note un épisode.
        /// Call for POST 'episodes/note'.
        /// </summary>
        /// <param name="id">ID de l&#x27;épisode (Facultatif si thetvdb_id renseigné)</param>
        /// <param name="thetvdb_id">ID de l&#x27;épisode sur TheTVDB (Facultatif si id renseigné)</param>
        /// <param name="note">Note attribuée de 1 à 5</param>
        public void SetMark(string id, string thetvdb_id, string note)
        {
            var context = new RequestContext();
            context.Method =  "POST";
            context.UrlPath = "episodes/note";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("thetvdb_id", thetvdb_id);
            context.AddUrlArgumentToUrlQueryString("note", note);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Supprime une note d'un épisode.
        /// Call for DELETE 'episodes/note'.
        /// </summary>
        /// <param name="id">ID de l&#x27;épisode (Facultatif si thetvdb_id renseigné)</param>
        /// <param name="thetvdb_id">ID de l&#x27;épisode sur TheTVDB (Facultatif si id renseigné)</param>
        public void DeleteMark(string id, string thetvdb_id)
        {
            var context = new RequestContext();
            context.Method =  "DELETE";
            context.UrlPath = "episodes/note";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("thetvdb_id", thetvdb_id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Récupère les informations d'un épisode en fonction du nom de fichier
        /// Call for GET 'episodes/scraper'.
        /// </summary>
        /// <param name="file">Nom du fichier à traiter</param>
        public void EpisodeScraper(string file)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "episodes/scraper";
            context.AddUrlArgumentToUrlQueryString("file", file);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Récupère les informations d'un épisode en fonction d'informations.
        /// Call for GET 'episodes/search'.
        /// </summary>
        /// <param name="show_id">ID de la série pour l&#x27;épisode à chercher</param>
        /// <param name="number">Numéro de la série, soit SxxExx soit le numéro global</param>
        /// <param name="subtitles">Si spécifié, retourne les sous-titres des épisodes</param>
        public void Search(string show_id, string number, string subtitles)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "episodes/search";
            context.AddUrlArgumentToUrlQueryString("show_id", show_id);
            context.AddUrlArgumentToUrlQueryString("number", number);
            context.AddUrlArgumentToUrlQueryString("subtitles", subtitles);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Marque un épisode comme vu. Vous pouvez spécifier plusieurs épisodes en séparant les ID par une virgule.
        /// Call for POST 'episodes/watched'.
        /// </summary>
        /// <param name="id">ID de l&#x27;épisode (Facultatif si thetvdb_id renseigné)</param>
        /// <param name="thetvdb_id">ID de l&#x27;épisode sur TheTVDB (Facultatif si id renseigné)</param>
        /// <param name="bulk">Si bulk est spécifié, tous les épisodes précédents seront aussi marqués comme vus (défaut à true)</param>
        /// <param name="delete">Si delete est spécifié, tous les épisodes d&#x27;après ne seront plus marqués comme vus</param>
        /// <param name="note">Si la note est spécifiée entre 1 et 5, donne une note à l&#x27;épisode</param>
        public void MarkWatched(string id, string thetvdb_id, string bulk, string delete, string note)
        {
            var context = new RequestContext();
            context.Method =  "POST";
            context.UrlPath = "episodes/watched";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("thetvdb_id", thetvdb_id);
            context.AddUrlArgumentToUrlQueryString("bulk", bulk);
            context.AddUrlArgumentToUrlQueryString("delete", delete);
            context.AddUrlArgumentToUrlQueryString("note", note);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Enlève le marquage d'un épisode comme vu.
        /// Call for DELETE 'episodes/watched'.
        /// </summary>
        /// <param name="id">ID de l&#x27;épisode (Facultatif si thetvdb_id renseigné)</param>
        /// <param name="thetvdb_id">ID de l&#x27;épisode sur TheTVDB (Facultatif si id renseigné)</param>
        public void UnmarkWatched(string id, string thetvdb_id)
        {
            var context = new RequestContext();
            context.Method =  "DELETE";
            context.UrlPath = "episodes/watched";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("thetvdb_id", thetvdb_id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }
    }

    public partial class BetaseriesFriendsClient {
        private readonly BetaseriesClient client;

        public BetaseriesFriendsClient(BetaseriesClient client) {
            this.client = client;
        }


        /// <summary>
        /// Bloque un utilisateur.
        /// Call for POST 'friends/block'.
        /// </summary>
        /// <param name="id">ID du membre à bloquer</param>
        public void Block(string id)
        {
            var context = new RequestContext();
            context.Method =  "POST";
            context.UrlPath = "friends/block";
            context.AddUrlArgumentToUrlQueryString("id", id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Supprime le blocage d'un utilisateur.
        /// Call for DELETE 'friends/block'.
        /// </summary>
        /// <param name="id">ID du membre à débloquer</param>
        public void Unblock(string id)
        {
            var context = new RequestContext();
            context.Method =  "DELETE";
            context.UrlPath = "friends/block";
            context.AddUrlArgumentToUrlQueryString("id", id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Ajoute un ami dans le compte de l'utilisateur.
        /// Call for POST 'friends/friend'.
        /// </summary>
        /// <param name="id">ID du membre à ajouter en ami</param>
        public void Friend(string id)
        {
            var context = new RequestContext();
            context.Method =  "POST";
            context.UrlPath = "friends/friend";
            context.AddUrlArgumentToUrlQueryString("id", id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Supprime un ami du compte de l'utilisateur.
        /// Call for DELETE 'friends/friend'.
        /// </summary>
        /// <param name="id">ID du membre à supprimer</param>
        public void Unfriend(string id)
        {
            var context = new RequestContext();
            context.Method =  "DELETE";
            context.UrlPath = "friends/friend";
            context.AddUrlArgumentToUrlQueryString("id", id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Récupère la liste des amis du membre.
        /// Call for GET 'friends/list'.
        /// </summary>
        /// <param name="id">ID du membre, facultatif, si non renseigné utilise le membre identifié. Si renseigné, blocked=false.</param>
        /// <param name="blocked">Si spécifié, retourne la liste des personnes bloquées</param>
        public void GetFriends(string id, string blocked)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "friends/list";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("blocked", blocked);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Récupère la liste des demandes envoyées par l'utilisateur.
        /// Call for GET 'friends/requests'.
        /// </summary>
        /// <param name="received">Si spécifié, retourne la liste des demandes reçues</param>
        public void GetFriendRequests(string received)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "friends/requests";
            context.AddUrlArgumentToUrlQueryString("received", received);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }
    }

    public partial class BetaseriesMembersClient {
        private readonly BetaseriesClient client;

        public BetaseriesMembersClient(BetaseriesClient client) {
            this.client = client;
        }


        /// <summary>
        /// Récupère un token d'accès avec le code fourni par l'identification OAuth 2.
        /// Call for POST 'members/access_token'.
        /// </summary>
        /// <param name="client_id">Votre clé API.</param>
        /// <param name="client_secret">La clé secrète fournie dans les informations de votre clé.</param>
        /// <param name="redirect_uri">L&#x27;adresse de callback que vous aviez déjà renseignée pour la première partie.</param>
        /// <param name="code">Code récupéré par la première partie de l&#x27;identification.</param>
        public void GetOAuth2AccessToken(string client_id, string client_secret, string redirect_uri, string code)
        {
            var context = new RequestContext();
            context.Method =  "POST";
            context.UrlPath = "members/access_token";
            context.AddUrlArgumentToUrlQueryString("client_id", client_id);
            context.AddUrlArgumentToUrlQueryString("client_secret", client_secret);
            context.AddUrlArgumentToUrlQueryString("redirect_uri", redirect_uri);
            context.AddUrlArgumentToUrlQueryString("code", code);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Identification classique du membre.
        /// Call for POST 'members/auth'.
        /// </summary>
        /// <param name="login">Identifiant (login ou e-mail)</param>
        /// <param name="password">Mot de passe encrypté en MD5</param>
        public Srk.BetaseriesApi2.AuthenticationResult ClassicAuthenticate(string login, string password)
        {
            var context = new RequestContext();
            context.Method =  "POST";
            context.UrlPath = "members/auth";
            context.AddUrlArgumentToUrlQueryString("login", login);
            var value0 = this.client.ApplyMD5(password);
            context.AddUrlArgumentToUrlQueryString("password", value0);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<Srk.BetaseriesApi2.AuthenticationResult>(response);
            this.client.HandleErrors(result);
            return result;
        }

        /// <summary>
        /// Uploade et remplace l'avatar de l'utilisateur identifié.
        /// Call for POST 'members/avatar'.
        /// </summary>
        /// <param name="avatar">Image à utiliser pour l&#x27;avatar de l&#x27;utilisateur.</param>
        public void SetProfilePicture(byte[] avatar)
        {
            var context = new RequestContext();
            context.Method =  "POST";
            context.UrlPath = "members/avatar";
            var value0 = Convert.ToBase64String(avatar);
            context.AddUrlArgumentToPostContent("avatar", value0);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Supprime l'avatar de l'utilisateur identifié.
        /// Call for DELETE 'members/avatar'.
        /// </summary>
        public void DeleteProfilePicture()
        {
            var context = new RequestContext();
            context.Method =  "DELETE";
            context.UrlPath = "members/avatar";
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Affiche les badges du membre.
        /// Call for GET 'members/badges'.
        /// </summary>
        /// <param name="id">ID du membre</param>
        public void GetBadges(string id)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "members/badges";
            context.AddUrlArgumentToUrlQueryString("id", id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Détruit le token actif.
        /// Call for POST 'members/destroy'.
        /// </summary>
        public void DestroyToken()
        {
            var context = new RequestContext();
            context.Method =  "POST";
            context.UrlPath = "members/destroy";
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Renvoie les informations d'un membre, du membre identifié par défaut.
        /// Call for GET 'members/infos'.
        /// </summary>
        /// <param name="id">ID du membre</param>
        /// <param name="summary">N&#x27;affiche que les informations et pas les séries / films du compte (Défaut false)</param>
        public void GetProfile(string id, string summary)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "members/infos";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("summary", summary);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Vérifie que le token est actif.
        /// Call for GET 'members/is_active'.
        /// </summary>
        public void VerifyToken()
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "members/is_active";
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Envoie un e-mail pour réinitialiser le mot de passe.
        /// Call for POST 'members/lost'.
        /// </summary>
        /// <param name="find">Adresse e-mail ou nom de l&#x27;utilisateur</param>
        public void ResetPassword(string find)
        {
            var context = new RequestContext();
            context.Method =  "POST";
            context.UrlPath = "members/lost";
            context.AddUrlArgumentToUrlQueryString("find", find);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Affiche les dernières notifications du membre. Types : badge, banner, bugs, character, commentaire, dons, episode, facebook, film, forum, friend, message, quizz, recommend, site, subtitles, video.
        /// Call for GET 'members/notifications'.
        /// </summary>
        /// <param name="since_id">Dernier ID (Facultatif)</param>
        /// <param name="number">Nombre de notifications, maximum 100 (Facultatif, défaut 10)</param>
        /// <param name="sort">Tri descendant ou ascendant (ASC ou DESC, défaut DESC)</param>
        /// <param name="types">Retourner uniquement certains types séparés par une virgule (Facultatif)</param>
        /// <param name="auto_delete">Suppression automatique des notifications (Facultatif, défaut false)</param>
        public void MemberNotification(string since_id, string number, string sort, string types, string auto_delete)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "members/notifications";
            context.AddUrlArgumentToUrlQueryString("since_id", since_id);
            context.AddUrlArgumentToUrlQueryString("number", number);
            context.AddUrlArgumentToUrlQueryString("sort", sort);
            context.AddUrlArgumentToUrlQueryString("types", types);
            context.AddUrlArgumentToUrlQueryString("auto_delete", auto_delete);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Modifie une option de l'utilisateur.
        /// Call for POST 'members/option'.
        /// </summary>
        /// <param name="name">Nom de l&#x27;option (downloaded, global, notation, timelag, friendship)</param>
        /// <param name="value">Valeur de l&#x27;option (1 ou 0, pour friendship : open|requests|friends|nobody)</param>
        public void MemberOption(string name, ProfileConfidentiality value)
        {
            var context = new RequestContext();
            context.Method =  "POST";
            context.UrlPath = "members/option";
            context.AddUrlArgumentToUrlQueryString("name", name);
            context.AddUrlArgumentToUrlQueryString("value", value.ToString());
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Récupère les options (sous-titres) du membre.
        /// Call for GET 'members/options'.
        /// </summary>
        public void MemberOption()
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "members/options";
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Recherche des membres.
        /// Call for GET 'members/search'.
        /// </summary>
        /// <param name="login">Nom de l&#x27;utilisateur, 2 caractères minimum. Vous pouvez utiliser % comme wildcard.</param>
        public void MemberSearch(string login)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "members/search";
            context.AddUrlArgumentToUrlQueryString("login", login);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Crée un nouveau compte membre sur BetaSeries.
        /// Call for POST 'members/signup'.
        /// </summary>
        /// <param name="login">Nom d&#x27;utilisateur</param>
        /// <param name="password">Mot de passe en MD5 — Facultatif : S&#x27;il n&#x27;est pas fourni il sera généré et envoyé dans l&#x27;e-mail</param>
        /// <param name="email">Adresse e-mail</param>
        public void MemberSignup(string login, string password, string email)
        {
            var context = new RequestContext();
            context.Method =  "POST";
            context.UrlPath = "members/signup";
            context.AddUrlArgumentToUrlQueryString("login", login);
            context.AddUrlArgumentToUrlQueryString("password", password);
            context.AddUrlArgumentToUrlQueryString("email", email);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Cherche les membres parmi les amis du compte.
        /// Call for POST 'members/sync'.
        /// </summary>
        /// <param name="mails">Tableau POST des adresses e-mail à chercher</param>
        public void MemberSync(string[] mails)
        {
            var context = new RequestContext();
            context.Method =  "POST";
            context.UrlPath = "members/sync";
            foreach (var argValue in mails) {
                context.AddUrlArgumentToUrlQueryString("mails[]", argValue);
            }
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Retourne les possibilités de noms d'utilisateur libres sur BetaSeries.
        /// Call for GET 'members/username'.
        /// </summary>
        /// <param name="username">Nom d&#x27;utilisateur</param>
        public void MemberUsername(string username)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "members/username";
            context.AddUrlArgumentToUrlQueryString("username", username);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }
    }

    public partial class BetaseriesMessagesClient {
        private readonly BetaseriesClient client;

        public BetaseriesMessagesClient(BetaseriesClient client) {
            this.client = client;
        }


        /// <summary>
        /// Récupère une discussion identifiée par l'ID du premier message.
        /// Call for GET 'messages/discussion'.
        /// </summary>
        /// <param name="id">ID du premier message de la discussion</param>
        public Srk.BetaseriesApi2.MessageDiscussion MessageDiscussion(string id)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "messages/discussion";
            context.AddUrlArgumentToUrlQueryString("id", id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse<Srk.BetaseriesApi2.MessageDiscussion>>(response);
            this.client.HandleErrors(result);
            return result.Data;
        }

        /// <summary>
        /// Récupère la boîte de réception du membre identifié, par pages de 20.
        /// Call for GET 'messages/inbox'.
        /// </summary>
        /// <param name="page">Numéro de la page, 1 par défaut</param>
        public Srk.BetaseriesApi2.MessageInbox MessageInbox(string page)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "messages/inbox";
            context.AddUrlArgumentToUrlQueryString("page", page);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse<Srk.BetaseriesApi2.MessageInbox>>(response);
            this.client.HandleErrors(result);
            return result.Data;
        }

        /// <summary>
        /// Supprime un message que vous avez écrit.
        /// Call for DELETE 'messages/message'.
        /// </summary>
        /// <param name="id">ID du message à supprimer — Si c&#x27;est le premier d&#x27;une discussion, toute la discussion est supprimée</param>
        public Srk.BetaseriesApi2.MessageMessage DeleteMessageMessage(string id)
        {
            var context = new RequestContext();
            context.Method =  "DELETE";
            context.UrlPath = "messages/message";
            context.AddUrlArgumentToUrlQueryString("id", id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse<Srk.BetaseriesApi2.MessageMessage>>(response);
            this.client.HandleErrors(result);
            return result.Data;
        }

        /// <summary>
        /// Envoie un message à un autre membre du site.
        /// Call for POST 'messages/message'.
        /// </summary>
        /// <param name="to">ID du membre destinataire (obligatoire si premier message)</param>
        /// <param name="text">Texte du message</param>
        /// <param name="title">Titre du message (obligatoire si premier message)</param>
        /// <param name="id">ID du premier message de la discussion (facultatif)</param>
        public Srk.BetaseriesApi2.MessageMessage MessageMessage(string to, string text, string title, string id)
        {
            var context = new RequestContext();
            context.Method =  "POST";
            context.UrlPath = "messages/message";
            context.AddUrlArgumentToUrlQueryString("to", to);
            context.AddUrlArgumentToUrlQueryString("text", text);
            context.AddUrlArgumentToUrlQueryString("title", title);
            context.AddUrlArgumentToUrlQueryString("id", id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse<Srk.BetaseriesApi2.MessageMessage>>(response);
            this.client.HandleErrors(result);
            return result.Data;
        }

        /// <summary>
        /// Marque un message comme lu.
        /// Call for POST 'messages/read'.
        /// </summary>
        /// <param name="id">ID du message à marquer comme lu</param>
        public Srk.BetaseriesApi2.MessageRead MessageRead(string id)
        {
            var context = new RequestContext();
            context.Method =  "POST";
            context.UrlPath = "messages/read";
            context.AddUrlArgumentToUrlQueryString("id", id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse<Srk.BetaseriesApi2.MessageRead>>(response);
            this.client.HandleErrors(result);
            return result.Data;
        }
    }

    public partial class BetaseriesMoviesClient {
        private readonly BetaseriesClient client;

        public BetaseriesMoviesClient(BetaseriesClient client) {
            this.client = client;
        }


        /// <summary>
        /// Affiche la liste de tous les films.
        /// Call for GET 'movies/list'.
        /// </summary>
        /// <param name="start">Nombre de démarrage pour la liste des films (facultatif, défaut 0)</param>
        /// <param name="limit">Limite du nombre de films à afficher (maximum 1000) (facultatif)</param>
        /// <param name="order">Spécifie l&#x27;ordre de retour : alphabetical, popularity (facultatif)</param>
        public void MovyList(string start, string limit, string order)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "movies/list";
            context.AddUrlArgumentToUrlQueryString("start", start);
            context.AddUrlArgumentToUrlQueryString("limit", limit);
            context.AddUrlArgumentToUrlQueryString("order", order);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Affiche la liste de tous les films du membre.
        /// Call for GET 'movies/member'.
        /// </summary>
        /// <param name="state">0 = à voir, 1 = vu, 2 = ne veut pas voir (0 par défaut)</param>
        /// <param name="start">Nombre de démarrage pour la liste des films (facultatif, défaut 0)</param>
        /// <param name="limit">Limite du nombre de films à afficher (maximum 1000) (facultatif)</param>
        /// <param name="order">Spécifie l&#x27;ordre de retour : alphabetical, popularity (facultatif)</param>
        public void MovyMember(string state, string start, string limit, string order)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "movies/member";
            context.AddUrlArgumentToUrlQueryString("state", state);
            context.AddUrlArgumentToUrlQueryString("start", start);
            context.AddUrlArgumentToUrlQueryString("limit", limit);
            context.AddUrlArgumentToUrlQueryString("order", order);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Affiche les détails d'un film.
        /// Call for GET 'movies/movie'.
        /// </summary>
        /// <param name="id">ID du film</param>
        public void MovyMovie(string id)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "movies/movie";
            context.AddUrlArgumentToUrlQueryString("id", id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Ajoute ou met à jour le film dans les films du membre.
        /// Call for POST 'movies/movie'.
        /// </summary>
        /// <param name="id">ID du film</param>
        /// <param name="mail">Activer les alertes e-mail (0 ou 1, 1 par défaut)</param>
        /// <param name="twitter">Activer les alertes Twitter (0 ou 1, 1 par défaut)</param>
        /// <param name="state">0 = à voir, 1 = vu, 2 = ne veut pas voir (0 par défaut)</param>
        /// <param name="profile">Afficher sur le profil (0 ou 1, 1 par défaut)</param>
        public void MovyMovie(string id, string mail, string twitter, string state, string profile)
        {
            var context = new RequestContext();
            context.Method =  "POST";
            context.UrlPath = "movies/movie";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("mail", mail);
            context.AddUrlArgumentToUrlQueryString("twitter", twitter);
            context.AddUrlArgumentToUrlQueryString("state", state);
            context.AddUrlArgumentToUrlQueryString("profile", profile);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Supprime un film du compte membre.
        /// Call for DELETE 'movies/movie'.
        /// </summary>
        /// <param name="id">ID du film</param>
        public void DeleteMovyMovie(string id)
        {
            var context = new RequestContext();
            context.Method =  "DELETE";
            context.UrlPath = "movies/movie";
            context.AddUrlArgumentToUrlQueryString("id", id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Affiche un film au hasard.
        /// Call for GET 'movies/random'.
        /// </summary>
        /// <param name="nb">Nombre de films à afficher, par défaut 1</param>
        public void MovyRandom(string nb)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "movies/random";
            context.AddUrlArgumentToUrlQueryString("nb", nb);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Récupère les informations d'un film en fonction du nom de fichier
        /// Call for GET 'movies/scraper'.
        /// </summary>
        /// <param name="file">Nom du fichier à traiter</param>
        public void MovyScraper(string file)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "movies/scraper";
            context.AddUrlArgumentToUrlQueryString("file", file);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Recherche un film par critères.
        /// Call for GET 'movies/search'.
        /// </summary>
        /// <param name="title">Titre recherché (facultatif si order=popularity)</param>
        /// <param name="order">Ordre de retour (title|popularity), par défaut title</param>
        /// <param name="nbpp">Nombre de résultats par page, par défaut 5, maximum 100</param>
        /// <param name="page">Numéro de la page, par défaut 1</param>
        public void MovySearch(string title, TitlePopularity order, string nbpp, string page)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "movies/search";
            context.AddUrlArgumentToUrlQueryString("title", title);
            context.AddUrlArgumentToUrlQueryString("order", order.ToString());
            context.AddUrlArgumentToUrlQueryString("nbpp", nbpp);
            context.AddUrlArgumentToUrlQueryString("page", page);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }
    }

    public partial class BetaseriesPicturesClient {
        private readonly BetaseriesClient client;

        public BetaseriesPicturesClient(BetaseriesClient client) {
            this.client = client;
        }


        /// <summary>
        /// Retourne une image du badge (32x32).
        /// Call for GET 'pictures/badges'.
        /// </summary>
        /// <param name="id">ID du badge</param>
        public void PictureBadge(string id)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "pictures/badges";
            context.AddUrlArgumentToUrlQueryString("id", id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Retourne une image du personnage.
        /// Call for GET 'pictures/characters'.
        /// </summary>
        /// <param name="id">ID du personnage</param>
        /// <param name="width">Largeur désirée (facultatif, défaut 250)</param>
        /// <param name="height">Hauteur désirée (facultatif, défaut 375)</param>
        public void PictureCharacter(string id, string width, string height)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "pictures/characters";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("width", width);
            context.AddUrlArgumentToUrlQueryString("height", height);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Retourne une image de l'épisode.
        /// Call for GET 'pictures/episodes'.
        /// </summary>
        /// <param name="id">ID de l&#x27;épisode</param>
        /// <param name="width">Largeur désirée (facultatif)</param>
        /// <param name="height">Hauteur désirée (facultatif)</param>
        public void PictureEpisode(string id, string width, string height)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "pictures/episodes";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("width", width);
            context.AddUrlArgumentToUrlQueryString("height", height);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Retourne une image du membre.
        /// Call for GET 'pictures/members'.
        /// </summary>
        /// <param name="id">ID du membre</param>
        /// <param name="width">Largeur désirée (facultatif)</param>
        /// <param name="height">Hauteur désirée (facultatif)</param>
        public void PictureMember(string id, string width, string height)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "pictures/members";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("width", width);
            context.AddUrlArgumentToUrlQueryString("height", height);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Retourne une image du film.
        /// Call for GET 'pictures/movies'.
        /// </summary>
        /// <param name="id">ID du film</param>
        /// <param name="width">Largeur désirée (facultatif, défaut 250)</param>
        /// <param name="height">Hauteur désirée (facultatif, défaut 375)</param>
        public void PictureMovy(string id, string width, string height)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "pictures/movies";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("width", width);
            context.AddUrlArgumentToUrlQueryString("height", height);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Retourne une image de la série.
        /// Call for GET 'pictures/shows'.
        /// </summary>
        /// <param name="id">ID de la série</param>
        /// <param name="width">Largeur désirée (facultatif)</param>
        /// <param name="height">Hauteur désirée (facultatif)</param>
        /// <param name="picked">Prendre l&#x27;image votée par la communauté (banner ou show, facultatif)</param>
        public void PictureShow(string id, string width, string height, string picked)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "pictures/shows";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("width", width);
            context.AddUrlArgumentToUrlQueryString("height", height);
            context.AddUrlArgumentToUrlQueryString("picked", picked);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }
    }

    public partial class BetaseriesPlanningClient {
        private readonly BetaseriesClient client;

        public BetaseriesPlanningClient(BetaseriesClient client) {
            this.client = client;
        }


        /// <summary>
        /// Affiche tous les épisodes diffusés les 8 derniers jours jusqu'aux 8 prochains jours.
        /// Call for GET 'planning/general'.
        /// </summary>
        /// <param name="date">Date d&#x27;origine (YYYY-MM-JJ — Facultatif, par défaut &quot;now&quot;)</param>
        /// <param name="before">Nombre de jours avant (Facultatif, par défaut 8)</param>
        /// <param name="after">Nombre de jours après (Facultatif, par défaut 8)</param>
        /// <param name="type">Type d&#x27;épisodes à afficher : &quot;all&quot; ou &quot;premieres&quot; (Facultatif, par défaut &quot;all&quot;)</param>
        public void PlanningGeneral(string date, string before, string after, string type)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "planning/general";
            context.AddUrlArgumentToUrlQueryString("date", date);
            context.AddUrlArgumentToUrlQueryString("before", before);
            context.AddUrlArgumentToUrlQueryString("after", after);
            context.AddUrlArgumentToUrlQueryString("type", type);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Affiche uniquement le premier épisode des prochaines séries qui vont être diffusées.
        /// Call for GET 'planning/incoming'.
        /// </summary>
        public void PlanningIncoming()
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "planning/incoming";
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Affiche le planning du membre identifié ou d'un autre membre.
        /// Call for GET 'planning/member'.
        /// </summary>
        /// <param name="id">ID du membre (Facultatif si identifié)</param>
        /// <param name="unseen">N&#x27;affiche que les épisodes non-vus</param>
        /// <param name="month">Affiche le planning du mois spécifié (format YYYY-MM)</param>
        public void PlanningMember(string id, string unseen, string month)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "planning/member";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("unseen", unseen);
            context.AddUrlArgumentToUrlQueryString("month", month);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }
    }

    public partial class BetaseriesShowsClient {
        private readonly BetaseriesClient client;

        public BetaseriesShowsClient(BetaseriesClient client) {
            this.client = client;
        }


        /// <summary>
        /// Archive une série dans le compte du membre.
        /// Call for POST 'shows/archive'.
        /// </summary>
        /// <param name="id">ID de la série (Facultatif si thetvdb_id renseigné)</param>
        /// <param name="thetvdb_id">ID de la série sur TheTVDB (Facultatif si id renseigné)</param>
        public void ShowArchive(string id, string thetvdb_id)
        {
            var context = new RequestContext();
            context.Method =  "POST";
            context.UrlPath = "shows/archive";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("thetvdb_id", thetvdb_id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Sort une série des archives du compte du membre.
        /// Call for DELETE 'shows/archive'.
        /// </summary>
        /// <param name="id">ID de la série (Facultatif si thetvdb_id renseigné)</param>
        /// <param name="thetvdb_id">ID de la série sur TheTVDB (Facultatif si id renseigné)</param>
        public void DeleteShowArchive(string id, string thetvdb_id)
        {
            var context = new RequestContext();
            context.Method =  "DELETE";
            context.UrlPath = "shows/archive";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("thetvdb_id", thetvdb_id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Récupère les personnages de la série, ajoutés par les membres de BetaSeries.
        /// Call for GET 'shows/characters'.
        /// </summary>
        /// <param name="id">ID de la série (Facultatif si thetvdb_id renseigné)</param>
        /// <param name="thetvdb_id">ID de la série sur TheTVDB (Facultatif si id renseigné)</param>
        public Srk.BetaseriesApi2.ShowCharacter ShowCharacter(string id, string thetvdb_id)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "shows/characters";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("thetvdb_id", thetvdb_id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse<Srk.BetaseriesApi2.ShowCharacter>>(response);
            this.client.HandleErrors(result);
            return result.Data;
        }

        /// <summary>
        /// Affiche les informations d'une série.
        /// Call for GET 'shows/display'.
        /// </summary>
        /// <param name="id">ID de la série. Vous pouvez en mettre plusieurs en les séparant par un virgule (Facultatif si thetvdb_id renseigné)</param>
        /// <param name="thetvdb_id">ID de la série sur TheTVDB. Vous pouvez en mettre plusieurs en les séparant par un virgule (Facultatif si id renseigné)</param>
        public void ShowDisplay(string id, string thetvdb_id)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "shows/display";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("thetvdb_id", thetvdb_id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Affiche les épisodes d'une série.
        /// Call for GET 'shows/episodes'.
        /// </summary>
        /// <param name="id">ID de la série (Facultatif si thetvdb_id renseigné)</param>
        /// <param name="thetvdb_id">ID de la série sur TheTVDB (Facultatif si id renseigné)</param>
        /// <param name="season">Numéro de la saison (Facultatif)</param>
        /// <param name="episode">Numéro de l&#x27;épisode (Facultatif)</param>
        /// <param name="subtitles">Affiche les sous-titres si renseigné (Facultatif)</param>
        public void ShowEpisode(string id, string thetvdb_id, string season, string episode, string subtitles)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "shows/episodes";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("thetvdb_id", thetvdb_id);
            context.AddUrlArgumentToUrlQueryString("season", season);
            context.AddUrlArgumentToUrlQueryString("episode", episode);
            context.AddUrlArgumentToUrlQueryString("subtitles", subtitles);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Ajoute une série favorite sur le profil du membre identifié.
        /// Call for POST 'shows/favorite'.
        /// </summary>
        /// <param name="id">ID de la série à ajouter.</param>
        public void SetShowAsFavorite(string id)
        {
            var context = new RequestContext();
            context.Method =  "POST";
            context.UrlPath = "shows/favorite";
            context.AddUrlArgumentToUrlQueryString("id", id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Supprime une série favorite du profil du membre identifié.
        /// Call for DELETE 'shows/favorite'.
        /// </summary>
        /// <param name="id">ID de la série à supprimer.</param>
        public void DeleteShowFavorite(string id)
        {
            var context = new RequestContext();
            context.Method =  "DELETE";
            context.UrlPath = "shows/favorite";
            context.AddUrlArgumentToUrlQueryString("id", id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Récupère les séries favorites du membre.
        /// Call for GET 'shows/favorites'.
        /// </summary>
        /// <param name="id">ID du membre, facultatif, si non renseigné utilise le membre identifié.</param>
        public void GetFavoriteShows(string id)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "shows/favorites";
            context.AddUrlArgumentToUrlQueryString("id", id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Affiche la liste de toutes les séries.
        /// Call for GET 'shows/list'.
        /// </summary>
        /// <param name="order">Spécifie l&#x27;ordre de retour : alphabetical, popularity, followers (facultatif)</param>
        /// <param name="since">N&#x27;afficher que les séries modifiées à partir de cette date (timestamp UNIX — facultatif)</param>
        public void ShowList(string order, string since)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "shows/list";
            context.AddUrlArgumentToUrlQueryString("order", order);
            context.AddUrlArgumentToUrlQueryString("since", since);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Note une série.
        /// Call for POST 'shows/note'.
        /// </summary>
        /// <param name="id">ID de la série (Facultatif si thetvdb_id renseigné)</param>
        /// <param name="thetvdb_id">ID de la série sur TheTVDB (Facultatif si id renseigné)</param>
        /// <param name="note">Note attribuée de 1 à 5</param>
        public void ShowNote(string id, string thetvdb_id, string note)
        {
            var context = new RequestContext();
            context.Method =  "POST";
            context.UrlPath = "shows/note";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("thetvdb_id", thetvdb_id);
            context.AddUrlArgumentToUrlQueryString("note", note);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Supprime une note d'une série.
        /// Call for DELETE 'shows/note'.
        /// </summary>
        /// <param name="id">ID de la série (Facultatif si thetvdb_id renseigné)</param>
        /// <param name="thetvdb_id">ID de la série sur TheTVDB (Facultatif si id renseigné)</param>
        public void DeleteShowNote(string id, string thetvdb_id)
        {
            var context = new RequestContext();
            context.Method =  "DELETE";
            context.UrlPath = "shows/note";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("thetvdb_id", thetvdb_id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Récupère les images de la série, ajoutées par les membres de BetaSeries.
        /// Call for GET 'shows/pictures'.
        /// </summary>
        /// <param name="id">ID de la série (Facultatif si thetvdb_id renseigné)</param>
        /// <param name="thetvdb_id">ID de la série sur TheTVDB (Facultatif si id renseigné)</param>
        public Srk.BetaseriesApi2.ShowPicture ShowPicture(string id, string thetvdb_id)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "shows/pictures";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("thetvdb_id", thetvdb_id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse<Srk.BetaseriesApi2.ShowPicture>>(response);
            this.client.HandleErrors(result);
            return result.Data;
        }

        /// <summary>
        /// Affiche une série au hasard.
        /// Call for GET 'shows/random'.
        /// </summary>
        /// <param name="nb">Nombre de séries à afficher, par défaut 1</param>
        /// <param name="summary">Retourne uniquement les infos essentielles de la série (Défaut false)</param>
        public void ShowRandom(string nb, string summary)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "shows/random";
            context.AddUrlArgumentToUrlQueryString("nb", nb);
            context.AddUrlArgumentToUrlQueryString("summary", summary);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Créer une recommandation d'une série d'un membre pour un ami.
        /// Call for POST 'shows/recommendation'.
        /// </summary>
        /// <param name="id">ID de la série (Facultatif si thetvdb_id renseigné)</param>
        /// <param name="thetvdb_id">ID de la série sur TheTVDB (Facultatif si id renseigné)</param>
        /// <param name="to">ID du membre ami</param>
        /// <param name="comments">Commentaires pour l&#x27;ami (Facultatif)</param>
        public void ShowRecommendation(string id, string thetvdb_id, string to, string comments)
        {
            var context = new RequestContext();
            context.Method =  "POST";
            context.UrlPath = "shows/recommendation";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("thetvdb_id", thetvdb_id);
            context.AddUrlArgumentToUrlQueryString("to", to);
            context.AddUrlArgumentToUrlQueryString("comments", comments);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Supprime une recommandation d'une série envoyée ou reçue.
        /// Call for DELETE 'shows/recommendation'.
        /// </summary>
        /// <param name="id">ID de la recommandation</param>
        public void DeleteShowRecommendation(string id)
        {
            var context = new RequestContext();
            context.Method =  "DELETE";
            context.UrlPath = "shows/recommendation";
            context.AddUrlArgumentToUrlQueryString("id", id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Récupère les recommandations reçues par l'utilisateur identifié.
        /// Call for GET 'shows/recommendations'.
        /// </summary>
        public void ShowRecommendation()
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "shows/recommendations";
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Recherche une série.
        /// Call for GET 'shows/search'.
        /// </summary>
        /// <param name="title">Titre recherché</param>
        /// <param name="summary">Retourne uniquement les infos essentielles de la série (Défaut false)</param>
        /// <param name="order">Ordre de retour (title|popularity|followers), par défaut title</param>
        /// <param name="nbpp">Nombre de résultats par page, par défaut 5, maximum 100</param>
        /// <param name="page">Numéro de la page, par défaut 1</param>
        public void ShowSearch(string title, string summary, TitlePopularityFollower order, string nbpp, string page)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "shows/search";
            context.AddUrlArgumentToUrlQueryString("title", title);
            context.AddUrlArgumentToUrlQueryString("summary", summary);
            context.AddUrlArgumentToUrlQueryString("order", order.ToString());
            context.AddUrlArgumentToUrlQueryString("nbpp", nbpp);
            context.AddUrlArgumentToUrlQueryString("page", page);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Ajoute une série dans le compte du membre.
        /// Call for POST 'shows/show'.
        /// </summary>
        /// <param name="id">ID de la série. Vous pouvez en mettre plusieurs en les séparant par un virgule (Facultatif si thetvdb_id renseigné)</param>
        /// <param name="thetvdb_id">ID de la série sur TheTVDB. Vous pouvez en mettre plusieurs en les séparant par un virgule (Facultatif si id renseigné)</param>
        /// <param name="episode_id">ID du dernier épisode vu. Si plusieurs séries, l&#x27;ordre des épisodes doit être exactement le même (Facultatif)</param>
        public void ShowShow(string id, string thetvdb_id, string episode_id)
        {
            var context = new RequestContext();
            context.Method =  "POST";
            context.UrlPath = "shows/show";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("thetvdb_id", thetvdb_id);
            context.AddUrlArgumentToUrlQueryString("episode_id", episode_id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Supprime une série du compte du membre.
        /// Call for DELETE 'shows/show'.
        /// </summary>
        /// <param name="id">ID de la série (Facultatif si thetvdb_id renseigné)</param>
        /// <param name="thetvdb_id">ID de la série sur TheTVDB (Facultatif si id renseigné)</param>
        public void DeleteShowShow(string id, string thetvdb_id)
        {
            var context = new RequestContext();
            context.Method =  "DELETE";
            context.UrlPath = "shows/show";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("thetvdb_id", thetvdb_id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Récupère les séries marquées similaires par les membres de BetaSeries.
        /// Call for GET 'shows/similars'.
        /// </summary>
        /// <param name="id">ID de la série (Facultatif si thetvdb_id renseigné)</param>
        /// <param name="thetvdb_id">ID de la série sur TheTVDB (Facultatif si id renseigné)</param>
        public void ShowSimilar(string id, string thetvdb_id)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "shows/similars";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("thetvdb_id", thetvdb_id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Récupère les vidéos associées à la série par les membres de BetaSeries.
        /// Call for GET 'shows/videos'.
        /// </summary>
        /// <param name="id">ID de la série (Facultatif si thetvdb_id renseigné)</param>
        /// <param name="thetvdb_id">ID de la série sur TheTVDB (Facultatif si id renseigné)</param>
        public void ShowVideo(string id, string thetvdb_id)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "shows/videos";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("thetvdb_id", thetvdb_id);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }
    }

    public partial class BetaseriesSubtitlesClient {
        private readonly BetaseriesClient client;

        public BetaseriesSubtitlesClient(BetaseriesClient client) {
            this.client = client;
        }


        /// <summary>
        /// Affiche les sous-titres pour un épisode donné.
        /// Call for GET 'subtitles/episode'.
        /// </summary>
        /// <param name="id">ID de l&#x27;épisode</param>
        /// <param name="language">N&#x27;affiche que certaines langues : all|vovf|vo|vf (Facultatif)</param>
        public void SubtitleEpisode(string id, SubtitleFilter language)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "subtitles/episode";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("language", language.ToString());
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Affiche les derniers sous-titres récupérés par BetaSeries.
        /// Call for GET 'subtitles/last'.
        /// </summary>
        /// <param name="number">Nombre de sous-titres, maximum 100</param>
        /// <param name="language">N&#x27;affiche que certaines langues : all|vovf|vo|vf (Facultatif)</param>
        public void SubtitleLast(string number, SubtitleFilter language)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "subtitles/last";
            context.AddUrlArgumentToUrlQueryString("number", number);
            context.AddUrlArgumentToUrlQueryString("language", language.ToString());
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Reporte des sous-titres comme incorrects pour se faire supprimer de la liste.
        /// Call for POST 'subtitles/report'.
        /// </summary>
        /// <param name="id">ID du sous-titre</param>
        /// <param name="reason">Raison pour laquelle le sous-titre n&#x27;est pas correct</param>
        public void SubtitleReport(string id, string reason)
        {
            var context = new RequestContext();
            context.Method =  "POST";
            context.UrlPath = "subtitles/report";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("reason", reason);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }

        /// <summary>
        /// Affiche les sous-titres pour une série donnée.
        /// Call for GET 'subtitles/show'.
        /// </summary>
        /// <param name="id">ID de la série</param>
        /// <param name="language">N&#x27;affiche que certaines langues : all|vovf|vo|vf (Facultatif)</param>
        public void SubtitleShow(string id, SubtitleFilter language)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "subtitles/show";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("language", language.ToString());
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse>(response);
            this.client.HandleErrors(result);
        }
    }

    public partial class BetaseriesTimelineClient {
        private readonly BetaseriesClient client;

        public BetaseriesTimelineClient(BetaseriesClient client) {
            this.client = client;
        }


        /// <summary>
        /// Affiche les derniers évènements des amis du membre identifié.
        /// Call for GET 'timeline/friends'.
        /// </summary>
        /// <param name="nbpp">Nombre d&#x27;évènements par page, maximum 100</param>
        /// <param name="since_id">ID du dernier évènement reçu (Facultatif)</param>
        /// <param name="types">Types d&#x27;évènements à retourner, séparés par une virgule (Facultatif)</param>
        public Srk.BetaseriesApi2.TimelineFriend TimelineFriend(string nbpp, string since_id, string types)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "timeline/friends";
            context.AddUrlArgumentToUrlQueryString("nbpp", nbpp);
            context.AddUrlArgumentToUrlQueryString("since_id", since_id);
            context.AddUrlArgumentToUrlQueryString("types", types);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse<Srk.BetaseriesApi2.TimelineFriend>>(response);
            this.client.HandleErrors(result);
            return result.Data;
        }

        /// <summary>
        /// Affiche les derniers évènements du site.
        /// Call for GET 'timeline/home'.
        /// </summary>
        /// <param name="nbpp">Nombre d&#x27;évènements par page, maximum 100</param>
        /// <param name="since_id">ID du dernier évènement reçu (Facultatif)</param>
        /// <param name="types">Types d&#x27;évènements à retourner, séparés par une virgule (Facultatif)</param>
        public Srk.BetaseriesApi2.TimelineHome TimelineHome(string nbpp, string since_id, string types)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "timeline/home";
            context.AddUrlArgumentToUrlQueryString("nbpp", nbpp);
            context.AddUrlArgumentToUrlQueryString("since_id", since_id);
            context.AddUrlArgumentToUrlQueryString("types", types);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse<Srk.BetaseriesApi2.TimelineHome>>(response);
            this.client.HandleErrors(result);
            return result.Data;
        }

        /// <summary>
        /// Affiche les derniers évènements du membre spécifié.
        /// Call for GET 'timeline/member'.
        /// </summary>
        /// <param name="id">ID du membre</param>
        /// <param name="nbpp">Nombre d&#x27;évènements par page, maximum 100</param>
        /// <param name="since_id">ID du dernier évènement reçu (Facultatif)</param>
        /// <param name="types">Types d&#x27;évènements à retourner, séparés par une virgule (Facultatif)</param>
        public Srk.BetaseriesApi2.TimelineMember TimelineMember(string id, string nbpp, string since_id, string types)
        {
            var context = new RequestContext();
            context.Method =  "GET";
            context.UrlPath = "timeline/member";
            context.AddUrlArgumentToUrlQueryString("id", id);
            context.AddUrlArgumentToUrlQueryString("nbpp", nbpp);
            context.AddUrlArgumentToUrlQueryString("since_id", since_id);
            context.AddUrlArgumentToUrlQueryString("types", types);
            var response = this.client.ExecuteQuery(context);
            
            var result = JsonConvert.DeserializeObject<BaseResponse<Srk.BetaseriesApi2.TimelineMember>>(response);
            this.client.HandleErrors(result);
            return result.Data;
        }
    }
}

#endregion


/*
Session IDictionary`2
Errors CompilerErrorCollection
CurrentIndent String
Microsoft.VisualStudio.TextTemplating.11.0, Version=11.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
Microsoft.VisualStudio.TextTemplating.TextTransformation
*/


