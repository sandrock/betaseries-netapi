//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#region Entities (merged)

namespace Srk.BetaseriesApi {
    using System;
    
    /// <summary>
    /// Response format for 'comments/comment'.
    /// </summary>
    public class CommentComment {
        
        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        public string id { get; set; }
        
        /// <summary>
        /// Gets or sets the user_id.
        /// </summary>
        public int user_id { get; set; }
        
        /// <summary>
        /// Gets or sets the login.
        /// </summary>
        public string login { get; set; }
        
        /// <summary>
        /// Gets or sets the avatar.
        /// </summary>
        public string avatar { get; set; }
        
        /// <summary>
        /// Gets or sets the date.
        /// </summary>
        public DateTime date { get; set; }
        
        /// <summary>
        /// Gets or sets the text.
        /// </summary>
        public string text { get; set; }
        
        /// <summary>
        /// Gets or sets the inner_id.
        /// </summary>
        public int inner_id { get; set; }
        
        /// <summary>
        /// Gets or sets the in_reply_to.
        /// </summary>
        public int in_reply_to { get; set; }
    }
    
    /// <summary>
    /// Response format for 'comments/comments'.
    /// </summary>
    public class CommentComment {
    }
    
    /// <summary>
    /// Response format for 'comments/replies'.
    /// </summary>
    public class CommentReply {
    }
    
    /// <summary>
    /// Response format for 'messages/discussion'.
    /// </summary>
    public class MessageDiscussion {
    }
    
    /// <summary>
    /// Response format for 'messages/inbox'.
    /// </summary>
    public class MessageInbox {
    }
    
    /// <summary>
    /// Response format for 'messages/message'.
    /// </summary>
    public class MessageMessage {
        
        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        public int id { get; set; }
        
        /// <summary>
        /// Gets or sets the message_id.
        /// </summary>
        public int message_id { get; set; }
        
        /// <summary>
        /// Gets or sets the inner_id.
        /// </summary>
        public int inner_id { get; set; }
        
        /// <summary>
        /// Gets or sets the sender.
        /// </summary>
        public SenderClass sender { get; set; }
        
        public class SenderClass {
            
            /// <summary>
            /// Gets or sets the id.
            /// </summary>
            public int id { get; set; }
            
            /// <summary>
            /// Gets or sets the login.
            /// </summary>
            public string login { get; set; }
        }
        
        /// <summary>
        /// Gets or sets the recipient.
        /// </summary>
        public RecipientClass recipient { get; set; }
        
        public class RecipientClass {
            
            /// <summary>
            /// Gets or sets the id.
            /// </summary>
            public int id { get; set; }
            
            /// <summary>
            /// Gets or sets the login.
            /// </summary>
            public string login { get; set; }
        }
        
        /// <summary>
        /// Gets or sets the date.
        /// </summary>
        public DateTime date { get; set; }
        
        /// <summary>
        /// Gets or sets the title.
        /// </summary>
        public string title { get; set; }
        
        /// <summary>
        /// Gets or sets the text.
        /// </summary>
        public string text { get; set; }
        
        /// <summary>
        /// Gets or sets the unread.
        /// </summary>
        public bool unread { get; set; }
        
        /// <summary>
        /// Gets or sets the has_unread.
        /// </summary>
        public bool has_unread { get; set; }
    }
    
    /// <summary>
    /// Response format for 'messages/read'.
    /// </summary>
    public class MessageRead {
        
        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        public int id { get; set; }
        
        /// <summary>
        /// Gets or sets the message_id.
        /// </summary>
        public int message_id { get; set; }
        
        /// <summary>
        /// Gets or sets the inner_id.
        /// </summary>
        public int inner_id { get; set; }
        
        /// <summary>
        /// Gets or sets the sender.
        /// </summary>
        public SenderClass sender { get; set; }
        
        public class SenderClass {
            
            /// <summary>
            /// Gets or sets the id.
            /// </summary>
            public int id { get; set; }
            
            /// <summary>
            /// Gets or sets the login.
            /// </summary>
            public string login { get; set; }
        }
        
        /// <summary>
        /// Gets or sets the recipient.
        /// </summary>
        public RecipientClass recipient { get; set; }
        
        public class RecipientClass {
            
            /// <summary>
            /// Gets or sets the id.
            /// </summary>
            public int id { get; set; }
            
            /// <summary>
            /// Gets or sets the login.
            /// </summary>
            public string login { get; set; }
        }
        
        /// <summary>
        /// Gets or sets the date.
        /// </summary>
        public DateTime date { get; set; }
        
        /// <summary>
        /// Gets or sets the title.
        /// </summary>
        public string title { get; set; }
        
        /// <summary>
        /// Gets or sets the text.
        /// </summary>
        public string text { get; set; }
        
        /// <summary>
        /// Gets or sets the unread.
        /// </summary>
        public bool unread { get; set; }
        
        /// <summary>
        /// Gets or sets the has_unread.
        /// </summary>
        public bool has_unread { get; set; }
    }
    
    /// <summary>
    /// Response format for 'shows/characters'.
    /// </summary>
    public class ShowCharacter {
    }
    
    /// <summary>
    /// Response format for 'shows/pictures'.
    /// </summary>
    public class ShowPicture {
    }
    
    /// <summary>
    /// Response format for 'subtitles/episode'.
    /// </summary>
    public class SubtitleEpisode {
    }
    
    /// <summary>
    /// Response format for 'subtitles/last'.
    /// </summary>
    public class SubtitleLast {
    }
    
    /// <summary>
    /// Response format for 'subtitles/report'.
    /// </summary>
    public class SubtitleReport {
    }
    
    /// <summary>
    /// Response format for 'subtitles/show'.
    /// </summary>
    public class SubtitleShow {
    }
}

#endregion


#region Services

namespace Srk.BetaseriesApi {

    public partial class BetaseriesClient {

        private BetaseriesCommentsClient commentsClient;
        public BetaseriesCommentsClient Comments {
            get { return this.commentsClient ?? (this.commentsClient = new BetaseriesCommentsClient(this)); }
        }

        private BetaseriesEpisodesClient episodesClient;
        public BetaseriesEpisodesClient Episodes {
            get { return this.episodesClient ?? (this.episodesClient = new BetaseriesEpisodesClient(this)); }
        }

        private BetaseriesFriendsClient friendsClient;
        public BetaseriesFriendsClient Friends {
            get { return this.friendsClient ?? (this.friendsClient = new BetaseriesFriendsClient(this)); }
        }

        private BetaseriesMembersClient membersClient;
        public BetaseriesMembersClient Members {
            get { return this.membersClient ?? (this.membersClient = new BetaseriesMembersClient(this)); }
        }

        private BetaseriesMessagesClient messagesClient;
        public BetaseriesMessagesClient Messages {
            get { return this.messagesClient ?? (this.messagesClient = new BetaseriesMessagesClient(this)); }
        }

        private BetaseriesMoviesClient moviesClient;
        public BetaseriesMoviesClient Movies {
            get { return this.moviesClient ?? (this.moviesClient = new BetaseriesMoviesClient(this)); }
        }

        private BetaseriesPicturesClient picturesClient;
        public BetaseriesPicturesClient Pictures {
            get { return this.picturesClient ?? (this.picturesClient = new BetaseriesPicturesClient(this)); }
        }

        private BetaseriesPlanningClient planningClient;
        public BetaseriesPlanningClient Planning {
            get { return this.planningClient ?? (this.planningClient = new BetaseriesPlanningClient(this)); }
        }

        private BetaseriesShowsClient showsClient;
        public BetaseriesShowsClient Shows {
            get { return this.showsClient ?? (this.showsClient = new BetaseriesShowsClient(this)); }
        }

        private BetaseriesSubtitlesClient subtitlesClient;
        public BetaseriesSubtitlesClient Subtitles {
            get { return this.subtitlesClient ?? (this.subtitlesClient = new BetaseriesSubtitlesClient(this)); }
        }

        private BetaseriesTimelineClient timelineClient;
        public BetaseriesTimelineClient Timeline {
            get { return this.timelineClient ?? (this.timelineClient = new BetaseriesTimelineClient(this)); }
        }
    }

    public partial class BetaseriesCommentsClient {
        private readonly BetaseriesClient client;

        public BetaseriesCommentsClient(BetaseriesClient client) {
            this.client = client;
        }


        /// <summary>
        /// Response for 'comments/comment'.
        /// Envoie un commentaire pour l'élément spécifié.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment CommentComment(string type, string id, string text, string in_reply_to) {
            // call http comments/comment
        }

        /// <summary>
        /// Response for 'comments/comment'.
        /// Supprime un commentaire de l'utilisateur identifié.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment DeleteCommentComment(string id) {
            // call http comments/comment
        }

        /// <summary>
        /// Response for 'comments/comments'.
        /// Récupère les commentaires pour un élément donné.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment CommentComment(string type, string id, string nbpp, string since_id, string order, string replies) {
            // call http comments/comments
        }

        /// <summary>
        /// Response for 'comments/replies'.
        /// Récupère les réponses d'un commentaire donné.
        /// </summary>
        public Srk.BetaseriesApi.CommentReply CommentReply(string id, string order) {
            // call http comments/replies
        }

        /// <summary>
        /// Response for 'comments/subscription'.
        /// Inscrit le membre aux notifications e-mail pour l'élément donné.
        /// </summary>
        public void CommentSubscription(string type, string id) {
            // call http comments/subscription
        }

        /// <summary>
        /// Response for 'comments/subscription'.
        /// Désinscrit le membre aux notifications e-mail pour l'élément donné.
        /// </summary>
        public void DeleteCommentSubscription(string type, string id) {
            // call http comments/subscription
        }

        /// <summary>
        /// Response for 'episodes/display'.
        /// Affiche les informations d'un épisode.
        /// </summary>
        public void EpisodeDisplay(string id, string thetvdb_id, string subtitles) {
            // call http episodes/display
        }

        /// <summary>
        /// Response for 'episodes/downloaded'.
        /// Marque un épisode comme téléchargé.
        /// </summary>
        public void EpisodeDownloaded(string id, string thetvdb_id) {
            // call http episodes/downloaded
        }

        /// <summary>
        /// Response for 'episodes/downloaded'.
        /// Enlève le marquage d'un épisode comme téléchargé.
        /// </summary>
        public void DeleteEpisodeDownloaded(string id, string thetvdb_id) {
            // call http episodes/downloaded
        }

        /// <summary>
        /// Response for 'episodes/list'.
        /// Récupère la liste des épisodes à voir.
        /// </summary>
        public void EpisodeList(string subtitles, string limit, string showId, string userId) {
            // call http episodes/list
        }

        /// <summary>
        /// Response for 'episodes/note'.
        /// Note un épisode.
        /// </summary>
        public void EpisodeNote(string id, string thetvdb_id, string note) {
            // call http episodes/note
        }

        /// <summary>
        /// Response for 'episodes/note'.
        /// Supprime une note d'un épisode.
        /// </summary>
        public void DeleteEpisodeNote(string id, string thetvdb_id) {
            // call http episodes/note
        }

        /// <summary>
        /// Response for 'episodes/scraper'.
        /// Récupère les informations d'un épisode en fonction du nom de fichier
        /// </summary>
        public void EpisodeScraper(string file) {
            // call http episodes/scraper
        }

        /// <summary>
        /// Response for 'episodes/search'.
        /// Récupère les informations d'un épisode en fonction d'informations.
        /// </summary>
        public void EpisodeSearch(string show_id, string number, string subtitles) {
            // call http episodes/search
        }

        /// <summary>
        /// Response for 'episodes/watched'.
        /// Marque un épisode comme vu. Vous pouvez spécifier plusieurs épisodes en séparant les ID par une virgule.
        /// </summary>
        public void EpisodeWatched(string id, string thetvdb_id, string bulk, string delete, string note) {
            // call http episodes/watched
        }

        /// <summary>
        /// Response for 'episodes/watched'.
        /// Enlève le marquage d'un épisode comme vu.
        /// </summary>
        public void DeleteEpisodeWatched(string id, string thetvdb_id) {
            // call http episodes/watched
        }

        /// <summary>
        /// Response for 'friends/block'.
        /// Bloque un utilisateur.
        /// </summary>
        public void FriendBlock(string id) {
            // call http friends/block
        }

        /// <summary>
        /// Response for 'friends/block'.
        /// Supprime le blocage d'un utilisateur.
        /// </summary>
        public void DeleteFriendBlock(string id) {
            // call http friends/block
        }

        /// <summary>
        /// Response for 'friends/friend'.
        /// Ajoute un ami dans le compte de l'utilisateur.
        /// </summary>
        public void FriendFriend(string id) {
            // call http friends/friend
        }

        /// <summary>
        /// Response for 'friends/friend'.
        /// Supprime un ami du compte de l'utilisateur.
        /// </summary>
        public void DeleteFriendFriend(string id) {
            // call http friends/friend
        }

        /// <summary>
        /// Response for 'friends/list'.
        /// Récupère la liste des amis du membre.
        /// </summary>
        public void FriendList(string id, string blocked) {
            // call http friends/list
        }

        /// <summary>
        /// Response for 'friends/requests'.
        /// Récupère la liste des demandes envoyées par l'utilisateur.
        /// </summary>
        public void FriendRequest(string received) {
            // call http friends/requests
        }

        /// <summary>
        /// Response for 'members/access_token'.
        /// Récupère un token d'accès avec le code fourni par l'identification OAuth 2.
        /// </summary>
        public void MemberAccesToken(string client_id, string client_secret, string redirect_uri, string code) {
            // call http members/access_token
        }

        /// <summary>
        /// Response for 'members/auth'.
        /// Identification classique du membre.
        /// </summary>
        public void MemberAuth(string login, string password) {
            // call http members/auth
        }

        /// <summary>
        /// Response for 'members/avatar'.
        /// Uploade et remplace l'avatar de l'utilisateur identifié.
        /// </summary>
        public void MemberAvatar(string avatar) {
            // call http members/avatar
        }

        /// <summary>
        /// Response for 'members/avatar'.
        /// Supprime l'avatar de l'utilisateur identifié.
        /// </summary>
        public void DeleteMemberAvatar() {
            // call http members/avatar
        }

        /// <summary>
        /// Response for 'members/badges'.
        /// Affiche les badges du membre.
        /// </summary>
        public void MemberBadge(string id) {
            // call http members/badges
        }

        /// <summary>
        /// Response for 'members/destroy'.
        /// Détruit le token actif.
        /// </summary>
        public void MemberDestroy() {
            // call http members/destroy
        }

        /// <summary>
        /// Response for 'members/infos'.
        /// Renvoie les informations d'un membre, du membre identifié par défaut.
        /// </summary>
        public void MemberInfo(string id, string summary) {
            // call http members/infos
        }

        /// <summary>
        /// Response for 'members/is_active'.
        /// Vérifie que le token est actif.
        /// </summary>
        public void MemberIActive() {
            // call http members/is_active
        }

        /// <summary>
        /// Response for 'members/lost'.
        /// Envoie un e-mail pour réinitialiser le mot de passe.
        /// </summary>
        public void MemberLost(string find) {
            // call http members/lost
        }

        /// <summary>
        /// Response for 'members/notifications'.
        /// Affiche les dernières notifications du membre. Types : badge, banner, bugs, character, commentaire, dons, episode, facebook, film, forum, friend, message, quizz, recommend, site, subtitles, video.
        /// </summary>
        public void MemberNotification(string since_id, string number, string sort, string types, string auto_delete) {
            // call http members/notifications
        }

        /// <summary>
        /// Response for 'members/oauth'.
        /// Identification par OAuth.
        /// </summary>
        public void MemberOauth() {
            // call http members/oauth
        }

        /// <summary>
        /// Response for 'members/oauth'.
        /// Identification par OAuth. Renvoie l'utilisateur sur l'URL de callback que vous avez spécifiée dans votre compte avec le paramètre GET token.
        /// </summary>
        public void MemberOauth() {
            // call http members/oauth
        }

        /// <summary>
        /// Response for 'members/option'.
        /// Modifie une option de l'utilisateur.
        /// </summary>
        public void MemberOption(string name, string value) {
            // call http members/option
        }

        /// <summary>
        /// Response for 'members/options'.
        /// Récupère les options (sous-titres) du membre.
        /// </summary>
        public void MemberOption() {
            // call http members/options
        }

        /// <summary>
        /// Response for 'members/search'.
        /// Recherche des membres.
        /// </summary>
        public void MemberSearch(string login) {
            // call http members/search
        }

        /// <summary>
        /// Response for 'members/signup'.
        /// Crée un nouveau compte membre sur BetaSeries.
        /// </summary>
        public void MemberSignup(string login, string password, string email) {
            // call http members/signup
        }

        /// <summary>
        /// Response for 'members/sync'.
        /// Cherche les membres parmi les amis du compte.
        /// </summary>
        public void MemberSync(string mails[]) {
            // call http members/sync
        }

        /// <summary>
        /// Response for 'members/username'.
        /// Retourne les possibilités de noms d'utilisateur libres sur BetaSeries.
        /// </summary>
        public void MemberUsername(string username) {
            // call http members/username
        }

        /// <summary>
        /// Response for 'messages/discussion'.
        /// Récupère une discussion identifiée par l'ID du premier message.
        /// </summary>
        public Srk.BetaseriesApi.MessageDiscussion MessageDiscussion(string id) {
            // call http messages/discussion
        }

        /// <summary>
        /// Response for 'messages/inbox'.
        /// Récupère la boîte de réception du membre identifié, par pages de 20.
        /// </summary>
        public Srk.BetaseriesApi.MessageInbox MessageInbox(string page) {
            // call http messages/inbox
        }

        /// <summary>
        /// Response for 'messages/message'.
        /// Supprime un message que vous avez écrit.
        /// </summary>
        public Srk.BetaseriesApi.MessageMessage DeleteMessageMessage(string id) {
            // call http messages/message
        }

        /// <summary>
        /// Response for 'messages/message'.
        /// Envoie un message à un autre membre du site.
        /// </summary>
        public Srk.BetaseriesApi.MessageMessage MessageMessage(string to, string text, string title, string id) {
            // call http messages/message
        }

        /// <summary>
        /// Response for 'messages/read'.
        /// Marque un message comme lu.
        /// </summary>
        public Srk.BetaseriesApi.MessageRead MessageRead(string id) {
            // call http messages/read
        }

        /// <summary>
        /// Response for 'movies/list'.
        /// Affiche la liste de tous les films.
        /// </summary>
        public void MovyList(string start, string limit, string order) {
            // call http movies/list
        }

        /// <summary>
        /// Response for 'movies/member'.
        /// Affiche la liste de tous les films du membre.
        /// </summary>
        public void MovyMember(string state, string start, string limit, string order) {
            // call http movies/member
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Affiche les détails d'un film.
        /// </summary>
        public void MovyMovie(string id) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Ajoute ou met à jour le film dans les films du membre.
        /// </summary>
        public void MovyMovie(string id, string mail, string twitter, string state, string profile) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Supprime un film du compte membre.
        /// </summary>
        public void DeleteMovyMovie(string id) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/random'.
        /// Affiche un film au hasard.
        /// </summary>
        public void MovyRandom(string nb) {
            // call http movies/random
        }

        /// <summary>
        /// Response for 'movies/scraper'.
        /// Récupère les informations d'un film en fonction du nom de fichier
        /// </summary>
        public void MovyScraper(string file) {
            // call http movies/scraper
        }

        /// <summary>
        /// Response for 'movies/search'.
        /// Recherche un film par critères.
        /// </summary>
        public void MovySearch(string title, string order, string nbpp, string page) {
            // call http movies/search
        }

        /// <summary>
        /// Response for 'pictures/badges'.
        /// Retourne une image du badge (32x32).
        /// </summary>
        public void PictureBadge(string id) {
            // call http pictures/badges
        }

        /// <summary>
        /// Response for 'pictures/characters'.
        /// Retourne une image du personnage.
        /// </summary>
        public void PictureCharacter(string id, string width, string height) {
            // call http pictures/characters
        }

        /// <summary>
        /// Response for 'pictures/episodes'.
        /// Retourne une image de l'épisode.
        /// </summary>
        public void PictureEpisode(string id, string width, string height) {
            // call http pictures/episodes
        }

        /// <summary>
        /// Response for 'pictures/members'.
        /// Retourne une image du membre.
        /// </summary>
        public void PictureMember(string id, string width, string height) {
            // call http pictures/members
        }

        /// <summary>
        /// Response for 'pictures/movies'.
        /// Retourne une image du film.
        /// </summary>
        public void PictureMovy(string id, string width, string height) {
            // call http pictures/movies
        }

        /// <summary>
        /// Response for 'pictures/shows'.
        /// Retourne une image de la série.
        /// </summary>
        public void PictureShow(string id, string width, string height, string picked) {
            // call http pictures/shows
        }

        /// <summary>
        /// Response for 'planning/general'.
        /// Affiche tous les épisodes diffusés les 8 derniers jours jusqu'aux 8 prochains jours.
        /// </summary>
        public void PlanningGeneral(string date, string before, string after, string type) {
            // call http planning/general
        }

        /// <summary>
        /// Response for 'planning/incoming'.
        /// Affiche uniquement le premier épisode des prochaines séries qui vont être diffusées.
        /// </summary>
        public void PlanningIncoming() {
            // call http planning/incoming
        }

        /// <summary>
        /// Response for 'planning/member'.
        /// Affiche le planning du membre identifié ou d'un autre membre.
        /// </summary>
        public void PlanningMember(string id, string unseen, string month) {
            // call http planning/member
        }

        /// <summary>
        /// Response for 'shows/archive'.
        /// Archive une série dans le compte du membre.
        /// </summary>
        public void ShowArchive(string id, string thetvdb_id) {
            // call http shows/archive
        }

        /// <summary>
        /// Response for 'shows/archive'.
        /// Sort une série des archives du compte du membre.
        /// </summary>
        public void DeleteShowArchive(string id, string thetvdb_id) {
            // call http shows/archive
        }

        /// <summary>
        /// Response for 'shows/characters'.
        /// Récupère les personnages de la série, ajoutés par les membres de BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.ShowCharacter ShowCharacter(string id, string thetvdb_id) {
            // call http shows/characters
        }

        /// <summary>
        /// Response for 'shows/display'.
        /// Affiche les informations d'une série.
        /// </summary>
        public void ShowDisplay(string id, string thetvdb_id) {
            // call http shows/display
        }

        /// <summary>
        /// Response for 'shows/episodes'.
        /// Affiche les épisodes d'une série.
        /// </summary>
        public void ShowEpisode(string id, string thetvdb_id, string season, string episode, string subtitles) {
            // call http shows/episodes
        }

        /// <summary>
        /// Response for 'shows/favorite'.
        /// Ajoute une série favorite sur le profil du membre identifié.
        /// </summary>
        public void ShowFavorite(string id) {
            // call http shows/favorite
        }

        /// <summary>
        /// Response for 'shows/favorite'.
        /// Supprime une série favorite du profil du membre identifié.
        /// </summary>
        public void DeleteShowFavorite(string id) {
            // call http shows/favorite
        }

        /// <summary>
        /// Response for 'shows/favorites'.
        /// Récupère les séries favorites du membre.
        /// </summary>
        public void ShowFavorite(string id) {
            // call http shows/favorites
        }

        /// <summary>
        /// Response for 'shows/list'.
        /// Affiche la liste de toutes les séries.
        /// </summary>
        public void ShowList(string order, string since) {
            // call http shows/list
        }

        /// <summary>
        /// Response for 'shows/note'.
        /// Note une série.
        /// </summary>
        public void ShowNote(string id, string thetvdb_id, string note) {
            // call http shows/note
        }

        /// <summary>
        /// Response for 'shows/note'.
        /// Supprime une note d'une série.
        /// </summary>
        public void DeleteShowNote(string id, string thetvdb_id) {
            // call http shows/note
        }

        /// <summary>
        /// Response for 'shows/pictures'.
        /// Récupère les images de la série, ajoutées par les membres de BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.ShowPicture ShowPicture(string id, string thetvdb_id) {
            // call http shows/pictures
        }

        /// <summary>
        /// Response for 'shows/random'.
        /// Affiche une série au hasard.
        /// </summary>
        public void ShowRandom(string nb, string summary) {
            // call http shows/random
        }

        /// <summary>
        /// Response for 'shows/recommendation'.
        /// Créer une recommandation d'une série d'un membre pour un ami.
        /// </summary>
        public void ShowRecommendation(string id, string thetvdb_id, string to, string comments) {
            // call http shows/recommendation
        }

        /// <summary>
        /// Response for 'shows/recommendation'.
        /// Supprime une recommandation d'une série envoyée ou reçue.
        /// </summary>
        public void DeleteShowRecommendation(string id) {
            // call http shows/recommendation
        }

        /// <summary>
        /// Response for 'shows/recommendations'.
        /// Récupère les recommandations reçues par l'utilisateur identifié.
        /// </summary>
        public void ShowRecommendation() {
            // call http shows/recommendations
        }

        /// <summary>
        /// Response for 'shows/search'.
        /// Recherche une série.
        /// </summary>
        public void ShowSearch(string title, string summary, string order, string nbpp, string page) {
            // call http shows/search
        }

        /// <summary>
        /// Response for 'shows/show'.
        /// Ajoute une série dans le compte du membre.
        /// </summary>
        public void ShowShow(string id, string thetvdb_id, string episode_id) {
            // call http shows/show
        }

        /// <summary>
        /// Response for 'shows/show'.
        /// Supprime une série du compte du membre.
        /// </summary>
        public void DeleteShowShow(string id, string thetvdb_id) {
            // call http shows/show
        }

        /// <summary>
        /// Response for 'shows/similars'.
        /// Récupère les séries marquées similaires par les membres de BetaSeries.
        /// </summary>
        public void ShowSimilar(string id, string thetvdb_id) {
            // call http shows/similars
        }

        /// <summary>
        /// Response for 'shows/videos'.
        /// Récupère les vidéos associées à la série par les membres de BetaSeries.
        /// </summary>
        public void ShowVideo(string id, string thetvdb_id) {
            // call http shows/videos
        }

        /// <summary>
        /// Response for 'subtitles/episode'.
        /// Affiche les sous-titres pour un épisode donné.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleEpisode SubtitleEpisode(string id, string language) {
            // call http subtitles/episode
        }

        /// <summary>
        /// Response for 'subtitles/last'.
        /// Affiche les derniers sous-titres récupérés par BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleLast SubtitleLast(string number, string language) {
            // call http subtitles/last
        }

        /// <summary>
        /// Response for 'subtitles/report'.
        /// Reporte des sous-titres comme incorrects pour se faire supprimer de la liste.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleReport SubtitleReport(string id, string reason) {
            // call http subtitles/report
        }

        /// <summary>
        /// Response for 'subtitles/show'.
        /// Affiche les sous-titres pour une série donnée.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleShow SubtitleShow(string id, string language) {
            // call http subtitles/show
        }

        /// <summary>
        /// Response for 'timeline/friends'.
        /// Affiche les derniers évènements des amis du membre identifié.
        /// </summary>
        public void TimelineFriend(string nbpp, string since_id, string types) {
            // call http timeline/friends
        }

        /// <summary>
        /// Response for 'timeline/home'.
        /// Affiche les derniers évènements du site.
        /// </summary>
        public void TimelineHome(string nbpp, string since_id, string types) {
            // call http timeline/home
        }

        /// <summary>
        /// Response for 'timeline/member'.
        /// Affiche les derniers évènements du membre spécifié.
        /// </summary>
        public void TimelineMember(string id, string nbpp, string since_id, string types) {
            // call http timeline/member
        }
    }
    public partial class BetaseriesEpisodesClient {
        private readonly BetaseriesClient client;

        public BetaseriesEpisodesClient(BetaseriesClient client) {
            this.client = client;
        }


        /// <summary>
        /// Response for 'comments/comment'.
        /// Envoie un commentaire pour l'élément spécifié.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment CommentComment(string type, string id, string text, string in_reply_to) {
            // call http comments/comment
        }

        /// <summary>
        /// Response for 'comments/comment'.
        /// Supprime un commentaire de l'utilisateur identifié.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment DeleteCommentComment(string id) {
            // call http comments/comment
        }

        /// <summary>
        /// Response for 'comments/comments'.
        /// Récupère les commentaires pour un élément donné.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment CommentComment(string type, string id, string nbpp, string since_id, string order, string replies) {
            // call http comments/comments
        }

        /// <summary>
        /// Response for 'comments/replies'.
        /// Récupère les réponses d'un commentaire donné.
        /// </summary>
        public Srk.BetaseriesApi.CommentReply CommentReply(string id, string order) {
            // call http comments/replies
        }

        /// <summary>
        /// Response for 'comments/subscription'.
        /// Inscrit le membre aux notifications e-mail pour l'élément donné.
        /// </summary>
        public void CommentSubscription(string type, string id) {
            // call http comments/subscription
        }

        /// <summary>
        /// Response for 'comments/subscription'.
        /// Désinscrit le membre aux notifications e-mail pour l'élément donné.
        /// </summary>
        public void DeleteCommentSubscription(string type, string id) {
            // call http comments/subscription
        }

        /// <summary>
        /// Response for 'episodes/display'.
        /// Affiche les informations d'un épisode.
        /// </summary>
        public void EpisodeDisplay(string id, string thetvdb_id, string subtitles) {
            // call http episodes/display
        }

        /// <summary>
        /// Response for 'episodes/downloaded'.
        /// Marque un épisode comme téléchargé.
        /// </summary>
        public void EpisodeDownloaded(string id, string thetvdb_id) {
            // call http episodes/downloaded
        }

        /// <summary>
        /// Response for 'episodes/downloaded'.
        /// Enlève le marquage d'un épisode comme téléchargé.
        /// </summary>
        public void DeleteEpisodeDownloaded(string id, string thetvdb_id) {
            // call http episodes/downloaded
        }

        /// <summary>
        /// Response for 'episodes/list'.
        /// Récupère la liste des épisodes à voir.
        /// </summary>
        public void EpisodeList(string subtitles, string limit, string showId, string userId) {
            // call http episodes/list
        }

        /// <summary>
        /// Response for 'episodes/note'.
        /// Note un épisode.
        /// </summary>
        public void EpisodeNote(string id, string thetvdb_id, string note) {
            // call http episodes/note
        }

        /// <summary>
        /// Response for 'episodes/note'.
        /// Supprime une note d'un épisode.
        /// </summary>
        public void DeleteEpisodeNote(string id, string thetvdb_id) {
            // call http episodes/note
        }

        /// <summary>
        /// Response for 'episodes/scraper'.
        /// Récupère les informations d'un épisode en fonction du nom de fichier
        /// </summary>
        public void EpisodeScraper(string file) {
            // call http episodes/scraper
        }

        /// <summary>
        /// Response for 'episodes/search'.
        /// Récupère les informations d'un épisode en fonction d'informations.
        /// </summary>
        public void EpisodeSearch(string show_id, string number, string subtitles) {
            // call http episodes/search
        }

        /// <summary>
        /// Response for 'episodes/watched'.
        /// Marque un épisode comme vu. Vous pouvez spécifier plusieurs épisodes en séparant les ID par une virgule.
        /// </summary>
        public void EpisodeWatched(string id, string thetvdb_id, string bulk, string delete, string note) {
            // call http episodes/watched
        }

        /// <summary>
        /// Response for 'episodes/watched'.
        /// Enlève le marquage d'un épisode comme vu.
        /// </summary>
        public void DeleteEpisodeWatched(string id, string thetvdb_id) {
            // call http episodes/watched
        }

        /// <summary>
        /// Response for 'friends/block'.
        /// Bloque un utilisateur.
        /// </summary>
        public void FriendBlock(string id) {
            // call http friends/block
        }

        /// <summary>
        /// Response for 'friends/block'.
        /// Supprime le blocage d'un utilisateur.
        /// </summary>
        public void DeleteFriendBlock(string id) {
            // call http friends/block
        }

        /// <summary>
        /// Response for 'friends/friend'.
        /// Ajoute un ami dans le compte de l'utilisateur.
        /// </summary>
        public void FriendFriend(string id) {
            // call http friends/friend
        }

        /// <summary>
        /// Response for 'friends/friend'.
        /// Supprime un ami du compte de l'utilisateur.
        /// </summary>
        public void DeleteFriendFriend(string id) {
            // call http friends/friend
        }

        /// <summary>
        /// Response for 'friends/list'.
        /// Récupère la liste des amis du membre.
        /// </summary>
        public void FriendList(string id, string blocked) {
            // call http friends/list
        }

        /// <summary>
        /// Response for 'friends/requests'.
        /// Récupère la liste des demandes envoyées par l'utilisateur.
        /// </summary>
        public void FriendRequest(string received) {
            // call http friends/requests
        }

        /// <summary>
        /// Response for 'members/access_token'.
        /// Récupère un token d'accès avec le code fourni par l'identification OAuth 2.
        /// </summary>
        public void MemberAccesToken(string client_id, string client_secret, string redirect_uri, string code) {
            // call http members/access_token
        }

        /// <summary>
        /// Response for 'members/auth'.
        /// Identification classique du membre.
        /// </summary>
        public void MemberAuth(string login, string password) {
            // call http members/auth
        }

        /// <summary>
        /// Response for 'members/avatar'.
        /// Uploade et remplace l'avatar de l'utilisateur identifié.
        /// </summary>
        public void MemberAvatar(string avatar) {
            // call http members/avatar
        }

        /// <summary>
        /// Response for 'members/avatar'.
        /// Supprime l'avatar de l'utilisateur identifié.
        /// </summary>
        public void DeleteMemberAvatar() {
            // call http members/avatar
        }

        /// <summary>
        /// Response for 'members/badges'.
        /// Affiche les badges du membre.
        /// </summary>
        public void MemberBadge(string id) {
            // call http members/badges
        }

        /// <summary>
        /// Response for 'members/destroy'.
        /// Détruit le token actif.
        /// </summary>
        public void MemberDestroy() {
            // call http members/destroy
        }

        /// <summary>
        /// Response for 'members/infos'.
        /// Renvoie les informations d'un membre, du membre identifié par défaut.
        /// </summary>
        public void MemberInfo(string id, string summary) {
            // call http members/infos
        }

        /// <summary>
        /// Response for 'members/is_active'.
        /// Vérifie que le token est actif.
        /// </summary>
        public void MemberIActive() {
            // call http members/is_active
        }

        /// <summary>
        /// Response for 'members/lost'.
        /// Envoie un e-mail pour réinitialiser le mot de passe.
        /// </summary>
        public void MemberLost(string find) {
            // call http members/lost
        }

        /// <summary>
        /// Response for 'members/notifications'.
        /// Affiche les dernières notifications du membre. Types : badge, banner, bugs, character, commentaire, dons, episode, facebook, film, forum, friend, message, quizz, recommend, site, subtitles, video.
        /// </summary>
        public void MemberNotification(string since_id, string number, string sort, string types, string auto_delete) {
            // call http members/notifications
        }

        /// <summary>
        /// Response for 'members/oauth'.
        /// Identification par OAuth.
        /// </summary>
        public void MemberOauth() {
            // call http members/oauth
        }

        /// <summary>
        /// Response for 'members/oauth'.
        /// Identification par OAuth. Renvoie l'utilisateur sur l'URL de callback que vous avez spécifiée dans votre compte avec le paramètre GET token.
        /// </summary>
        public void MemberOauth() {
            // call http members/oauth
        }

        /// <summary>
        /// Response for 'members/option'.
        /// Modifie une option de l'utilisateur.
        /// </summary>
        public void MemberOption(string name, string value) {
            // call http members/option
        }

        /// <summary>
        /// Response for 'members/options'.
        /// Récupère les options (sous-titres) du membre.
        /// </summary>
        public void MemberOption() {
            // call http members/options
        }

        /// <summary>
        /// Response for 'members/search'.
        /// Recherche des membres.
        /// </summary>
        public void MemberSearch(string login) {
            // call http members/search
        }

        /// <summary>
        /// Response for 'members/signup'.
        /// Crée un nouveau compte membre sur BetaSeries.
        /// </summary>
        public void MemberSignup(string login, string password, string email) {
            // call http members/signup
        }

        /// <summary>
        /// Response for 'members/sync'.
        /// Cherche les membres parmi les amis du compte.
        /// </summary>
        public void MemberSync(string mails[]) {
            // call http members/sync
        }

        /// <summary>
        /// Response for 'members/username'.
        /// Retourne les possibilités de noms d'utilisateur libres sur BetaSeries.
        /// </summary>
        public void MemberUsername(string username) {
            // call http members/username
        }

        /// <summary>
        /// Response for 'messages/discussion'.
        /// Récupère une discussion identifiée par l'ID du premier message.
        /// </summary>
        public Srk.BetaseriesApi.MessageDiscussion MessageDiscussion(string id) {
            // call http messages/discussion
        }

        /// <summary>
        /// Response for 'messages/inbox'.
        /// Récupère la boîte de réception du membre identifié, par pages de 20.
        /// </summary>
        public Srk.BetaseriesApi.MessageInbox MessageInbox(string page) {
            // call http messages/inbox
        }

        /// <summary>
        /// Response for 'messages/message'.
        /// Supprime un message que vous avez écrit.
        /// </summary>
        public Srk.BetaseriesApi.MessageMessage DeleteMessageMessage(string id) {
            // call http messages/message
        }

        /// <summary>
        /// Response for 'messages/message'.
        /// Envoie un message à un autre membre du site.
        /// </summary>
        public Srk.BetaseriesApi.MessageMessage MessageMessage(string to, string text, string title, string id) {
            // call http messages/message
        }

        /// <summary>
        /// Response for 'messages/read'.
        /// Marque un message comme lu.
        /// </summary>
        public Srk.BetaseriesApi.MessageRead MessageRead(string id) {
            // call http messages/read
        }

        /// <summary>
        /// Response for 'movies/list'.
        /// Affiche la liste de tous les films.
        /// </summary>
        public void MovyList(string start, string limit, string order) {
            // call http movies/list
        }

        /// <summary>
        /// Response for 'movies/member'.
        /// Affiche la liste de tous les films du membre.
        /// </summary>
        public void MovyMember(string state, string start, string limit, string order) {
            // call http movies/member
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Affiche les détails d'un film.
        /// </summary>
        public void MovyMovie(string id) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Ajoute ou met à jour le film dans les films du membre.
        /// </summary>
        public void MovyMovie(string id, string mail, string twitter, string state, string profile) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Supprime un film du compte membre.
        /// </summary>
        public void DeleteMovyMovie(string id) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/random'.
        /// Affiche un film au hasard.
        /// </summary>
        public void MovyRandom(string nb) {
            // call http movies/random
        }

        /// <summary>
        /// Response for 'movies/scraper'.
        /// Récupère les informations d'un film en fonction du nom de fichier
        /// </summary>
        public void MovyScraper(string file) {
            // call http movies/scraper
        }

        /// <summary>
        /// Response for 'movies/search'.
        /// Recherche un film par critères.
        /// </summary>
        public void MovySearch(string title, string order, string nbpp, string page) {
            // call http movies/search
        }

        /// <summary>
        /// Response for 'pictures/badges'.
        /// Retourne une image du badge (32x32).
        /// </summary>
        public void PictureBadge(string id) {
            // call http pictures/badges
        }

        /// <summary>
        /// Response for 'pictures/characters'.
        /// Retourne une image du personnage.
        /// </summary>
        public void PictureCharacter(string id, string width, string height) {
            // call http pictures/characters
        }

        /// <summary>
        /// Response for 'pictures/episodes'.
        /// Retourne une image de l'épisode.
        /// </summary>
        public void PictureEpisode(string id, string width, string height) {
            // call http pictures/episodes
        }

        /// <summary>
        /// Response for 'pictures/members'.
        /// Retourne une image du membre.
        /// </summary>
        public void PictureMember(string id, string width, string height) {
            // call http pictures/members
        }

        /// <summary>
        /// Response for 'pictures/movies'.
        /// Retourne une image du film.
        /// </summary>
        public void PictureMovy(string id, string width, string height) {
            // call http pictures/movies
        }

        /// <summary>
        /// Response for 'pictures/shows'.
        /// Retourne une image de la série.
        /// </summary>
        public void PictureShow(string id, string width, string height, string picked) {
            // call http pictures/shows
        }

        /// <summary>
        /// Response for 'planning/general'.
        /// Affiche tous les épisodes diffusés les 8 derniers jours jusqu'aux 8 prochains jours.
        /// </summary>
        public void PlanningGeneral(string date, string before, string after, string type) {
            // call http planning/general
        }

        /// <summary>
        /// Response for 'planning/incoming'.
        /// Affiche uniquement le premier épisode des prochaines séries qui vont être diffusées.
        /// </summary>
        public void PlanningIncoming() {
            // call http planning/incoming
        }

        /// <summary>
        /// Response for 'planning/member'.
        /// Affiche le planning du membre identifié ou d'un autre membre.
        /// </summary>
        public void PlanningMember(string id, string unseen, string month) {
            // call http planning/member
        }

        /// <summary>
        /// Response for 'shows/archive'.
        /// Archive une série dans le compte du membre.
        /// </summary>
        public void ShowArchive(string id, string thetvdb_id) {
            // call http shows/archive
        }

        /// <summary>
        /// Response for 'shows/archive'.
        /// Sort une série des archives du compte du membre.
        /// </summary>
        public void DeleteShowArchive(string id, string thetvdb_id) {
            // call http shows/archive
        }

        /// <summary>
        /// Response for 'shows/characters'.
        /// Récupère les personnages de la série, ajoutés par les membres de BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.ShowCharacter ShowCharacter(string id, string thetvdb_id) {
            // call http shows/characters
        }

        /// <summary>
        /// Response for 'shows/display'.
        /// Affiche les informations d'une série.
        /// </summary>
        public void ShowDisplay(string id, string thetvdb_id) {
            // call http shows/display
        }

        /// <summary>
        /// Response for 'shows/episodes'.
        /// Affiche les épisodes d'une série.
        /// </summary>
        public void ShowEpisode(string id, string thetvdb_id, string season, string episode, string subtitles) {
            // call http shows/episodes
        }

        /// <summary>
        /// Response for 'shows/favorite'.
        /// Ajoute une série favorite sur le profil du membre identifié.
        /// </summary>
        public void ShowFavorite(string id) {
            // call http shows/favorite
        }

        /// <summary>
        /// Response for 'shows/favorite'.
        /// Supprime une série favorite du profil du membre identifié.
        /// </summary>
        public void DeleteShowFavorite(string id) {
            // call http shows/favorite
        }

        /// <summary>
        /// Response for 'shows/favorites'.
        /// Récupère les séries favorites du membre.
        /// </summary>
        public void ShowFavorite(string id) {
            // call http shows/favorites
        }

        /// <summary>
        /// Response for 'shows/list'.
        /// Affiche la liste de toutes les séries.
        /// </summary>
        public void ShowList(string order, string since) {
            // call http shows/list
        }

        /// <summary>
        /// Response for 'shows/note'.
        /// Note une série.
        /// </summary>
        public void ShowNote(string id, string thetvdb_id, string note) {
            // call http shows/note
        }

        /// <summary>
        /// Response for 'shows/note'.
        /// Supprime une note d'une série.
        /// </summary>
        public void DeleteShowNote(string id, string thetvdb_id) {
            // call http shows/note
        }

        /// <summary>
        /// Response for 'shows/pictures'.
        /// Récupère les images de la série, ajoutées par les membres de BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.ShowPicture ShowPicture(string id, string thetvdb_id) {
            // call http shows/pictures
        }

        /// <summary>
        /// Response for 'shows/random'.
        /// Affiche une série au hasard.
        /// </summary>
        public void ShowRandom(string nb, string summary) {
            // call http shows/random
        }

        /// <summary>
        /// Response for 'shows/recommendation'.
        /// Créer une recommandation d'une série d'un membre pour un ami.
        /// </summary>
        public void ShowRecommendation(string id, string thetvdb_id, string to, string comments) {
            // call http shows/recommendation
        }

        /// <summary>
        /// Response for 'shows/recommendation'.
        /// Supprime une recommandation d'une série envoyée ou reçue.
        /// </summary>
        public void DeleteShowRecommendation(string id) {
            // call http shows/recommendation
        }

        /// <summary>
        /// Response for 'shows/recommendations'.
        /// Récupère les recommandations reçues par l'utilisateur identifié.
        /// </summary>
        public void ShowRecommendation() {
            // call http shows/recommendations
        }

        /// <summary>
        /// Response for 'shows/search'.
        /// Recherche une série.
        /// </summary>
        public void ShowSearch(string title, string summary, string order, string nbpp, string page) {
            // call http shows/search
        }

        /// <summary>
        /// Response for 'shows/show'.
        /// Ajoute une série dans le compte du membre.
        /// </summary>
        public void ShowShow(string id, string thetvdb_id, string episode_id) {
            // call http shows/show
        }

        /// <summary>
        /// Response for 'shows/show'.
        /// Supprime une série du compte du membre.
        /// </summary>
        public void DeleteShowShow(string id, string thetvdb_id) {
            // call http shows/show
        }

        /// <summary>
        /// Response for 'shows/similars'.
        /// Récupère les séries marquées similaires par les membres de BetaSeries.
        /// </summary>
        public void ShowSimilar(string id, string thetvdb_id) {
            // call http shows/similars
        }

        /// <summary>
        /// Response for 'shows/videos'.
        /// Récupère les vidéos associées à la série par les membres de BetaSeries.
        /// </summary>
        public void ShowVideo(string id, string thetvdb_id) {
            // call http shows/videos
        }

        /// <summary>
        /// Response for 'subtitles/episode'.
        /// Affiche les sous-titres pour un épisode donné.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleEpisode SubtitleEpisode(string id, string language) {
            // call http subtitles/episode
        }

        /// <summary>
        /// Response for 'subtitles/last'.
        /// Affiche les derniers sous-titres récupérés par BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleLast SubtitleLast(string number, string language) {
            // call http subtitles/last
        }

        /// <summary>
        /// Response for 'subtitles/report'.
        /// Reporte des sous-titres comme incorrects pour se faire supprimer de la liste.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleReport SubtitleReport(string id, string reason) {
            // call http subtitles/report
        }

        /// <summary>
        /// Response for 'subtitles/show'.
        /// Affiche les sous-titres pour une série donnée.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleShow SubtitleShow(string id, string language) {
            // call http subtitles/show
        }

        /// <summary>
        /// Response for 'timeline/friends'.
        /// Affiche les derniers évènements des amis du membre identifié.
        /// </summary>
        public void TimelineFriend(string nbpp, string since_id, string types) {
            // call http timeline/friends
        }

        /// <summary>
        /// Response for 'timeline/home'.
        /// Affiche les derniers évènements du site.
        /// </summary>
        public void TimelineHome(string nbpp, string since_id, string types) {
            // call http timeline/home
        }

        /// <summary>
        /// Response for 'timeline/member'.
        /// Affiche les derniers évènements du membre spécifié.
        /// </summary>
        public void TimelineMember(string id, string nbpp, string since_id, string types) {
            // call http timeline/member
        }
    }
    public partial class BetaseriesFriendsClient {
        private readonly BetaseriesClient client;

        public BetaseriesFriendsClient(BetaseriesClient client) {
            this.client = client;
        }


        /// <summary>
        /// Response for 'comments/comment'.
        /// Envoie un commentaire pour l'élément spécifié.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment CommentComment(string type, string id, string text, string in_reply_to) {
            // call http comments/comment
        }

        /// <summary>
        /// Response for 'comments/comment'.
        /// Supprime un commentaire de l'utilisateur identifié.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment DeleteCommentComment(string id) {
            // call http comments/comment
        }

        /// <summary>
        /// Response for 'comments/comments'.
        /// Récupère les commentaires pour un élément donné.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment CommentComment(string type, string id, string nbpp, string since_id, string order, string replies) {
            // call http comments/comments
        }

        /// <summary>
        /// Response for 'comments/replies'.
        /// Récupère les réponses d'un commentaire donné.
        /// </summary>
        public Srk.BetaseriesApi.CommentReply CommentReply(string id, string order) {
            // call http comments/replies
        }

        /// <summary>
        /// Response for 'comments/subscription'.
        /// Inscrit le membre aux notifications e-mail pour l'élément donné.
        /// </summary>
        public void CommentSubscription(string type, string id) {
            // call http comments/subscription
        }

        /// <summary>
        /// Response for 'comments/subscription'.
        /// Désinscrit le membre aux notifications e-mail pour l'élément donné.
        /// </summary>
        public void DeleteCommentSubscription(string type, string id) {
            // call http comments/subscription
        }

        /// <summary>
        /// Response for 'episodes/display'.
        /// Affiche les informations d'un épisode.
        /// </summary>
        public void EpisodeDisplay(string id, string thetvdb_id, string subtitles) {
            // call http episodes/display
        }

        /// <summary>
        /// Response for 'episodes/downloaded'.
        /// Marque un épisode comme téléchargé.
        /// </summary>
        public void EpisodeDownloaded(string id, string thetvdb_id) {
            // call http episodes/downloaded
        }

        /// <summary>
        /// Response for 'episodes/downloaded'.
        /// Enlève le marquage d'un épisode comme téléchargé.
        /// </summary>
        public void DeleteEpisodeDownloaded(string id, string thetvdb_id) {
            // call http episodes/downloaded
        }

        /// <summary>
        /// Response for 'episodes/list'.
        /// Récupère la liste des épisodes à voir.
        /// </summary>
        public void EpisodeList(string subtitles, string limit, string showId, string userId) {
            // call http episodes/list
        }

        /// <summary>
        /// Response for 'episodes/note'.
        /// Note un épisode.
        /// </summary>
        public void EpisodeNote(string id, string thetvdb_id, string note) {
            // call http episodes/note
        }

        /// <summary>
        /// Response for 'episodes/note'.
        /// Supprime une note d'un épisode.
        /// </summary>
        public void DeleteEpisodeNote(string id, string thetvdb_id) {
            // call http episodes/note
        }

        /// <summary>
        /// Response for 'episodes/scraper'.
        /// Récupère les informations d'un épisode en fonction du nom de fichier
        /// </summary>
        public void EpisodeScraper(string file) {
            // call http episodes/scraper
        }

        /// <summary>
        /// Response for 'episodes/search'.
        /// Récupère les informations d'un épisode en fonction d'informations.
        /// </summary>
        public void EpisodeSearch(string show_id, string number, string subtitles) {
            // call http episodes/search
        }

        /// <summary>
        /// Response for 'episodes/watched'.
        /// Marque un épisode comme vu. Vous pouvez spécifier plusieurs épisodes en séparant les ID par une virgule.
        /// </summary>
        public void EpisodeWatched(string id, string thetvdb_id, string bulk, string delete, string note) {
            // call http episodes/watched
        }

        /// <summary>
        /// Response for 'episodes/watched'.
        /// Enlève le marquage d'un épisode comme vu.
        /// </summary>
        public void DeleteEpisodeWatched(string id, string thetvdb_id) {
            // call http episodes/watched
        }

        /// <summary>
        /// Response for 'friends/block'.
        /// Bloque un utilisateur.
        /// </summary>
        public void FriendBlock(string id) {
            // call http friends/block
        }

        /// <summary>
        /// Response for 'friends/block'.
        /// Supprime le blocage d'un utilisateur.
        /// </summary>
        public void DeleteFriendBlock(string id) {
            // call http friends/block
        }

        /// <summary>
        /// Response for 'friends/friend'.
        /// Ajoute un ami dans le compte de l'utilisateur.
        /// </summary>
        public void FriendFriend(string id) {
            // call http friends/friend
        }

        /// <summary>
        /// Response for 'friends/friend'.
        /// Supprime un ami du compte de l'utilisateur.
        /// </summary>
        public void DeleteFriendFriend(string id) {
            // call http friends/friend
        }

        /// <summary>
        /// Response for 'friends/list'.
        /// Récupère la liste des amis du membre.
        /// </summary>
        public void FriendList(string id, string blocked) {
            // call http friends/list
        }

        /// <summary>
        /// Response for 'friends/requests'.
        /// Récupère la liste des demandes envoyées par l'utilisateur.
        /// </summary>
        public void FriendRequest(string received) {
            // call http friends/requests
        }

        /// <summary>
        /// Response for 'members/access_token'.
        /// Récupère un token d'accès avec le code fourni par l'identification OAuth 2.
        /// </summary>
        public void MemberAccesToken(string client_id, string client_secret, string redirect_uri, string code) {
            // call http members/access_token
        }

        /// <summary>
        /// Response for 'members/auth'.
        /// Identification classique du membre.
        /// </summary>
        public void MemberAuth(string login, string password) {
            // call http members/auth
        }

        /// <summary>
        /// Response for 'members/avatar'.
        /// Uploade et remplace l'avatar de l'utilisateur identifié.
        /// </summary>
        public void MemberAvatar(string avatar) {
            // call http members/avatar
        }

        /// <summary>
        /// Response for 'members/avatar'.
        /// Supprime l'avatar de l'utilisateur identifié.
        /// </summary>
        public void DeleteMemberAvatar() {
            // call http members/avatar
        }

        /// <summary>
        /// Response for 'members/badges'.
        /// Affiche les badges du membre.
        /// </summary>
        public void MemberBadge(string id) {
            // call http members/badges
        }

        /// <summary>
        /// Response for 'members/destroy'.
        /// Détruit le token actif.
        /// </summary>
        public void MemberDestroy() {
            // call http members/destroy
        }

        /// <summary>
        /// Response for 'members/infos'.
        /// Renvoie les informations d'un membre, du membre identifié par défaut.
        /// </summary>
        public void MemberInfo(string id, string summary) {
            // call http members/infos
        }

        /// <summary>
        /// Response for 'members/is_active'.
        /// Vérifie que le token est actif.
        /// </summary>
        public void MemberIActive() {
            // call http members/is_active
        }

        /// <summary>
        /// Response for 'members/lost'.
        /// Envoie un e-mail pour réinitialiser le mot de passe.
        /// </summary>
        public void MemberLost(string find) {
            // call http members/lost
        }

        /// <summary>
        /// Response for 'members/notifications'.
        /// Affiche les dernières notifications du membre. Types : badge, banner, bugs, character, commentaire, dons, episode, facebook, film, forum, friend, message, quizz, recommend, site, subtitles, video.
        /// </summary>
        public void MemberNotification(string since_id, string number, string sort, string types, string auto_delete) {
            // call http members/notifications
        }

        /// <summary>
        /// Response for 'members/oauth'.
        /// Identification par OAuth.
        /// </summary>
        public void MemberOauth() {
            // call http members/oauth
        }

        /// <summary>
        /// Response for 'members/oauth'.
        /// Identification par OAuth. Renvoie l'utilisateur sur l'URL de callback que vous avez spécifiée dans votre compte avec le paramètre GET token.
        /// </summary>
        public void MemberOauth() {
            // call http members/oauth
        }

        /// <summary>
        /// Response for 'members/option'.
        /// Modifie une option de l'utilisateur.
        /// </summary>
        public void MemberOption(string name, string value) {
            // call http members/option
        }

        /// <summary>
        /// Response for 'members/options'.
        /// Récupère les options (sous-titres) du membre.
        /// </summary>
        public void MemberOption() {
            // call http members/options
        }

        /// <summary>
        /// Response for 'members/search'.
        /// Recherche des membres.
        /// </summary>
        public void MemberSearch(string login) {
            // call http members/search
        }

        /// <summary>
        /// Response for 'members/signup'.
        /// Crée un nouveau compte membre sur BetaSeries.
        /// </summary>
        public void MemberSignup(string login, string password, string email) {
            // call http members/signup
        }

        /// <summary>
        /// Response for 'members/sync'.
        /// Cherche les membres parmi les amis du compte.
        /// </summary>
        public void MemberSync(string mails[]) {
            // call http members/sync
        }

        /// <summary>
        /// Response for 'members/username'.
        /// Retourne les possibilités de noms d'utilisateur libres sur BetaSeries.
        /// </summary>
        public void MemberUsername(string username) {
            // call http members/username
        }

        /// <summary>
        /// Response for 'messages/discussion'.
        /// Récupère une discussion identifiée par l'ID du premier message.
        /// </summary>
        public Srk.BetaseriesApi.MessageDiscussion MessageDiscussion(string id) {
            // call http messages/discussion
        }

        /// <summary>
        /// Response for 'messages/inbox'.
        /// Récupère la boîte de réception du membre identifié, par pages de 20.
        /// </summary>
        public Srk.BetaseriesApi.MessageInbox MessageInbox(string page) {
            // call http messages/inbox
        }

        /// <summary>
        /// Response for 'messages/message'.
        /// Supprime un message que vous avez écrit.
        /// </summary>
        public Srk.BetaseriesApi.MessageMessage DeleteMessageMessage(string id) {
            // call http messages/message
        }

        /// <summary>
        /// Response for 'messages/message'.
        /// Envoie un message à un autre membre du site.
        /// </summary>
        public Srk.BetaseriesApi.MessageMessage MessageMessage(string to, string text, string title, string id) {
            // call http messages/message
        }

        /// <summary>
        /// Response for 'messages/read'.
        /// Marque un message comme lu.
        /// </summary>
        public Srk.BetaseriesApi.MessageRead MessageRead(string id) {
            // call http messages/read
        }

        /// <summary>
        /// Response for 'movies/list'.
        /// Affiche la liste de tous les films.
        /// </summary>
        public void MovyList(string start, string limit, string order) {
            // call http movies/list
        }

        /// <summary>
        /// Response for 'movies/member'.
        /// Affiche la liste de tous les films du membre.
        /// </summary>
        public void MovyMember(string state, string start, string limit, string order) {
            // call http movies/member
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Affiche les détails d'un film.
        /// </summary>
        public void MovyMovie(string id) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Ajoute ou met à jour le film dans les films du membre.
        /// </summary>
        public void MovyMovie(string id, string mail, string twitter, string state, string profile) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Supprime un film du compte membre.
        /// </summary>
        public void DeleteMovyMovie(string id) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/random'.
        /// Affiche un film au hasard.
        /// </summary>
        public void MovyRandom(string nb) {
            // call http movies/random
        }

        /// <summary>
        /// Response for 'movies/scraper'.
        /// Récupère les informations d'un film en fonction du nom de fichier
        /// </summary>
        public void MovyScraper(string file) {
            // call http movies/scraper
        }

        /// <summary>
        /// Response for 'movies/search'.
        /// Recherche un film par critères.
        /// </summary>
        public void MovySearch(string title, string order, string nbpp, string page) {
            // call http movies/search
        }

        /// <summary>
        /// Response for 'pictures/badges'.
        /// Retourne une image du badge (32x32).
        /// </summary>
        public void PictureBadge(string id) {
            // call http pictures/badges
        }

        /// <summary>
        /// Response for 'pictures/characters'.
        /// Retourne une image du personnage.
        /// </summary>
        public void PictureCharacter(string id, string width, string height) {
            // call http pictures/characters
        }

        /// <summary>
        /// Response for 'pictures/episodes'.
        /// Retourne une image de l'épisode.
        /// </summary>
        public void PictureEpisode(string id, string width, string height) {
            // call http pictures/episodes
        }

        /// <summary>
        /// Response for 'pictures/members'.
        /// Retourne une image du membre.
        /// </summary>
        public void PictureMember(string id, string width, string height) {
            // call http pictures/members
        }

        /// <summary>
        /// Response for 'pictures/movies'.
        /// Retourne une image du film.
        /// </summary>
        public void PictureMovy(string id, string width, string height) {
            // call http pictures/movies
        }

        /// <summary>
        /// Response for 'pictures/shows'.
        /// Retourne une image de la série.
        /// </summary>
        public void PictureShow(string id, string width, string height, string picked) {
            // call http pictures/shows
        }

        /// <summary>
        /// Response for 'planning/general'.
        /// Affiche tous les épisodes diffusés les 8 derniers jours jusqu'aux 8 prochains jours.
        /// </summary>
        public void PlanningGeneral(string date, string before, string after, string type) {
            // call http planning/general
        }

        /// <summary>
        /// Response for 'planning/incoming'.
        /// Affiche uniquement le premier épisode des prochaines séries qui vont être diffusées.
        /// </summary>
        public void PlanningIncoming() {
            // call http planning/incoming
        }

        /// <summary>
        /// Response for 'planning/member'.
        /// Affiche le planning du membre identifié ou d'un autre membre.
        /// </summary>
        public void PlanningMember(string id, string unseen, string month) {
            // call http planning/member
        }

        /// <summary>
        /// Response for 'shows/archive'.
        /// Archive une série dans le compte du membre.
        /// </summary>
        public void ShowArchive(string id, string thetvdb_id) {
            // call http shows/archive
        }

        /// <summary>
        /// Response for 'shows/archive'.
        /// Sort une série des archives du compte du membre.
        /// </summary>
        public void DeleteShowArchive(string id, string thetvdb_id) {
            // call http shows/archive
        }

        /// <summary>
        /// Response for 'shows/characters'.
        /// Récupère les personnages de la série, ajoutés par les membres de BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.ShowCharacter ShowCharacter(string id, string thetvdb_id) {
            // call http shows/characters
        }

        /// <summary>
        /// Response for 'shows/display'.
        /// Affiche les informations d'une série.
        /// </summary>
        public void ShowDisplay(string id, string thetvdb_id) {
            // call http shows/display
        }

        /// <summary>
        /// Response for 'shows/episodes'.
        /// Affiche les épisodes d'une série.
        /// </summary>
        public void ShowEpisode(string id, string thetvdb_id, string season, string episode, string subtitles) {
            // call http shows/episodes
        }

        /// <summary>
        /// Response for 'shows/favorite'.
        /// Ajoute une série favorite sur le profil du membre identifié.
        /// </summary>
        public void ShowFavorite(string id) {
            // call http shows/favorite
        }

        /// <summary>
        /// Response for 'shows/favorite'.
        /// Supprime une série favorite du profil du membre identifié.
        /// </summary>
        public void DeleteShowFavorite(string id) {
            // call http shows/favorite
        }

        /// <summary>
        /// Response for 'shows/favorites'.
        /// Récupère les séries favorites du membre.
        /// </summary>
        public void ShowFavorite(string id) {
            // call http shows/favorites
        }

        /// <summary>
        /// Response for 'shows/list'.
        /// Affiche la liste de toutes les séries.
        /// </summary>
        public void ShowList(string order, string since) {
            // call http shows/list
        }

        /// <summary>
        /// Response for 'shows/note'.
        /// Note une série.
        /// </summary>
        public void ShowNote(string id, string thetvdb_id, string note) {
            // call http shows/note
        }

        /// <summary>
        /// Response for 'shows/note'.
        /// Supprime une note d'une série.
        /// </summary>
        public void DeleteShowNote(string id, string thetvdb_id) {
            // call http shows/note
        }

        /// <summary>
        /// Response for 'shows/pictures'.
        /// Récupère les images de la série, ajoutées par les membres de BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.ShowPicture ShowPicture(string id, string thetvdb_id) {
            // call http shows/pictures
        }

        /// <summary>
        /// Response for 'shows/random'.
        /// Affiche une série au hasard.
        /// </summary>
        public void ShowRandom(string nb, string summary) {
            // call http shows/random
        }

        /// <summary>
        /// Response for 'shows/recommendation'.
        /// Créer une recommandation d'une série d'un membre pour un ami.
        /// </summary>
        public void ShowRecommendation(string id, string thetvdb_id, string to, string comments) {
            // call http shows/recommendation
        }

        /// <summary>
        /// Response for 'shows/recommendation'.
        /// Supprime une recommandation d'une série envoyée ou reçue.
        /// </summary>
        public void DeleteShowRecommendation(string id) {
            // call http shows/recommendation
        }

        /// <summary>
        /// Response for 'shows/recommendations'.
        /// Récupère les recommandations reçues par l'utilisateur identifié.
        /// </summary>
        public void ShowRecommendation() {
            // call http shows/recommendations
        }

        /// <summary>
        /// Response for 'shows/search'.
        /// Recherche une série.
        /// </summary>
        public void ShowSearch(string title, string summary, string order, string nbpp, string page) {
            // call http shows/search
        }

        /// <summary>
        /// Response for 'shows/show'.
        /// Ajoute une série dans le compte du membre.
        /// </summary>
        public void ShowShow(string id, string thetvdb_id, string episode_id) {
            // call http shows/show
        }

        /// <summary>
        /// Response for 'shows/show'.
        /// Supprime une série du compte du membre.
        /// </summary>
        public void DeleteShowShow(string id, string thetvdb_id) {
            // call http shows/show
        }

        /// <summary>
        /// Response for 'shows/similars'.
        /// Récupère les séries marquées similaires par les membres de BetaSeries.
        /// </summary>
        public void ShowSimilar(string id, string thetvdb_id) {
            // call http shows/similars
        }

        /// <summary>
        /// Response for 'shows/videos'.
        /// Récupère les vidéos associées à la série par les membres de BetaSeries.
        /// </summary>
        public void ShowVideo(string id, string thetvdb_id) {
            // call http shows/videos
        }

        /// <summary>
        /// Response for 'subtitles/episode'.
        /// Affiche les sous-titres pour un épisode donné.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleEpisode SubtitleEpisode(string id, string language) {
            // call http subtitles/episode
        }

        /// <summary>
        /// Response for 'subtitles/last'.
        /// Affiche les derniers sous-titres récupérés par BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleLast SubtitleLast(string number, string language) {
            // call http subtitles/last
        }

        /// <summary>
        /// Response for 'subtitles/report'.
        /// Reporte des sous-titres comme incorrects pour se faire supprimer de la liste.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleReport SubtitleReport(string id, string reason) {
            // call http subtitles/report
        }

        /// <summary>
        /// Response for 'subtitles/show'.
        /// Affiche les sous-titres pour une série donnée.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleShow SubtitleShow(string id, string language) {
            // call http subtitles/show
        }

        /// <summary>
        /// Response for 'timeline/friends'.
        /// Affiche les derniers évènements des amis du membre identifié.
        /// </summary>
        public void TimelineFriend(string nbpp, string since_id, string types) {
            // call http timeline/friends
        }

        /// <summary>
        /// Response for 'timeline/home'.
        /// Affiche les derniers évènements du site.
        /// </summary>
        public void TimelineHome(string nbpp, string since_id, string types) {
            // call http timeline/home
        }

        /// <summary>
        /// Response for 'timeline/member'.
        /// Affiche les derniers évènements du membre spécifié.
        /// </summary>
        public void TimelineMember(string id, string nbpp, string since_id, string types) {
            // call http timeline/member
        }
    }
    public partial class BetaseriesMembersClient {
        private readonly BetaseriesClient client;

        public BetaseriesMembersClient(BetaseriesClient client) {
            this.client = client;
        }


        /// <summary>
        /// Response for 'comments/comment'.
        /// Envoie un commentaire pour l'élément spécifié.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment CommentComment(string type, string id, string text, string in_reply_to) {
            // call http comments/comment
        }

        /// <summary>
        /// Response for 'comments/comment'.
        /// Supprime un commentaire de l'utilisateur identifié.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment DeleteCommentComment(string id) {
            // call http comments/comment
        }

        /// <summary>
        /// Response for 'comments/comments'.
        /// Récupère les commentaires pour un élément donné.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment CommentComment(string type, string id, string nbpp, string since_id, string order, string replies) {
            // call http comments/comments
        }

        /// <summary>
        /// Response for 'comments/replies'.
        /// Récupère les réponses d'un commentaire donné.
        /// </summary>
        public Srk.BetaseriesApi.CommentReply CommentReply(string id, string order) {
            // call http comments/replies
        }

        /// <summary>
        /// Response for 'comments/subscription'.
        /// Inscrit le membre aux notifications e-mail pour l'élément donné.
        /// </summary>
        public void CommentSubscription(string type, string id) {
            // call http comments/subscription
        }

        /// <summary>
        /// Response for 'comments/subscription'.
        /// Désinscrit le membre aux notifications e-mail pour l'élément donné.
        /// </summary>
        public void DeleteCommentSubscription(string type, string id) {
            // call http comments/subscription
        }

        /// <summary>
        /// Response for 'episodes/display'.
        /// Affiche les informations d'un épisode.
        /// </summary>
        public void EpisodeDisplay(string id, string thetvdb_id, string subtitles) {
            // call http episodes/display
        }

        /// <summary>
        /// Response for 'episodes/downloaded'.
        /// Marque un épisode comme téléchargé.
        /// </summary>
        public void EpisodeDownloaded(string id, string thetvdb_id) {
            // call http episodes/downloaded
        }

        /// <summary>
        /// Response for 'episodes/downloaded'.
        /// Enlève le marquage d'un épisode comme téléchargé.
        /// </summary>
        public void DeleteEpisodeDownloaded(string id, string thetvdb_id) {
            // call http episodes/downloaded
        }

        /// <summary>
        /// Response for 'episodes/list'.
        /// Récupère la liste des épisodes à voir.
        /// </summary>
        public void EpisodeList(string subtitles, string limit, string showId, string userId) {
            // call http episodes/list
        }

        /// <summary>
        /// Response for 'episodes/note'.
        /// Note un épisode.
        /// </summary>
        public void EpisodeNote(string id, string thetvdb_id, string note) {
            // call http episodes/note
        }

        /// <summary>
        /// Response for 'episodes/note'.
        /// Supprime une note d'un épisode.
        /// </summary>
        public void DeleteEpisodeNote(string id, string thetvdb_id) {
            // call http episodes/note
        }

        /// <summary>
        /// Response for 'episodes/scraper'.
        /// Récupère les informations d'un épisode en fonction du nom de fichier
        /// </summary>
        public void EpisodeScraper(string file) {
            // call http episodes/scraper
        }

        /// <summary>
        /// Response for 'episodes/search'.
        /// Récupère les informations d'un épisode en fonction d'informations.
        /// </summary>
        public void EpisodeSearch(string show_id, string number, string subtitles) {
            // call http episodes/search
        }

        /// <summary>
        /// Response for 'episodes/watched'.
        /// Marque un épisode comme vu. Vous pouvez spécifier plusieurs épisodes en séparant les ID par une virgule.
        /// </summary>
        public void EpisodeWatched(string id, string thetvdb_id, string bulk, string delete, string note) {
            // call http episodes/watched
        }

        /// <summary>
        /// Response for 'episodes/watched'.
        /// Enlève le marquage d'un épisode comme vu.
        /// </summary>
        public void DeleteEpisodeWatched(string id, string thetvdb_id) {
            // call http episodes/watched
        }

        /// <summary>
        /// Response for 'friends/block'.
        /// Bloque un utilisateur.
        /// </summary>
        public void FriendBlock(string id) {
            // call http friends/block
        }

        /// <summary>
        /// Response for 'friends/block'.
        /// Supprime le blocage d'un utilisateur.
        /// </summary>
        public void DeleteFriendBlock(string id) {
            // call http friends/block
        }

        /// <summary>
        /// Response for 'friends/friend'.
        /// Ajoute un ami dans le compte de l'utilisateur.
        /// </summary>
        public void FriendFriend(string id) {
            // call http friends/friend
        }

        /// <summary>
        /// Response for 'friends/friend'.
        /// Supprime un ami du compte de l'utilisateur.
        /// </summary>
        public void DeleteFriendFriend(string id) {
            // call http friends/friend
        }

        /// <summary>
        /// Response for 'friends/list'.
        /// Récupère la liste des amis du membre.
        /// </summary>
        public void FriendList(string id, string blocked) {
            // call http friends/list
        }

        /// <summary>
        /// Response for 'friends/requests'.
        /// Récupère la liste des demandes envoyées par l'utilisateur.
        /// </summary>
        public void FriendRequest(string received) {
            // call http friends/requests
        }

        /// <summary>
        /// Response for 'members/access_token'.
        /// Récupère un token d'accès avec le code fourni par l'identification OAuth 2.
        /// </summary>
        public void MemberAccesToken(string client_id, string client_secret, string redirect_uri, string code) {
            // call http members/access_token
        }

        /// <summary>
        /// Response for 'members/auth'.
        /// Identification classique du membre.
        /// </summary>
        public void MemberAuth(string login, string password) {
            // call http members/auth
        }

        /// <summary>
        /// Response for 'members/avatar'.
        /// Uploade et remplace l'avatar de l'utilisateur identifié.
        /// </summary>
        public void MemberAvatar(string avatar) {
            // call http members/avatar
        }

        /// <summary>
        /// Response for 'members/avatar'.
        /// Supprime l'avatar de l'utilisateur identifié.
        /// </summary>
        public void DeleteMemberAvatar() {
            // call http members/avatar
        }

        /// <summary>
        /// Response for 'members/badges'.
        /// Affiche les badges du membre.
        /// </summary>
        public void MemberBadge(string id) {
            // call http members/badges
        }

        /// <summary>
        /// Response for 'members/destroy'.
        /// Détruit le token actif.
        /// </summary>
        public void MemberDestroy() {
            // call http members/destroy
        }

        /// <summary>
        /// Response for 'members/infos'.
        /// Renvoie les informations d'un membre, du membre identifié par défaut.
        /// </summary>
        public void MemberInfo(string id, string summary) {
            // call http members/infos
        }

        /// <summary>
        /// Response for 'members/is_active'.
        /// Vérifie que le token est actif.
        /// </summary>
        public void MemberIActive() {
            // call http members/is_active
        }

        /// <summary>
        /// Response for 'members/lost'.
        /// Envoie un e-mail pour réinitialiser le mot de passe.
        /// </summary>
        public void MemberLost(string find) {
            // call http members/lost
        }

        /// <summary>
        /// Response for 'members/notifications'.
        /// Affiche les dernières notifications du membre. Types : badge, banner, bugs, character, commentaire, dons, episode, facebook, film, forum, friend, message, quizz, recommend, site, subtitles, video.
        /// </summary>
        public void MemberNotification(string since_id, string number, string sort, string types, string auto_delete) {
            // call http members/notifications
        }

        /// <summary>
        /// Response for 'members/oauth'.
        /// Identification par OAuth.
        /// </summary>
        public void MemberOauth() {
            // call http members/oauth
        }

        /// <summary>
        /// Response for 'members/oauth'.
        /// Identification par OAuth. Renvoie l'utilisateur sur l'URL de callback que vous avez spécifiée dans votre compte avec le paramètre GET token.
        /// </summary>
        public void MemberOauth() {
            // call http members/oauth
        }

        /// <summary>
        /// Response for 'members/option'.
        /// Modifie une option de l'utilisateur.
        /// </summary>
        public void MemberOption(string name, string value) {
            // call http members/option
        }

        /// <summary>
        /// Response for 'members/options'.
        /// Récupère les options (sous-titres) du membre.
        /// </summary>
        public void MemberOption() {
            // call http members/options
        }

        /// <summary>
        /// Response for 'members/search'.
        /// Recherche des membres.
        /// </summary>
        public void MemberSearch(string login) {
            // call http members/search
        }

        /// <summary>
        /// Response for 'members/signup'.
        /// Crée un nouveau compte membre sur BetaSeries.
        /// </summary>
        public void MemberSignup(string login, string password, string email) {
            // call http members/signup
        }

        /// <summary>
        /// Response for 'members/sync'.
        /// Cherche les membres parmi les amis du compte.
        /// </summary>
        public void MemberSync(string mails[]) {
            // call http members/sync
        }

        /// <summary>
        /// Response for 'members/username'.
        /// Retourne les possibilités de noms d'utilisateur libres sur BetaSeries.
        /// </summary>
        public void MemberUsername(string username) {
            // call http members/username
        }

        /// <summary>
        /// Response for 'messages/discussion'.
        /// Récupère une discussion identifiée par l'ID du premier message.
        /// </summary>
        public Srk.BetaseriesApi.MessageDiscussion MessageDiscussion(string id) {
            // call http messages/discussion
        }

        /// <summary>
        /// Response for 'messages/inbox'.
        /// Récupère la boîte de réception du membre identifié, par pages de 20.
        /// </summary>
        public Srk.BetaseriesApi.MessageInbox MessageInbox(string page) {
            // call http messages/inbox
        }

        /// <summary>
        /// Response for 'messages/message'.
        /// Supprime un message que vous avez écrit.
        /// </summary>
        public Srk.BetaseriesApi.MessageMessage DeleteMessageMessage(string id) {
            // call http messages/message
        }

        /// <summary>
        /// Response for 'messages/message'.
        /// Envoie un message à un autre membre du site.
        /// </summary>
        public Srk.BetaseriesApi.MessageMessage MessageMessage(string to, string text, string title, string id) {
            // call http messages/message
        }

        /// <summary>
        /// Response for 'messages/read'.
        /// Marque un message comme lu.
        /// </summary>
        public Srk.BetaseriesApi.MessageRead MessageRead(string id) {
            // call http messages/read
        }

        /// <summary>
        /// Response for 'movies/list'.
        /// Affiche la liste de tous les films.
        /// </summary>
        public void MovyList(string start, string limit, string order) {
            // call http movies/list
        }

        /// <summary>
        /// Response for 'movies/member'.
        /// Affiche la liste de tous les films du membre.
        /// </summary>
        public void MovyMember(string state, string start, string limit, string order) {
            // call http movies/member
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Affiche les détails d'un film.
        /// </summary>
        public void MovyMovie(string id) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Ajoute ou met à jour le film dans les films du membre.
        /// </summary>
        public void MovyMovie(string id, string mail, string twitter, string state, string profile) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Supprime un film du compte membre.
        /// </summary>
        public void DeleteMovyMovie(string id) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/random'.
        /// Affiche un film au hasard.
        /// </summary>
        public void MovyRandom(string nb) {
            // call http movies/random
        }

        /// <summary>
        /// Response for 'movies/scraper'.
        /// Récupère les informations d'un film en fonction du nom de fichier
        /// </summary>
        public void MovyScraper(string file) {
            // call http movies/scraper
        }

        /// <summary>
        /// Response for 'movies/search'.
        /// Recherche un film par critères.
        /// </summary>
        public void MovySearch(string title, string order, string nbpp, string page) {
            // call http movies/search
        }

        /// <summary>
        /// Response for 'pictures/badges'.
        /// Retourne une image du badge (32x32).
        /// </summary>
        public void PictureBadge(string id) {
            // call http pictures/badges
        }

        /// <summary>
        /// Response for 'pictures/characters'.
        /// Retourne une image du personnage.
        /// </summary>
        public void PictureCharacter(string id, string width, string height) {
            // call http pictures/characters
        }

        /// <summary>
        /// Response for 'pictures/episodes'.
        /// Retourne une image de l'épisode.
        /// </summary>
        public void PictureEpisode(string id, string width, string height) {
            // call http pictures/episodes
        }

        /// <summary>
        /// Response for 'pictures/members'.
        /// Retourne une image du membre.
        /// </summary>
        public void PictureMember(string id, string width, string height) {
            // call http pictures/members
        }

        /// <summary>
        /// Response for 'pictures/movies'.
        /// Retourne une image du film.
        /// </summary>
        public void PictureMovy(string id, string width, string height) {
            // call http pictures/movies
        }

        /// <summary>
        /// Response for 'pictures/shows'.
        /// Retourne une image de la série.
        /// </summary>
        public void PictureShow(string id, string width, string height, string picked) {
            // call http pictures/shows
        }

        /// <summary>
        /// Response for 'planning/general'.
        /// Affiche tous les épisodes diffusés les 8 derniers jours jusqu'aux 8 prochains jours.
        /// </summary>
        public void PlanningGeneral(string date, string before, string after, string type) {
            // call http planning/general
        }

        /// <summary>
        /// Response for 'planning/incoming'.
        /// Affiche uniquement le premier épisode des prochaines séries qui vont être diffusées.
        /// </summary>
        public void PlanningIncoming() {
            // call http planning/incoming
        }

        /// <summary>
        /// Response for 'planning/member'.
        /// Affiche le planning du membre identifié ou d'un autre membre.
        /// </summary>
        public void PlanningMember(string id, string unseen, string month) {
            // call http planning/member
        }

        /// <summary>
        /// Response for 'shows/archive'.
        /// Archive une série dans le compte du membre.
        /// </summary>
        public void ShowArchive(string id, string thetvdb_id) {
            // call http shows/archive
        }

        /// <summary>
        /// Response for 'shows/archive'.
        /// Sort une série des archives du compte du membre.
        /// </summary>
        public void DeleteShowArchive(string id, string thetvdb_id) {
            // call http shows/archive
        }

        /// <summary>
        /// Response for 'shows/characters'.
        /// Récupère les personnages de la série, ajoutés par les membres de BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.ShowCharacter ShowCharacter(string id, string thetvdb_id) {
            // call http shows/characters
        }

        /// <summary>
        /// Response for 'shows/display'.
        /// Affiche les informations d'une série.
        /// </summary>
        public void ShowDisplay(string id, string thetvdb_id) {
            // call http shows/display
        }

        /// <summary>
        /// Response for 'shows/episodes'.
        /// Affiche les épisodes d'une série.
        /// </summary>
        public void ShowEpisode(string id, string thetvdb_id, string season, string episode, string subtitles) {
            // call http shows/episodes
        }

        /// <summary>
        /// Response for 'shows/favorite'.
        /// Ajoute une série favorite sur le profil du membre identifié.
        /// </summary>
        public void ShowFavorite(string id) {
            // call http shows/favorite
        }

        /// <summary>
        /// Response for 'shows/favorite'.
        /// Supprime une série favorite du profil du membre identifié.
        /// </summary>
        public void DeleteShowFavorite(string id) {
            // call http shows/favorite
        }

        /// <summary>
        /// Response for 'shows/favorites'.
        /// Récupère les séries favorites du membre.
        /// </summary>
        public void ShowFavorite(string id) {
            // call http shows/favorites
        }

        /// <summary>
        /// Response for 'shows/list'.
        /// Affiche la liste de toutes les séries.
        /// </summary>
        public void ShowList(string order, string since) {
            // call http shows/list
        }

        /// <summary>
        /// Response for 'shows/note'.
        /// Note une série.
        /// </summary>
        public void ShowNote(string id, string thetvdb_id, string note) {
            // call http shows/note
        }

        /// <summary>
        /// Response for 'shows/note'.
        /// Supprime une note d'une série.
        /// </summary>
        public void DeleteShowNote(string id, string thetvdb_id) {
            // call http shows/note
        }

        /// <summary>
        /// Response for 'shows/pictures'.
        /// Récupère les images de la série, ajoutées par les membres de BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.ShowPicture ShowPicture(string id, string thetvdb_id) {
            // call http shows/pictures
        }

        /// <summary>
        /// Response for 'shows/random'.
        /// Affiche une série au hasard.
        /// </summary>
        public void ShowRandom(string nb, string summary) {
            // call http shows/random
        }

        /// <summary>
        /// Response for 'shows/recommendation'.
        /// Créer une recommandation d'une série d'un membre pour un ami.
        /// </summary>
        public void ShowRecommendation(string id, string thetvdb_id, string to, string comments) {
            // call http shows/recommendation
        }

        /// <summary>
        /// Response for 'shows/recommendation'.
        /// Supprime une recommandation d'une série envoyée ou reçue.
        /// </summary>
        public void DeleteShowRecommendation(string id) {
            // call http shows/recommendation
        }

        /// <summary>
        /// Response for 'shows/recommendations'.
        /// Récupère les recommandations reçues par l'utilisateur identifié.
        /// </summary>
        public void ShowRecommendation() {
            // call http shows/recommendations
        }

        /// <summary>
        /// Response for 'shows/search'.
        /// Recherche une série.
        /// </summary>
        public void ShowSearch(string title, string summary, string order, string nbpp, string page) {
            // call http shows/search
        }

        /// <summary>
        /// Response for 'shows/show'.
        /// Ajoute une série dans le compte du membre.
        /// </summary>
        public void ShowShow(string id, string thetvdb_id, string episode_id) {
            // call http shows/show
        }

        /// <summary>
        /// Response for 'shows/show'.
        /// Supprime une série du compte du membre.
        /// </summary>
        public void DeleteShowShow(string id, string thetvdb_id) {
            // call http shows/show
        }

        /// <summary>
        /// Response for 'shows/similars'.
        /// Récupère les séries marquées similaires par les membres de BetaSeries.
        /// </summary>
        public void ShowSimilar(string id, string thetvdb_id) {
            // call http shows/similars
        }

        /// <summary>
        /// Response for 'shows/videos'.
        /// Récupère les vidéos associées à la série par les membres de BetaSeries.
        /// </summary>
        public void ShowVideo(string id, string thetvdb_id) {
            // call http shows/videos
        }

        /// <summary>
        /// Response for 'subtitles/episode'.
        /// Affiche les sous-titres pour un épisode donné.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleEpisode SubtitleEpisode(string id, string language) {
            // call http subtitles/episode
        }

        /// <summary>
        /// Response for 'subtitles/last'.
        /// Affiche les derniers sous-titres récupérés par BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleLast SubtitleLast(string number, string language) {
            // call http subtitles/last
        }

        /// <summary>
        /// Response for 'subtitles/report'.
        /// Reporte des sous-titres comme incorrects pour se faire supprimer de la liste.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleReport SubtitleReport(string id, string reason) {
            // call http subtitles/report
        }

        /// <summary>
        /// Response for 'subtitles/show'.
        /// Affiche les sous-titres pour une série donnée.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleShow SubtitleShow(string id, string language) {
            // call http subtitles/show
        }

        /// <summary>
        /// Response for 'timeline/friends'.
        /// Affiche les derniers évènements des amis du membre identifié.
        /// </summary>
        public void TimelineFriend(string nbpp, string since_id, string types) {
            // call http timeline/friends
        }

        /// <summary>
        /// Response for 'timeline/home'.
        /// Affiche les derniers évènements du site.
        /// </summary>
        public void TimelineHome(string nbpp, string since_id, string types) {
            // call http timeline/home
        }

        /// <summary>
        /// Response for 'timeline/member'.
        /// Affiche les derniers évènements du membre spécifié.
        /// </summary>
        public void TimelineMember(string id, string nbpp, string since_id, string types) {
            // call http timeline/member
        }
    }
    public partial class BetaseriesMessagesClient {
        private readonly BetaseriesClient client;

        public BetaseriesMessagesClient(BetaseriesClient client) {
            this.client = client;
        }


        /// <summary>
        /// Response for 'comments/comment'.
        /// Envoie un commentaire pour l'élément spécifié.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment CommentComment(string type, string id, string text, string in_reply_to) {
            // call http comments/comment
        }

        /// <summary>
        /// Response for 'comments/comment'.
        /// Supprime un commentaire de l'utilisateur identifié.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment DeleteCommentComment(string id) {
            // call http comments/comment
        }

        /// <summary>
        /// Response for 'comments/comments'.
        /// Récupère les commentaires pour un élément donné.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment CommentComment(string type, string id, string nbpp, string since_id, string order, string replies) {
            // call http comments/comments
        }

        /// <summary>
        /// Response for 'comments/replies'.
        /// Récupère les réponses d'un commentaire donné.
        /// </summary>
        public Srk.BetaseriesApi.CommentReply CommentReply(string id, string order) {
            // call http comments/replies
        }

        /// <summary>
        /// Response for 'comments/subscription'.
        /// Inscrit le membre aux notifications e-mail pour l'élément donné.
        /// </summary>
        public void CommentSubscription(string type, string id) {
            // call http comments/subscription
        }

        /// <summary>
        /// Response for 'comments/subscription'.
        /// Désinscrit le membre aux notifications e-mail pour l'élément donné.
        /// </summary>
        public void DeleteCommentSubscription(string type, string id) {
            // call http comments/subscription
        }

        /// <summary>
        /// Response for 'episodes/display'.
        /// Affiche les informations d'un épisode.
        /// </summary>
        public void EpisodeDisplay(string id, string thetvdb_id, string subtitles) {
            // call http episodes/display
        }

        /// <summary>
        /// Response for 'episodes/downloaded'.
        /// Marque un épisode comme téléchargé.
        /// </summary>
        public void EpisodeDownloaded(string id, string thetvdb_id) {
            // call http episodes/downloaded
        }

        /// <summary>
        /// Response for 'episodes/downloaded'.
        /// Enlève le marquage d'un épisode comme téléchargé.
        /// </summary>
        public void DeleteEpisodeDownloaded(string id, string thetvdb_id) {
            // call http episodes/downloaded
        }

        /// <summary>
        /// Response for 'episodes/list'.
        /// Récupère la liste des épisodes à voir.
        /// </summary>
        public void EpisodeList(string subtitles, string limit, string showId, string userId) {
            // call http episodes/list
        }

        /// <summary>
        /// Response for 'episodes/note'.
        /// Note un épisode.
        /// </summary>
        public void EpisodeNote(string id, string thetvdb_id, string note) {
            // call http episodes/note
        }

        /// <summary>
        /// Response for 'episodes/note'.
        /// Supprime une note d'un épisode.
        /// </summary>
        public void DeleteEpisodeNote(string id, string thetvdb_id) {
            // call http episodes/note
        }

        /// <summary>
        /// Response for 'episodes/scraper'.
        /// Récupère les informations d'un épisode en fonction du nom de fichier
        /// </summary>
        public void EpisodeScraper(string file) {
            // call http episodes/scraper
        }

        /// <summary>
        /// Response for 'episodes/search'.
        /// Récupère les informations d'un épisode en fonction d'informations.
        /// </summary>
        public void EpisodeSearch(string show_id, string number, string subtitles) {
            // call http episodes/search
        }

        /// <summary>
        /// Response for 'episodes/watched'.
        /// Marque un épisode comme vu. Vous pouvez spécifier plusieurs épisodes en séparant les ID par une virgule.
        /// </summary>
        public void EpisodeWatched(string id, string thetvdb_id, string bulk, string delete, string note) {
            // call http episodes/watched
        }

        /// <summary>
        /// Response for 'episodes/watched'.
        /// Enlève le marquage d'un épisode comme vu.
        /// </summary>
        public void DeleteEpisodeWatched(string id, string thetvdb_id) {
            // call http episodes/watched
        }

        /// <summary>
        /// Response for 'friends/block'.
        /// Bloque un utilisateur.
        /// </summary>
        public void FriendBlock(string id) {
            // call http friends/block
        }

        /// <summary>
        /// Response for 'friends/block'.
        /// Supprime le blocage d'un utilisateur.
        /// </summary>
        public void DeleteFriendBlock(string id) {
            // call http friends/block
        }

        /// <summary>
        /// Response for 'friends/friend'.
        /// Ajoute un ami dans le compte de l'utilisateur.
        /// </summary>
        public void FriendFriend(string id) {
            // call http friends/friend
        }

        /// <summary>
        /// Response for 'friends/friend'.
        /// Supprime un ami du compte de l'utilisateur.
        /// </summary>
        public void DeleteFriendFriend(string id) {
            // call http friends/friend
        }

        /// <summary>
        /// Response for 'friends/list'.
        /// Récupère la liste des amis du membre.
        /// </summary>
        public void FriendList(string id, string blocked) {
            // call http friends/list
        }

        /// <summary>
        /// Response for 'friends/requests'.
        /// Récupère la liste des demandes envoyées par l'utilisateur.
        /// </summary>
        public void FriendRequest(string received) {
            // call http friends/requests
        }

        /// <summary>
        /// Response for 'members/access_token'.
        /// Récupère un token d'accès avec le code fourni par l'identification OAuth 2.
        /// </summary>
        public void MemberAccesToken(string client_id, string client_secret, string redirect_uri, string code) {
            // call http members/access_token
        }

        /// <summary>
        /// Response for 'members/auth'.
        /// Identification classique du membre.
        /// </summary>
        public void MemberAuth(string login, string password) {
            // call http members/auth
        }

        /// <summary>
        /// Response for 'members/avatar'.
        /// Uploade et remplace l'avatar de l'utilisateur identifié.
        /// </summary>
        public void MemberAvatar(string avatar) {
            // call http members/avatar
        }

        /// <summary>
        /// Response for 'members/avatar'.
        /// Supprime l'avatar de l'utilisateur identifié.
        /// </summary>
        public void DeleteMemberAvatar() {
            // call http members/avatar
        }

        /// <summary>
        /// Response for 'members/badges'.
        /// Affiche les badges du membre.
        /// </summary>
        public void MemberBadge(string id) {
            // call http members/badges
        }

        /// <summary>
        /// Response for 'members/destroy'.
        /// Détruit le token actif.
        /// </summary>
        public void MemberDestroy() {
            // call http members/destroy
        }

        /// <summary>
        /// Response for 'members/infos'.
        /// Renvoie les informations d'un membre, du membre identifié par défaut.
        /// </summary>
        public void MemberInfo(string id, string summary) {
            // call http members/infos
        }

        /// <summary>
        /// Response for 'members/is_active'.
        /// Vérifie que le token est actif.
        /// </summary>
        public void MemberIActive() {
            // call http members/is_active
        }

        /// <summary>
        /// Response for 'members/lost'.
        /// Envoie un e-mail pour réinitialiser le mot de passe.
        /// </summary>
        public void MemberLost(string find) {
            // call http members/lost
        }

        /// <summary>
        /// Response for 'members/notifications'.
        /// Affiche les dernières notifications du membre. Types : badge, banner, bugs, character, commentaire, dons, episode, facebook, film, forum, friend, message, quizz, recommend, site, subtitles, video.
        /// </summary>
        public void MemberNotification(string since_id, string number, string sort, string types, string auto_delete) {
            // call http members/notifications
        }

        /// <summary>
        /// Response for 'members/oauth'.
        /// Identification par OAuth.
        /// </summary>
        public void MemberOauth() {
            // call http members/oauth
        }

        /// <summary>
        /// Response for 'members/oauth'.
        /// Identification par OAuth. Renvoie l'utilisateur sur l'URL de callback que vous avez spécifiée dans votre compte avec le paramètre GET token.
        /// </summary>
        public void MemberOauth() {
            // call http members/oauth
        }

        /// <summary>
        /// Response for 'members/option'.
        /// Modifie une option de l'utilisateur.
        /// </summary>
        public void MemberOption(string name, string value) {
            // call http members/option
        }

        /// <summary>
        /// Response for 'members/options'.
        /// Récupère les options (sous-titres) du membre.
        /// </summary>
        public void MemberOption() {
            // call http members/options
        }

        /// <summary>
        /// Response for 'members/search'.
        /// Recherche des membres.
        /// </summary>
        public void MemberSearch(string login) {
            // call http members/search
        }

        /// <summary>
        /// Response for 'members/signup'.
        /// Crée un nouveau compte membre sur BetaSeries.
        /// </summary>
        public void MemberSignup(string login, string password, string email) {
            // call http members/signup
        }

        /// <summary>
        /// Response for 'members/sync'.
        /// Cherche les membres parmi les amis du compte.
        /// </summary>
        public void MemberSync(string mails[]) {
            // call http members/sync
        }

        /// <summary>
        /// Response for 'members/username'.
        /// Retourne les possibilités de noms d'utilisateur libres sur BetaSeries.
        /// </summary>
        public void MemberUsername(string username) {
            // call http members/username
        }

        /// <summary>
        /// Response for 'messages/discussion'.
        /// Récupère une discussion identifiée par l'ID du premier message.
        /// </summary>
        public Srk.BetaseriesApi.MessageDiscussion MessageDiscussion(string id) {
            // call http messages/discussion
        }

        /// <summary>
        /// Response for 'messages/inbox'.
        /// Récupère la boîte de réception du membre identifié, par pages de 20.
        /// </summary>
        public Srk.BetaseriesApi.MessageInbox MessageInbox(string page) {
            // call http messages/inbox
        }

        /// <summary>
        /// Response for 'messages/message'.
        /// Supprime un message que vous avez écrit.
        /// </summary>
        public Srk.BetaseriesApi.MessageMessage DeleteMessageMessage(string id) {
            // call http messages/message
        }

        /// <summary>
        /// Response for 'messages/message'.
        /// Envoie un message à un autre membre du site.
        /// </summary>
        public Srk.BetaseriesApi.MessageMessage MessageMessage(string to, string text, string title, string id) {
            // call http messages/message
        }

        /// <summary>
        /// Response for 'messages/read'.
        /// Marque un message comme lu.
        /// </summary>
        public Srk.BetaseriesApi.MessageRead MessageRead(string id) {
            // call http messages/read
        }

        /// <summary>
        /// Response for 'movies/list'.
        /// Affiche la liste de tous les films.
        /// </summary>
        public void MovyList(string start, string limit, string order) {
            // call http movies/list
        }

        /// <summary>
        /// Response for 'movies/member'.
        /// Affiche la liste de tous les films du membre.
        /// </summary>
        public void MovyMember(string state, string start, string limit, string order) {
            // call http movies/member
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Affiche les détails d'un film.
        /// </summary>
        public void MovyMovie(string id) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Ajoute ou met à jour le film dans les films du membre.
        /// </summary>
        public void MovyMovie(string id, string mail, string twitter, string state, string profile) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Supprime un film du compte membre.
        /// </summary>
        public void DeleteMovyMovie(string id) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/random'.
        /// Affiche un film au hasard.
        /// </summary>
        public void MovyRandom(string nb) {
            // call http movies/random
        }

        /// <summary>
        /// Response for 'movies/scraper'.
        /// Récupère les informations d'un film en fonction du nom de fichier
        /// </summary>
        public void MovyScraper(string file) {
            // call http movies/scraper
        }

        /// <summary>
        /// Response for 'movies/search'.
        /// Recherche un film par critères.
        /// </summary>
        public void MovySearch(string title, string order, string nbpp, string page) {
            // call http movies/search
        }

        /// <summary>
        /// Response for 'pictures/badges'.
        /// Retourne une image du badge (32x32).
        /// </summary>
        public void PictureBadge(string id) {
            // call http pictures/badges
        }

        /// <summary>
        /// Response for 'pictures/characters'.
        /// Retourne une image du personnage.
        /// </summary>
        public void PictureCharacter(string id, string width, string height) {
            // call http pictures/characters
        }

        /// <summary>
        /// Response for 'pictures/episodes'.
        /// Retourne une image de l'épisode.
        /// </summary>
        public void PictureEpisode(string id, string width, string height) {
            // call http pictures/episodes
        }

        /// <summary>
        /// Response for 'pictures/members'.
        /// Retourne une image du membre.
        /// </summary>
        public void PictureMember(string id, string width, string height) {
            // call http pictures/members
        }

        /// <summary>
        /// Response for 'pictures/movies'.
        /// Retourne une image du film.
        /// </summary>
        public void PictureMovy(string id, string width, string height) {
            // call http pictures/movies
        }

        /// <summary>
        /// Response for 'pictures/shows'.
        /// Retourne une image de la série.
        /// </summary>
        public void PictureShow(string id, string width, string height, string picked) {
            // call http pictures/shows
        }

        /// <summary>
        /// Response for 'planning/general'.
        /// Affiche tous les épisodes diffusés les 8 derniers jours jusqu'aux 8 prochains jours.
        /// </summary>
        public void PlanningGeneral(string date, string before, string after, string type) {
            // call http planning/general
        }

        /// <summary>
        /// Response for 'planning/incoming'.
        /// Affiche uniquement le premier épisode des prochaines séries qui vont être diffusées.
        /// </summary>
        public void PlanningIncoming() {
            // call http planning/incoming
        }

        /// <summary>
        /// Response for 'planning/member'.
        /// Affiche le planning du membre identifié ou d'un autre membre.
        /// </summary>
        public void PlanningMember(string id, string unseen, string month) {
            // call http planning/member
        }

        /// <summary>
        /// Response for 'shows/archive'.
        /// Archive une série dans le compte du membre.
        /// </summary>
        public void ShowArchive(string id, string thetvdb_id) {
            // call http shows/archive
        }

        /// <summary>
        /// Response for 'shows/archive'.
        /// Sort une série des archives du compte du membre.
        /// </summary>
        public void DeleteShowArchive(string id, string thetvdb_id) {
            // call http shows/archive
        }

        /// <summary>
        /// Response for 'shows/characters'.
        /// Récupère les personnages de la série, ajoutés par les membres de BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.ShowCharacter ShowCharacter(string id, string thetvdb_id) {
            // call http shows/characters
        }

        /// <summary>
        /// Response for 'shows/display'.
        /// Affiche les informations d'une série.
        /// </summary>
        public void ShowDisplay(string id, string thetvdb_id) {
            // call http shows/display
        }

        /// <summary>
        /// Response for 'shows/episodes'.
        /// Affiche les épisodes d'une série.
        /// </summary>
        public void ShowEpisode(string id, string thetvdb_id, string season, string episode, string subtitles) {
            // call http shows/episodes
        }

        /// <summary>
        /// Response for 'shows/favorite'.
        /// Ajoute une série favorite sur le profil du membre identifié.
        /// </summary>
        public void ShowFavorite(string id) {
            // call http shows/favorite
        }

        /// <summary>
        /// Response for 'shows/favorite'.
        /// Supprime une série favorite du profil du membre identifié.
        /// </summary>
        public void DeleteShowFavorite(string id) {
            // call http shows/favorite
        }

        /// <summary>
        /// Response for 'shows/favorites'.
        /// Récupère les séries favorites du membre.
        /// </summary>
        public void ShowFavorite(string id) {
            // call http shows/favorites
        }

        /// <summary>
        /// Response for 'shows/list'.
        /// Affiche la liste de toutes les séries.
        /// </summary>
        public void ShowList(string order, string since) {
            // call http shows/list
        }

        /// <summary>
        /// Response for 'shows/note'.
        /// Note une série.
        /// </summary>
        public void ShowNote(string id, string thetvdb_id, string note) {
            // call http shows/note
        }

        /// <summary>
        /// Response for 'shows/note'.
        /// Supprime une note d'une série.
        /// </summary>
        public void DeleteShowNote(string id, string thetvdb_id) {
            // call http shows/note
        }

        /// <summary>
        /// Response for 'shows/pictures'.
        /// Récupère les images de la série, ajoutées par les membres de BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.ShowPicture ShowPicture(string id, string thetvdb_id) {
            // call http shows/pictures
        }

        /// <summary>
        /// Response for 'shows/random'.
        /// Affiche une série au hasard.
        /// </summary>
        public void ShowRandom(string nb, string summary) {
            // call http shows/random
        }

        /// <summary>
        /// Response for 'shows/recommendation'.
        /// Créer une recommandation d'une série d'un membre pour un ami.
        /// </summary>
        public void ShowRecommendation(string id, string thetvdb_id, string to, string comments) {
            // call http shows/recommendation
        }

        /// <summary>
        /// Response for 'shows/recommendation'.
        /// Supprime une recommandation d'une série envoyée ou reçue.
        /// </summary>
        public void DeleteShowRecommendation(string id) {
            // call http shows/recommendation
        }

        /// <summary>
        /// Response for 'shows/recommendations'.
        /// Récupère les recommandations reçues par l'utilisateur identifié.
        /// </summary>
        public void ShowRecommendation() {
            // call http shows/recommendations
        }

        /// <summary>
        /// Response for 'shows/search'.
        /// Recherche une série.
        /// </summary>
        public void ShowSearch(string title, string summary, string order, string nbpp, string page) {
            // call http shows/search
        }

        /// <summary>
        /// Response for 'shows/show'.
        /// Ajoute une série dans le compte du membre.
        /// </summary>
        public void ShowShow(string id, string thetvdb_id, string episode_id) {
            // call http shows/show
        }

        /// <summary>
        /// Response for 'shows/show'.
        /// Supprime une série du compte du membre.
        /// </summary>
        public void DeleteShowShow(string id, string thetvdb_id) {
            // call http shows/show
        }

        /// <summary>
        /// Response for 'shows/similars'.
        /// Récupère les séries marquées similaires par les membres de BetaSeries.
        /// </summary>
        public void ShowSimilar(string id, string thetvdb_id) {
            // call http shows/similars
        }

        /// <summary>
        /// Response for 'shows/videos'.
        /// Récupère les vidéos associées à la série par les membres de BetaSeries.
        /// </summary>
        public void ShowVideo(string id, string thetvdb_id) {
            // call http shows/videos
        }

        /// <summary>
        /// Response for 'subtitles/episode'.
        /// Affiche les sous-titres pour un épisode donné.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleEpisode SubtitleEpisode(string id, string language) {
            // call http subtitles/episode
        }

        /// <summary>
        /// Response for 'subtitles/last'.
        /// Affiche les derniers sous-titres récupérés par BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleLast SubtitleLast(string number, string language) {
            // call http subtitles/last
        }

        /// <summary>
        /// Response for 'subtitles/report'.
        /// Reporte des sous-titres comme incorrects pour se faire supprimer de la liste.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleReport SubtitleReport(string id, string reason) {
            // call http subtitles/report
        }

        /// <summary>
        /// Response for 'subtitles/show'.
        /// Affiche les sous-titres pour une série donnée.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleShow SubtitleShow(string id, string language) {
            // call http subtitles/show
        }

        /// <summary>
        /// Response for 'timeline/friends'.
        /// Affiche les derniers évènements des amis du membre identifié.
        /// </summary>
        public void TimelineFriend(string nbpp, string since_id, string types) {
            // call http timeline/friends
        }

        /// <summary>
        /// Response for 'timeline/home'.
        /// Affiche les derniers évènements du site.
        /// </summary>
        public void TimelineHome(string nbpp, string since_id, string types) {
            // call http timeline/home
        }

        /// <summary>
        /// Response for 'timeline/member'.
        /// Affiche les derniers évènements du membre spécifié.
        /// </summary>
        public void TimelineMember(string id, string nbpp, string since_id, string types) {
            // call http timeline/member
        }
    }
    public partial class BetaseriesMoviesClient {
        private readonly BetaseriesClient client;

        public BetaseriesMoviesClient(BetaseriesClient client) {
            this.client = client;
        }


        /// <summary>
        /// Response for 'comments/comment'.
        /// Envoie un commentaire pour l'élément spécifié.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment CommentComment(string type, string id, string text, string in_reply_to) {
            // call http comments/comment
        }

        /// <summary>
        /// Response for 'comments/comment'.
        /// Supprime un commentaire de l'utilisateur identifié.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment DeleteCommentComment(string id) {
            // call http comments/comment
        }

        /// <summary>
        /// Response for 'comments/comments'.
        /// Récupère les commentaires pour un élément donné.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment CommentComment(string type, string id, string nbpp, string since_id, string order, string replies) {
            // call http comments/comments
        }

        /// <summary>
        /// Response for 'comments/replies'.
        /// Récupère les réponses d'un commentaire donné.
        /// </summary>
        public Srk.BetaseriesApi.CommentReply CommentReply(string id, string order) {
            // call http comments/replies
        }

        /// <summary>
        /// Response for 'comments/subscription'.
        /// Inscrit le membre aux notifications e-mail pour l'élément donné.
        /// </summary>
        public void CommentSubscription(string type, string id) {
            // call http comments/subscription
        }

        /// <summary>
        /// Response for 'comments/subscription'.
        /// Désinscrit le membre aux notifications e-mail pour l'élément donné.
        /// </summary>
        public void DeleteCommentSubscription(string type, string id) {
            // call http comments/subscription
        }

        /// <summary>
        /// Response for 'episodes/display'.
        /// Affiche les informations d'un épisode.
        /// </summary>
        public void EpisodeDisplay(string id, string thetvdb_id, string subtitles) {
            // call http episodes/display
        }

        /// <summary>
        /// Response for 'episodes/downloaded'.
        /// Marque un épisode comme téléchargé.
        /// </summary>
        public void EpisodeDownloaded(string id, string thetvdb_id) {
            // call http episodes/downloaded
        }

        /// <summary>
        /// Response for 'episodes/downloaded'.
        /// Enlève le marquage d'un épisode comme téléchargé.
        /// </summary>
        public void DeleteEpisodeDownloaded(string id, string thetvdb_id) {
            // call http episodes/downloaded
        }

        /// <summary>
        /// Response for 'episodes/list'.
        /// Récupère la liste des épisodes à voir.
        /// </summary>
        public void EpisodeList(string subtitles, string limit, string showId, string userId) {
            // call http episodes/list
        }

        /// <summary>
        /// Response for 'episodes/note'.
        /// Note un épisode.
        /// </summary>
        public void EpisodeNote(string id, string thetvdb_id, string note) {
            // call http episodes/note
        }

        /// <summary>
        /// Response for 'episodes/note'.
        /// Supprime une note d'un épisode.
        /// </summary>
        public void DeleteEpisodeNote(string id, string thetvdb_id) {
            // call http episodes/note
        }

        /// <summary>
        /// Response for 'episodes/scraper'.
        /// Récupère les informations d'un épisode en fonction du nom de fichier
        /// </summary>
        public void EpisodeScraper(string file) {
            // call http episodes/scraper
        }

        /// <summary>
        /// Response for 'episodes/search'.
        /// Récupère les informations d'un épisode en fonction d'informations.
        /// </summary>
        public void EpisodeSearch(string show_id, string number, string subtitles) {
            // call http episodes/search
        }

        /// <summary>
        /// Response for 'episodes/watched'.
        /// Marque un épisode comme vu. Vous pouvez spécifier plusieurs épisodes en séparant les ID par une virgule.
        /// </summary>
        public void EpisodeWatched(string id, string thetvdb_id, string bulk, string delete, string note) {
            // call http episodes/watched
        }

        /// <summary>
        /// Response for 'episodes/watched'.
        /// Enlève le marquage d'un épisode comme vu.
        /// </summary>
        public void DeleteEpisodeWatched(string id, string thetvdb_id) {
            // call http episodes/watched
        }

        /// <summary>
        /// Response for 'friends/block'.
        /// Bloque un utilisateur.
        /// </summary>
        public void FriendBlock(string id) {
            // call http friends/block
        }

        /// <summary>
        /// Response for 'friends/block'.
        /// Supprime le blocage d'un utilisateur.
        /// </summary>
        public void DeleteFriendBlock(string id) {
            // call http friends/block
        }

        /// <summary>
        /// Response for 'friends/friend'.
        /// Ajoute un ami dans le compte de l'utilisateur.
        /// </summary>
        public void FriendFriend(string id) {
            // call http friends/friend
        }

        /// <summary>
        /// Response for 'friends/friend'.
        /// Supprime un ami du compte de l'utilisateur.
        /// </summary>
        public void DeleteFriendFriend(string id) {
            // call http friends/friend
        }

        /// <summary>
        /// Response for 'friends/list'.
        /// Récupère la liste des amis du membre.
        /// </summary>
        public void FriendList(string id, string blocked) {
            // call http friends/list
        }

        /// <summary>
        /// Response for 'friends/requests'.
        /// Récupère la liste des demandes envoyées par l'utilisateur.
        /// </summary>
        public void FriendRequest(string received) {
            // call http friends/requests
        }

        /// <summary>
        /// Response for 'members/access_token'.
        /// Récupère un token d'accès avec le code fourni par l'identification OAuth 2.
        /// </summary>
        public void MemberAccesToken(string client_id, string client_secret, string redirect_uri, string code) {
            // call http members/access_token
        }

        /// <summary>
        /// Response for 'members/auth'.
        /// Identification classique du membre.
        /// </summary>
        public void MemberAuth(string login, string password) {
            // call http members/auth
        }

        /// <summary>
        /// Response for 'members/avatar'.
        /// Uploade et remplace l'avatar de l'utilisateur identifié.
        /// </summary>
        public void MemberAvatar(string avatar) {
            // call http members/avatar
        }

        /// <summary>
        /// Response for 'members/avatar'.
        /// Supprime l'avatar de l'utilisateur identifié.
        /// </summary>
        public void DeleteMemberAvatar() {
            // call http members/avatar
        }

        /// <summary>
        /// Response for 'members/badges'.
        /// Affiche les badges du membre.
        /// </summary>
        public void MemberBadge(string id) {
            // call http members/badges
        }

        /// <summary>
        /// Response for 'members/destroy'.
        /// Détruit le token actif.
        /// </summary>
        public void MemberDestroy() {
            // call http members/destroy
        }

        /// <summary>
        /// Response for 'members/infos'.
        /// Renvoie les informations d'un membre, du membre identifié par défaut.
        /// </summary>
        public void MemberInfo(string id, string summary) {
            // call http members/infos
        }

        /// <summary>
        /// Response for 'members/is_active'.
        /// Vérifie que le token est actif.
        /// </summary>
        public void MemberIActive() {
            // call http members/is_active
        }

        /// <summary>
        /// Response for 'members/lost'.
        /// Envoie un e-mail pour réinitialiser le mot de passe.
        /// </summary>
        public void MemberLost(string find) {
            // call http members/lost
        }

        /// <summary>
        /// Response for 'members/notifications'.
        /// Affiche les dernières notifications du membre. Types : badge, banner, bugs, character, commentaire, dons, episode, facebook, film, forum, friend, message, quizz, recommend, site, subtitles, video.
        /// </summary>
        public void MemberNotification(string since_id, string number, string sort, string types, string auto_delete) {
            // call http members/notifications
        }

        /// <summary>
        /// Response for 'members/oauth'.
        /// Identification par OAuth.
        /// </summary>
        public void MemberOauth() {
            // call http members/oauth
        }

        /// <summary>
        /// Response for 'members/oauth'.
        /// Identification par OAuth. Renvoie l'utilisateur sur l'URL de callback que vous avez spécifiée dans votre compte avec le paramètre GET token.
        /// </summary>
        public void MemberOauth() {
            // call http members/oauth
        }

        /// <summary>
        /// Response for 'members/option'.
        /// Modifie une option de l'utilisateur.
        /// </summary>
        public void MemberOption(string name, string value) {
            // call http members/option
        }

        /// <summary>
        /// Response for 'members/options'.
        /// Récupère les options (sous-titres) du membre.
        /// </summary>
        public void MemberOption() {
            // call http members/options
        }

        /// <summary>
        /// Response for 'members/search'.
        /// Recherche des membres.
        /// </summary>
        public void MemberSearch(string login) {
            // call http members/search
        }

        /// <summary>
        /// Response for 'members/signup'.
        /// Crée un nouveau compte membre sur BetaSeries.
        /// </summary>
        public void MemberSignup(string login, string password, string email) {
            // call http members/signup
        }

        /// <summary>
        /// Response for 'members/sync'.
        /// Cherche les membres parmi les amis du compte.
        /// </summary>
        public void MemberSync(string mails[]) {
            // call http members/sync
        }

        /// <summary>
        /// Response for 'members/username'.
        /// Retourne les possibilités de noms d'utilisateur libres sur BetaSeries.
        /// </summary>
        public void MemberUsername(string username) {
            // call http members/username
        }

        /// <summary>
        /// Response for 'messages/discussion'.
        /// Récupère une discussion identifiée par l'ID du premier message.
        /// </summary>
        public Srk.BetaseriesApi.MessageDiscussion MessageDiscussion(string id) {
            // call http messages/discussion
        }

        /// <summary>
        /// Response for 'messages/inbox'.
        /// Récupère la boîte de réception du membre identifié, par pages de 20.
        /// </summary>
        public Srk.BetaseriesApi.MessageInbox MessageInbox(string page) {
            // call http messages/inbox
        }

        /// <summary>
        /// Response for 'messages/message'.
        /// Supprime un message que vous avez écrit.
        /// </summary>
        public Srk.BetaseriesApi.MessageMessage DeleteMessageMessage(string id) {
            // call http messages/message
        }

        /// <summary>
        /// Response for 'messages/message'.
        /// Envoie un message à un autre membre du site.
        /// </summary>
        public Srk.BetaseriesApi.MessageMessage MessageMessage(string to, string text, string title, string id) {
            // call http messages/message
        }

        /// <summary>
        /// Response for 'messages/read'.
        /// Marque un message comme lu.
        /// </summary>
        public Srk.BetaseriesApi.MessageRead MessageRead(string id) {
            // call http messages/read
        }

        /// <summary>
        /// Response for 'movies/list'.
        /// Affiche la liste de tous les films.
        /// </summary>
        public void MovyList(string start, string limit, string order) {
            // call http movies/list
        }

        /// <summary>
        /// Response for 'movies/member'.
        /// Affiche la liste de tous les films du membre.
        /// </summary>
        public void MovyMember(string state, string start, string limit, string order) {
            // call http movies/member
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Affiche les détails d'un film.
        /// </summary>
        public void MovyMovie(string id) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Ajoute ou met à jour le film dans les films du membre.
        /// </summary>
        public void MovyMovie(string id, string mail, string twitter, string state, string profile) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Supprime un film du compte membre.
        /// </summary>
        public void DeleteMovyMovie(string id) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/random'.
        /// Affiche un film au hasard.
        /// </summary>
        public void MovyRandom(string nb) {
            // call http movies/random
        }

        /// <summary>
        /// Response for 'movies/scraper'.
        /// Récupère les informations d'un film en fonction du nom de fichier
        /// </summary>
        public void MovyScraper(string file) {
            // call http movies/scraper
        }

        /// <summary>
        /// Response for 'movies/search'.
        /// Recherche un film par critères.
        /// </summary>
        public void MovySearch(string title, string order, string nbpp, string page) {
            // call http movies/search
        }

        /// <summary>
        /// Response for 'pictures/badges'.
        /// Retourne une image du badge (32x32).
        /// </summary>
        public void PictureBadge(string id) {
            // call http pictures/badges
        }

        /// <summary>
        /// Response for 'pictures/characters'.
        /// Retourne une image du personnage.
        /// </summary>
        public void PictureCharacter(string id, string width, string height) {
            // call http pictures/characters
        }

        /// <summary>
        /// Response for 'pictures/episodes'.
        /// Retourne une image de l'épisode.
        /// </summary>
        public void PictureEpisode(string id, string width, string height) {
            // call http pictures/episodes
        }

        /// <summary>
        /// Response for 'pictures/members'.
        /// Retourne une image du membre.
        /// </summary>
        public void PictureMember(string id, string width, string height) {
            // call http pictures/members
        }

        /// <summary>
        /// Response for 'pictures/movies'.
        /// Retourne une image du film.
        /// </summary>
        public void PictureMovy(string id, string width, string height) {
            // call http pictures/movies
        }

        /// <summary>
        /// Response for 'pictures/shows'.
        /// Retourne une image de la série.
        /// </summary>
        public void PictureShow(string id, string width, string height, string picked) {
            // call http pictures/shows
        }

        /// <summary>
        /// Response for 'planning/general'.
        /// Affiche tous les épisodes diffusés les 8 derniers jours jusqu'aux 8 prochains jours.
        /// </summary>
        public void PlanningGeneral(string date, string before, string after, string type) {
            // call http planning/general
        }

        /// <summary>
        /// Response for 'planning/incoming'.
        /// Affiche uniquement le premier épisode des prochaines séries qui vont être diffusées.
        /// </summary>
        public void PlanningIncoming() {
            // call http planning/incoming
        }

        /// <summary>
        /// Response for 'planning/member'.
        /// Affiche le planning du membre identifié ou d'un autre membre.
        /// </summary>
        public void PlanningMember(string id, string unseen, string month) {
            // call http planning/member
        }

        /// <summary>
        /// Response for 'shows/archive'.
        /// Archive une série dans le compte du membre.
        /// </summary>
        public void ShowArchive(string id, string thetvdb_id) {
            // call http shows/archive
        }

        /// <summary>
        /// Response for 'shows/archive'.
        /// Sort une série des archives du compte du membre.
        /// </summary>
        public void DeleteShowArchive(string id, string thetvdb_id) {
            // call http shows/archive
        }

        /// <summary>
        /// Response for 'shows/characters'.
        /// Récupère les personnages de la série, ajoutés par les membres de BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.ShowCharacter ShowCharacter(string id, string thetvdb_id) {
            // call http shows/characters
        }

        /// <summary>
        /// Response for 'shows/display'.
        /// Affiche les informations d'une série.
        /// </summary>
        public void ShowDisplay(string id, string thetvdb_id) {
            // call http shows/display
        }

        /// <summary>
        /// Response for 'shows/episodes'.
        /// Affiche les épisodes d'une série.
        /// </summary>
        public void ShowEpisode(string id, string thetvdb_id, string season, string episode, string subtitles) {
            // call http shows/episodes
        }

        /// <summary>
        /// Response for 'shows/favorite'.
        /// Ajoute une série favorite sur le profil du membre identifié.
        /// </summary>
        public void ShowFavorite(string id) {
            // call http shows/favorite
        }

        /// <summary>
        /// Response for 'shows/favorite'.
        /// Supprime une série favorite du profil du membre identifié.
        /// </summary>
        public void DeleteShowFavorite(string id) {
            // call http shows/favorite
        }

        /// <summary>
        /// Response for 'shows/favorites'.
        /// Récupère les séries favorites du membre.
        /// </summary>
        public void ShowFavorite(string id) {
            // call http shows/favorites
        }

        /// <summary>
        /// Response for 'shows/list'.
        /// Affiche la liste de toutes les séries.
        /// </summary>
        public void ShowList(string order, string since) {
            // call http shows/list
        }

        /// <summary>
        /// Response for 'shows/note'.
        /// Note une série.
        /// </summary>
        public void ShowNote(string id, string thetvdb_id, string note) {
            // call http shows/note
        }

        /// <summary>
        /// Response for 'shows/note'.
        /// Supprime une note d'une série.
        /// </summary>
        public void DeleteShowNote(string id, string thetvdb_id) {
            // call http shows/note
        }

        /// <summary>
        /// Response for 'shows/pictures'.
        /// Récupère les images de la série, ajoutées par les membres de BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.ShowPicture ShowPicture(string id, string thetvdb_id) {
            // call http shows/pictures
        }

        /// <summary>
        /// Response for 'shows/random'.
        /// Affiche une série au hasard.
        /// </summary>
        public void ShowRandom(string nb, string summary) {
            // call http shows/random
        }

        /// <summary>
        /// Response for 'shows/recommendation'.
        /// Créer une recommandation d'une série d'un membre pour un ami.
        /// </summary>
        public void ShowRecommendation(string id, string thetvdb_id, string to, string comments) {
            // call http shows/recommendation
        }

        /// <summary>
        /// Response for 'shows/recommendation'.
        /// Supprime une recommandation d'une série envoyée ou reçue.
        /// </summary>
        public void DeleteShowRecommendation(string id) {
            // call http shows/recommendation
        }

        /// <summary>
        /// Response for 'shows/recommendations'.
        /// Récupère les recommandations reçues par l'utilisateur identifié.
        /// </summary>
        public void ShowRecommendation() {
            // call http shows/recommendations
        }

        /// <summary>
        /// Response for 'shows/search'.
        /// Recherche une série.
        /// </summary>
        public void ShowSearch(string title, string summary, string order, string nbpp, string page) {
            // call http shows/search
        }

        /// <summary>
        /// Response for 'shows/show'.
        /// Ajoute une série dans le compte du membre.
        /// </summary>
        public void ShowShow(string id, string thetvdb_id, string episode_id) {
            // call http shows/show
        }

        /// <summary>
        /// Response for 'shows/show'.
        /// Supprime une série du compte du membre.
        /// </summary>
        public void DeleteShowShow(string id, string thetvdb_id) {
            // call http shows/show
        }

        /// <summary>
        /// Response for 'shows/similars'.
        /// Récupère les séries marquées similaires par les membres de BetaSeries.
        /// </summary>
        public void ShowSimilar(string id, string thetvdb_id) {
            // call http shows/similars
        }

        /// <summary>
        /// Response for 'shows/videos'.
        /// Récupère les vidéos associées à la série par les membres de BetaSeries.
        /// </summary>
        public void ShowVideo(string id, string thetvdb_id) {
            // call http shows/videos
        }

        /// <summary>
        /// Response for 'subtitles/episode'.
        /// Affiche les sous-titres pour un épisode donné.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleEpisode SubtitleEpisode(string id, string language) {
            // call http subtitles/episode
        }

        /// <summary>
        /// Response for 'subtitles/last'.
        /// Affiche les derniers sous-titres récupérés par BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleLast SubtitleLast(string number, string language) {
            // call http subtitles/last
        }

        /// <summary>
        /// Response for 'subtitles/report'.
        /// Reporte des sous-titres comme incorrects pour se faire supprimer de la liste.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleReport SubtitleReport(string id, string reason) {
            // call http subtitles/report
        }

        /// <summary>
        /// Response for 'subtitles/show'.
        /// Affiche les sous-titres pour une série donnée.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleShow SubtitleShow(string id, string language) {
            // call http subtitles/show
        }

        /// <summary>
        /// Response for 'timeline/friends'.
        /// Affiche les derniers évènements des amis du membre identifié.
        /// </summary>
        public void TimelineFriend(string nbpp, string since_id, string types) {
            // call http timeline/friends
        }

        /// <summary>
        /// Response for 'timeline/home'.
        /// Affiche les derniers évènements du site.
        /// </summary>
        public void TimelineHome(string nbpp, string since_id, string types) {
            // call http timeline/home
        }

        /// <summary>
        /// Response for 'timeline/member'.
        /// Affiche les derniers évènements du membre spécifié.
        /// </summary>
        public void TimelineMember(string id, string nbpp, string since_id, string types) {
            // call http timeline/member
        }
    }
    public partial class BetaseriesPicturesClient {
        private readonly BetaseriesClient client;

        public BetaseriesPicturesClient(BetaseriesClient client) {
            this.client = client;
        }


        /// <summary>
        /// Response for 'comments/comment'.
        /// Envoie un commentaire pour l'élément spécifié.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment CommentComment(string type, string id, string text, string in_reply_to) {
            // call http comments/comment
        }

        /// <summary>
        /// Response for 'comments/comment'.
        /// Supprime un commentaire de l'utilisateur identifié.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment DeleteCommentComment(string id) {
            // call http comments/comment
        }

        /// <summary>
        /// Response for 'comments/comments'.
        /// Récupère les commentaires pour un élément donné.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment CommentComment(string type, string id, string nbpp, string since_id, string order, string replies) {
            // call http comments/comments
        }

        /// <summary>
        /// Response for 'comments/replies'.
        /// Récupère les réponses d'un commentaire donné.
        /// </summary>
        public Srk.BetaseriesApi.CommentReply CommentReply(string id, string order) {
            // call http comments/replies
        }

        /// <summary>
        /// Response for 'comments/subscription'.
        /// Inscrit le membre aux notifications e-mail pour l'élément donné.
        /// </summary>
        public void CommentSubscription(string type, string id) {
            // call http comments/subscription
        }

        /// <summary>
        /// Response for 'comments/subscription'.
        /// Désinscrit le membre aux notifications e-mail pour l'élément donné.
        /// </summary>
        public void DeleteCommentSubscription(string type, string id) {
            // call http comments/subscription
        }

        /// <summary>
        /// Response for 'episodes/display'.
        /// Affiche les informations d'un épisode.
        /// </summary>
        public void EpisodeDisplay(string id, string thetvdb_id, string subtitles) {
            // call http episodes/display
        }

        /// <summary>
        /// Response for 'episodes/downloaded'.
        /// Marque un épisode comme téléchargé.
        /// </summary>
        public void EpisodeDownloaded(string id, string thetvdb_id) {
            // call http episodes/downloaded
        }

        /// <summary>
        /// Response for 'episodes/downloaded'.
        /// Enlève le marquage d'un épisode comme téléchargé.
        /// </summary>
        public void DeleteEpisodeDownloaded(string id, string thetvdb_id) {
            // call http episodes/downloaded
        }

        /// <summary>
        /// Response for 'episodes/list'.
        /// Récupère la liste des épisodes à voir.
        /// </summary>
        public void EpisodeList(string subtitles, string limit, string showId, string userId) {
            // call http episodes/list
        }

        /// <summary>
        /// Response for 'episodes/note'.
        /// Note un épisode.
        /// </summary>
        public void EpisodeNote(string id, string thetvdb_id, string note) {
            // call http episodes/note
        }

        /// <summary>
        /// Response for 'episodes/note'.
        /// Supprime une note d'un épisode.
        /// </summary>
        public void DeleteEpisodeNote(string id, string thetvdb_id) {
            // call http episodes/note
        }

        /// <summary>
        /// Response for 'episodes/scraper'.
        /// Récupère les informations d'un épisode en fonction du nom de fichier
        /// </summary>
        public void EpisodeScraper(string file) {
            // call http episodes/scraper
        }

        /// <summary>
        /// Response for 'episodes/search'.
        /// Récupère les informations d'un épisode en fonction d'informations.
        /// </summary>
        public void EpisodeSearch(string show_id, string number, string subtitles) {
            // call http episodes/search
        }

        /// <summary>
        /// Response for 'episodes/watched'.
        /// Marque un épisode comme vu. Vous pouvez spécifier plusieurs épisodes en séparant les ID par une virgule.
        /// </summary>
        public void EpisodeWatched(string id, string thetvdb_id, string bulk, string delete, string note) {
            // call http episodes/watched
        }

        /// <summary>
        /// Response for 'episodes/watched'.
        /// Enlève le marquage d'un épisode comme vu.
        /// </summary>
        public void DeleteEpisodeWatched(string id, string thetvdb_id) {
            // call http episodes/watched
        }

        /// <summary>
        /// Response for 'friends/block'.
        /// Bloque un utilisateur.
        /// </summary>
        public void FriendBlock(string id) {
            // call http friends/block
        }

        /// <summary>
        /// Response for 'friends/block'.
        /// Supprime le blocage d'un utilisateur.
        /// </summary>
        public void DeleteFriendBlock(string id) {
            // call http friends/block
        }

        /// <summary>
        /// Response for 'friends/friend'.
        /// Ajoute un ami dans le compte de l'utilisateur.
        /// </summary>
        public void FriendFriend(string id) {
            // call http friends/friend
        }

        /// <summary>
        /// Response for 'friends/friend'.
        /// Supprime un ami du compte de l'utilisateur.
        /// </summary>
        public void DeleteFriendFriend(string id) {
            // call http friends/friend
        }

        /// <summary>
        /// Response for 'friends/list'.
        /// Récupère la liste des amis du membre.
        /// </summary>
        public void FriendList(string id, string blocked) {
            // call http friends/list
        }

        /// <summary>
        /// Response for 'friends/requests'.
        /// Récupère la liste des demandes envoyées par l'utilisateur.
        /// </summary>
        public void FriendRequest(string received) {
            // call http friends/requests
        }

        /// <summary>
        /// Response for 'members/access_token'.
        /// Récupère un token d'accès avec le code fourni par l'identification OAuth 2.
        /// </summary>
        public void MemberAccesToken(string client_id, string client_secret, string redirect_uri, string code) {
            // call http members/access_token
        }

        /// <summary>
        /// Response for 'members/auth'.
        /// Identification classique du membre.
        /// </summary>
        public void MemberAuth(string login, string password) {
            // call http members/auth
        }

        /// <summary>
        /// Response for 'members/avatar'.
        /// Uploade et remplace l'avatar de l'utilisateur identifié.
        /// </summary>
        public void MemberAvatar(string avatar) {
            // call http members/avatar
        }

        /// <summary>
        /// Response for 'members/avatar'.
        /// Supprime l'avatar de l'utilisateur identifié.
        /// </summary>
        public void DeleteMemberAvatar() {
            // call http members/avatar
        }

        /// <summary>
        /// Response for 'members/badges'.
        /// Affiche les badges du membre.
        /// </summary>
        public void MemberBadge(string id) {
            // call http members/badges
        }

        /// <summary>
        /// Response for 'members/destroy'.
        /// Détruit le token actif.
        /// </summary>
        public void MemberDestroy() {
            // call http members/destroy
        }

        /// <summary>
        /// Response for 'members/infos'.
        /// Renvoie les informations d'un membre, du membre identifié par défaut.
        /// </summary>
        public void MemberInfo(string id, string summary) {
            // call http members/infos
        }

        /// <summary>
        /// Response for 'members/is_active'.
        /// Vérifie que le token est actif.
        /// </summary>
        public void MemberIActive() {
            // call http members/is_active
        }

        /// <summary>
        /// Response for 'members/lost'.
        /// Envoie un e-mail pour réinitialiser le mot de passe.
        /// </summary>
        public void MemberLost(string find) {
            // call http members/lost
        }

        /// <summary>
        /// Response for 'members/notifications'.
        /// Affiche les dernières notifications du membre. Types : badge, banner, bugs, character, commentaire, dons, episode, facebook, film, forum, friend, message, quizz, recommend, site, subtitles, video.
        /// </summary>
        public void MemberNotification(string since_id, string number, string sort, string types, string auto_delete) {
            // call http members/notifications
        }

        /// <summary>
        /// Response for 'members/oauth'.
        /// Identification par OAuth.
        /// </summary>
        public void MemberOauth() {
            // call http members/oauth
        }

        /// <summary>
        /// Response for 'members/oauth'.
        /// Identification par OAuth. Renvoie l'utilisateur sur l'URL de callback que vous avez spécifiée dans votre compte avec le paramètre GET token.
        /// </summary>
        public void MemberOauth() {
            // call http members/oauth
        }

        /// <summary>
        /// Response for 'members/option'.
        /// Modifie une option de l'utilisateur.
        /// </summary>
        public void MemberOption(string name, string value) {
            // call http members/option
        }

        /// <summary>
        /// Response for 'members/options'.
        /// Récupère les options (sous-titres) du membre.
        /// </summary>
        public void MemberOption() {
            // call http members/options
        }

        /// <summary>
        /// Response for 'members/search'.
        /// Recherche des membres.
        /// </summary>
        public void MemberSearch(string login) {
            // call http members/search
        }

        /// <summary>
        /// Response for 'members/signup'.
        /// Crée un nouveau compte membre sur BetaSeries.
        /// </summary>
        public void MemberSignup(string login, string password, string email) {
            // call http members/signup
        }

        /// <summary>
        /// Response for 'members/sync'.
        /// Cherche les membres parmi les amis du compte.
        /// </summary>
        public void MemberSync(string mails[]) {
            // call http members/sync
        }

        /// <summary>
        /// Response for 'members/username'.
        /// Retourne les possibilités de noms d'utilisateur libres sur BetaSeries.
        /// </summary>
        public void MemberUsername(string username) {
            // call http members/username
        }

        /// <summary>
        /// Response for 'messages/discussion'.
        /// Récupère une discussion identifiée par l'ID du premier message.
        /// </summary>
        public Srk.BetaseriesApi.MessageDiscussion MessageDiscussion(string id) {
            // call http messages/discussion
        }

        /// <summary>
        /// Response for 'messages/inbox'.
        /// Récupère la boîte de réception du membre identifié, par pages de 20.
        /// </summary>
        public Srk.BetaseriesApi.MessageInbox MessageInbox(string page) {
            // call http messages/inbox
        }

        /// <summary>
        /// Response for 'messages/message'.
        /// Supprime un message que vous avez écrit.
        /// </summary>
        public Srk.BetaseriesApi.MessageMessage DeleteMessageMessage(string id) {
            // call http messages/message
        }

        /// <summary>
        /// Response for 'messages/message'.
        /// Envoie un message à un autre membre du site.
        /// </summary>
        public Srk.BetaseriesApi.MessageMessage MessageMessage(string to, string text, string title, string id) {
            // call http messages/message
        }

        /// <summary>
        /// Response for 'messages/read'.
        /// Marque un message comme lu.
        /// </summary>
        public Srk.BetaseriesApi.MessageRead MessageRead(string id) {
            // call http messages/read
        }

        /// <summary>
        /// Response for 'movies/list'.
        /// Affiche la liste de tous les films.
        /// </summary>
        public void MovyList(string start, string limit, string order) {
            // call http movies/list
        }

        /// <summary>
        /// Response for 'movies/member'.
        /// Affiche la liste de tous les films du membre.
        /// </summary>
        public void MovyMember(string state, string start, string limit, string order) {
            // call http movies/member
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Affiche les détails d'un film.
        /// </summary>
        public void MovyMovie(string id) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Ajoute ou met à jour le film dans les films du membre.
        /// </summary>
        public void MovyMovie(string id, string mail, string twitter, string state, string profile) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Supprime un film du compte membre.
        /// </summary>
        public void DeleteMovyMovie(string id) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/random'.
        /// Affiche un film au hasard.
        /// </summary>
        public void MovyRandom(string nb) {
            // call http movies/random
        }

        /// <summary>
        /// Response for 'movies/scraper'.
        /// Récupère les informations d'un film en fonction du nom de fichier
        /// </summary>
        public void MovyScraper(string file) {
            // call http movies/scraper
        }

        /// <summary>
        /// Response for 'movies/search'.
        /// Recherche un film par critères.
        /// </summary>
        public void MovySearch(string title, string order, string nbpp, string page) {
            // call http movies/search
        }

        /// <summary>
        /// Response for 'pictures/badges'.
        /// Retourne une image du badge (32x32).
        /// </summary>
        public void PictureBadge(string id) {
            // call http pictures/badges
        }

        /// <summary>
        /// Response for 'pictures/characters'.
        /// Retourne une image du personnage.
        /// </summary>
        public void PictureCharacter(string id, string width, string height) {
            // call http pictures/characters
        }

        /// <summary>
        /// Response for 'pictures/episodes'.
        /// Retourne une image de l'épisode.
        /// </summary>
        public void PictureEpisode(string id, string width, string height) {
            // call http pictures/episodes
        }

        /// <summary>
        /// Response for 'pictures/members'.
        /// Retourne une image du membre.
        /// </summary>
        public void PictureMember(string id, string width, string height) {
            // call http pictures/members
        }

        /// <summary>
        /// Response for 'pictures/movies'.
        /// Retourne une image du film.
        /// </summary>
        public void PictureMovy(string id, string width, string height) {
            // call http pictures/movies
        }

        /// <summary>
        /// Response for 'pictures/shows'.
        /// Retourne une image de la série.
        /// </summary>
        public void PictureShow(string id, string width, string height, string picked) {
            // call http pictures/shows
        }

        /// <summary>
        /// Response for 'planning/general'.
        /// Affiche tous les épisodes diffusés les 8 derniers jours jusqu'aux 8 prochains jours.
        /// </summary>
        public void PlanningGeneral(string date, string before, string after, string type) {
            // call http planning/general
        }

        /// <summary>
        /// Response for 'planning/incoming'.
        /// Affiche uniquement le premier épisode des prochaines séries qui vont être diffusées.
        /// </summary>
        public void PlanningIncoming() {
            // call http planning/incoming
        }

        /// <summary>
        /// Response for 'planning/member'.
        /// Affiche le planning du membre identifié ou d'un autre membre.
        /// </summary>
        public void PlanningMember(string id, string unseen, string month) {
            // call http planning/member
        }

        /// <summary>
        /// Response for 'shows/archive'.
        /// Archive une série dans le compte du membre.
        /// </summary>
        public void ShowArchive(string id, string thetvdb_id) {
            // call http shows/archive
        }

        /// <summary>
        /// Response for 'shows/archive'.
        /// Sort une série des archives du compte du membre.
        /// </summary>
        public void DeleteShowArchive(string id, string thetvdb_id) {
            // call http shows/archive
        }

        /// <summary>
        /// Response for 'shows/characters'.
        /// Récupère les personnages de la série, ajoutés par les membres de BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.ShowCharacter ShowCharacter(string id, string thetvdb_id) {
            // call http shows/characters
        }

        /// <summary>
        /// Response for 'shows/display'.
        /// Affiche les informations d'une série.
        /// </summary>
        public void ShowDisplay(string id, string thetvdb_id) {
            // call http shows/display
        }

        /// <summary>
        /// Response for 'shows/episodes'.
        /// Affiche les épisodes d'une série.
        /// </summary>
        public void ShowEpisode(string id, string thetvdb_id, string season, string episode, string subtitles) {
            // call http shows/episodes
        }

        /// <summary>
        /// Response for 'shows/favorite'.
        /// Ajoute une série favorite sur le profil du membre identifié.
        /// </summary>
        public void ShowFavorite(string id) {
            // call http shows/favorite
        }

        /// <summary>
        /// Response for 'shows/favorite'.
        /// Supprime une série favorite du profil du membre identifié.
        /// </summary>
        public void DeleteShowFavorite(string id) {
            // call http shows/favorite
        }

        /// <summary>
        /// Response for 'shows/favorites'.
        /// Récupère les séries favorites du membre.
        /// </summary>
        public void ShowFavorite(string id) {
            // call http shows/favorites
        }

        /// <summary>
        /// Response for 'shows/list'.
        /// Affiche la liste de toutes les séries.
        /// </summary>
        public void ShowList(string order, string since) {
            // call http shows/list
        }

        /// <summary>
        /// Response for 'shows/note'.
        /// Note une série.
        /// </summary>
        public void ShowNote(string id, string thetvdb_id, string note) {
            // call http shows/note
        }

        /// <summary>
        /// Response for 'shows/note'.
        /// Supprime une note d'une série.
        /// </summary>
        public void DeleteShowNote(string id, string thetvdb_id) {
            // call http shows/note
        }

        /// <summary>
        /// Response for 'shows/pictures'.
        /// Récupère les images de la série, ajoutées par les membres de BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.ShowPicture ShowPicture(string id, string thetvdb_id) {
            // call http shows/pictures
        }

        /// <summary>
        /// Response for 'shows/random'.
        /// Affiche une série au hasard.
        /// </summary>
        public void ShowRandom(string nb, string summary) {
            // call http shows/random
        }

        /// <summary>
        /// Response for 'shows/recommendation'.
        /// Créer une recommandation d'une série d'un membre pour un ami.
        /// </summary>
        public void ShowRecommendation(string id, string thetvdb_id, string to, string comments) {
            // call http shows/recommendation
        }

        /// <summary>
        /// Response for 'shows/recommendation'.
        /// Supprime une recommandation d'une série envoyée ou reçue.
        /// </summary>
        public void DeleteShowRecommendation(string id) {
            // call http shows/recommendation
        }

        /// <summary>
        /// Response for 'shows/recommendations'.
        /// Récupère les recommandations reçues par l'utilisateur identifié.
        /// </summary>
        public void ShowRecommendation() {
            // call http shows/recommendations
        }

        /// <summary>
        /// Response for 'shows/search'.
        /// Recherche une série.
        /// </summary>
        public void ShowSearch(string title, string summary, string order, string nbpp, string page) {
            // call http shows/search
        }

        /// <summary>
        /// Response for 'shows/show'.
        /// Ajoute une série dans le compte du membre.
        /// </summary>
        public void ShowShow(string id, string thetvdb_id, string episode_id) {
            // call http shows/show
        }

        /// <summary>
        /// Response for 'shows/show'.
        /// Supprime une série du compte du membre.
        /// </summary>
        public void DeleteShowShow(string id, string thetvdb_id) {
            // call http shows/show
        }

        /// <summary>
        /// Response for 'shows/similars'.
        /// Récupère les séries marquées similaires par les membres de BetaSeries.
        /// </summary>
        public void ShowSimilar(string id, string thetvdb_id) {
            // call http shows/similars
        }

        /// <summary>
        /// Response for 'shows/videos'.
        /// Récupère les vidéos associées à la série par les membres de BetaSeries.
        /// </summary>
        public void ShowVideo(string id, string thetvdb_id) {
            // call http shows/videos
        }

        /// <summary>
        /// Response for 'subtitles/episode'.
        /// Affiche les sous-titres pour un épisode donné.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleEpisode SubtitleEpisode(string id, string language) {
            // call http subtitles/episode
        }

        /// <summary>
        /// Response for 'subtitles/last'.
        /// Affiche les derniers sous-titres récupérés par BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleLast SubtitleLast(string number, string language) {
            // call http subtitles/last
        }

        /// <summary>
        /// Response for 'subtitles/report'.
        /// Reporte des sous-titres comme incorrects pour se faire supprimer de la liste.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleReport SubtitleReport(string id, string reason) {
            // call http subtitles/report
        }

        /// <summary>
        /// Response for 'subtitles/show'.
        /// Affiche les sous-titres pour une série donnée.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleShow SubtitleShow(string id, string language) {
            // call http subtitles/show
        }

        /// <summary>
        /// Response for 'timeline/friends'.
        /// Affiche les derniers évènements des amis du membre identifié.
        /// </summary>
        public void TimelineFriend(string nbpp, string since_id, string types) {
            // call http timeline/friends
        }

        /// <summary>
        /// Response for 'timeline/home'.
        /// Affiche les derniers évènements du site.
        /// </summary>
        public void TimelineHome(string nbpp, string since_id, string types) {
            // call http timeline/home
        }

        /// <summary>
        /// Response for 'timeline/member'.
        /// Affiche les derniers évènements du membre spécifié.
        /// </summary>
        public void TimelineMember(string id, string nbpp, string since_id, string types) {
            // call http timeline/member
        }
    }
    public partial class BetaseriesPlanningClient {
        private readonly BetaseriesClient client;

        public BetaseriesPlanningClient(BetaseriesClient client) {
            this.client = client;
        }


        /// <summary>
        /// Response for 'comments/comment'.
        /// Envoie un commentaire pour l'élément spécifié.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment CommentComment(string type, string id, string text, string in_reply_to) {
            // call http comments/comment
        }

        /// <summary>
        /// Response for 'comments/comment'.
        /// Supprime un commentaire de l'utilisateur identifié.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment DeleteCommentComment(string id) {
            // call http comments/comment
        }

        /// <summary>
        /// Response for 'comments/comments'.
        /// Récupère les commentaires pour un élément donné.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment CommentComment(string type, string id, string nbpp, string since_id, string order, string replies) {
            // call http comments/comments
        }

        /// <summary>
        /// Response for 'comments/replies'.
        /// Récupère les réponses d'un commentaire donné.
        /// </summary>
        public Srk.BetaseriesApi.CommentReply CommentReply(string id, string order) {
            // call http comments/replies
        }

        /// <summary>
        /// Response for 'comments/subscription'.
        /// Inscrit le membre aux notifications e-mail pour l'élément donné.
        /// </summary>
        public void CommentSubscription(string type, string id) {
            // call http comments/subscription
        }

        /// <summary>
        /// Response for 'comments/subscription'.
        /// Désinscrit le membre aux notifications e-mail pour l'élément donné.
        /// </summary>
        public void DeleteCommentSubscription(string type, string id) {
            // call http comments/subscription
        }

        /// <summary>
        /// Response for 'episodes/display'.
        /// Affiche les informations d'un épisode.
        /// </summary>
        public void EpisodeDisplay(string id, string thetvdb_id, string subtitles) {
            // call http episodes/display
        }

        /// <summary>
        /// Response for 'episodes/downloaded'.
        /// Marque un épisode comme téléchargé.
        /// </summary>
        public void EpisodeDownloaded(string id, string thetvdb_id) {
            // call http episodes/downloaded
        }

        /// <summary>
        /// Response for 'episodes/downloaded'.
        /// Enlève le marquage d'un épisode comme téléchargé.
        /// </summary>
        public void DeleteEpisodeDownloaded(string id, string thetvdb_id) {
            // call http episodes/downloaded
        }

        /// <summary>
        /// Response for 'episodes/list'.
        /// Récupère la liste des épisodes à voir.
        /// </summary>
        public void EpisodeList(string subtitles, string limit, string showId, string userId) {
            // call http episodes/list
        }

        /// <summary>
        /// Response for 'episodes/note'.
        /// Note un épisode.
        /// </summary>
        public void EpisodeNote(string id, string thetvdb_id, string note) {
            // call http episodes/note
        }

        /// <summary>
        /// Response for 'episodes/note'.
        /// Supprime une note d'un épisode.
        /// </summary>
        public void DeleteEpisodeNote(string id, string thetvdb_id) {
            // call http episodes/note
        }

        /// <summary>
        /// Response for 'episodes/scraper'.
        /// Récupère les informations d'un épisode en fonction du nom de fichier
        /// </summary>
        public void EpisodeScraper(string file) {
            // call http episodes/scraper
        }

        /// <summary>
        /// Response for 'episodes/search'.
        /// Récupère les informations d'un épisode en fonction d'informations.
        /// </summary>
        public void EpisodeSearch(string show_id, string number, string subtitles) {
            // call http episodes/search
        }

        /// <summary>
        /// Response for 'episodes/watched'.
        /// Marque un épisode comme vu. Vous pouvez spécifier plusieurs épisodes en séparant les ID par une virgule.
        /// </summary>
        public void EpisodeWatched(string id, string thetvdb_id, string bulk, string delete, string note) {
            // call http episodes/watched
        }

        /// <summary>
        /// Response for 'episodes/watched'.
        /// Enlève le marquage d'un épisode comme vu.
        /// </summary>
        public void DeleteEpisodeWatched(string id, string thetvdb_id) {
            // call http episodes/watched
        }

        /// <summary>
        /// Response for 'friends/block'.
        /// Bloque un utilisateur.
        /// </summary>
        public void FriendBlock(string id) {
            // call http friends/block
        }

        /// <summary>
        /// Response for 'friends/block'.
        /// Supprime le blocage d'un utilisateur.
        /// </summary>
        public void DeleteFriendBlock(string id) {
            // call http friends/block
        }

        /// <summary>
        /// Response for 'friends/friend'.
        /// Ajoute un ami dans le compte de l'utilisateur.
        /// </summary>
        public void FriendFriend(string id) {
            // call http friends/friend
        }

        /// <summary>
        /// Response for 'friends/friend'.
        /// Supprime un ami du compte de l'utilisateur.
        /// </summary>
        public void DeleteFriendFriend(string id) {
            // call http friends/friend
        }

        /// <summary>
        /// Response for 'friends/list'.
        /// Récupère la liste des amis du membre.
        /// </summary>
        public void FriendList(string id, string blocked) {
            // call http friends/list
        }

        /// <summary>
        /// Response for 'friends/requests'.
        /// Récupère la liste des demandes envoyées par l'utilisateur.
        /// </summary>
        public void FriendRequest(string received) {
            // call http friends/requests
        }

        /// <summary>
        /// Response for 'members/access_token'.
        /// Récupère un token d'accès avec le code fourni par l'identification OAuth 2.
        /// </summary>
        public void MemberAccesToken(string client_id, string client_secret, string redirect_uri, string code) {
            // call http members/access_token
        }

        /// <summary>
        /// Response for 'members/auth'.
        /// Identification classique du membre.
        /// </summary>
        public void MemberAuth(string login, string password) {
            // call http members/auth
        }

        /// <summary>
        /// Response for 'members/avatar'.
        /// Uploade et remplace l'avatar de l'utilisateur identifié.
        /// </summary>
        public void MemberAvatar(string avatar) {
            // call http members/avatar
        }

        /// <summary>
        /// Response for 'members/avatar'.
        /// Supprime l'avatar de l'utilisateur identifié.
        /// </summary>
        public void DeleteMemberAvatar() {
            // call http members/avatar
        }

        /// <summary>
        /// Response for 'members/badges'.
        /// Affiche les badges du membre.
        /// </summary>
        public void MemberBadge(string id) {
            // call http members/badges
        }

        /// <summary>
        /// Response for 'members/destroy'.
        /// Détruit le token actif.
        /// </summary>
        public void MemberDestroy() {
            // call http members/destroy
        }

        /// <summary>
        /// Response for 'members/infos'.
        /// Renvoie les informations d'un membre, du membre identifié par défaut.
        /// </summary>
        public void MemberInfo(string id, string summary) {
            // call http members/infos
        }

        /// <summary>
        /// Response for 'members/is_active'.
        /// Vérifie que le token est actif.
        /// </summary>
        public void MemberIActive() {
            // call http members/is_active
        }

        /// <summary>
        /// Response for 'members/lost'.
        /// Envoie un e-mail pour réinitialiser le mot de passe.
        /// </summary>
        public void MemberLost(string find) {
            // call http members/lost
        }

        /// <summary>
        /// Response for 'members/notifications'.
        /// Affiche les dernières notifications du membre. Types : badge, banner, bugs, character, commentaire, dons, episode, facebook, film, forum, friend, message, quizz, recommend, site, subtitles, video.
        /// </summary>
        public void MemberNotification(string since_id, string number, string sort, string types, string auto_delete) {
            // call http members/notifications
        }

        /// <summary>
        /// Response for 'members/oauth'.
        /// Identification par OAuth.
        /// </summary>
        public void MemberOauth() {
            // call http members/oauth
        }

        /// <summary>
        /// Response for 'members/oauth'.
        /// Identification par OAuth. Renvoie l'utilisateur sur l'URL de callback que vous avez spécifiée dans votre compte avec le paramètre GET token.
        /// </summary>
        public void MemberOauth() {
            // call http members/oauth
        }

        /// <summary>
        /// Response for 'members/option'.
        /// Modifie une option de l'utilisateur.
        /// </summary>
        public void MemberOption(string name, string value) {
            // call http members/option
        }

        /// <summary>
        /// Response for 'members/options'.
        /// Récupère les options (sous-titres) du membre.
        /// </summary>
        public void MemberOption() {
            // call http members/options
        }

        /// <summary>
        /// Response for 'members/search'.
        /// Recherche des membres.
        /// </summary>
        public void MemberSearch(string login) {
            // call http members/search
        }

        /// <summary>
        /// Response for 'members/signup'.
        /// Crée un nouveau compte membre sur BetaSeries.
        /// </summary>
        public void MemberSignup(string login, string password, string email) {
            // call http members/signup
        }

        /// <summary>
        /// Response for 'members/sync'.
        /// Cherche les membres parmi les amis du compte.
        /// </summary>
        public void MemberSync(string mails[]) {
            // call http members/sync
        }

        /// <summary>
        /// Response for 'members/username'.
        /// Retourne les possibilités de noms d'utilisateur libres sur BetaSeries.
        /// </summary>
        public void MemberUsername(string username) {
            // call http members/username
        }

        /// <summary>
        /// Response for 'messages/discussion'.
        /// Récupère une discussion identifiée par l'ID du premier message.
        /// </summary>
        public Srk.BetaseriesApi.MessageDiscussion MessageDiscussion(string id) {
            // call http messages/discussion
        }

        /// <summary>
        /// Response for 'messages/inbox'.
        /// Récupère la boîte de réception du membre identifié, par pages de 20.
        /// </summary>
        public Srk.BetaseriesApi.MessageInbox MessageInbox(string page) {
            // call http messages/inbox
        }

        /// <summary>
        /// Response for 'messages/message'.
        /// Supprime un message que vous avez écrit.
        /// </summary>
        public Srk.BetaseriesApi.MessageMessage DeleteMessageMessage(string id) {
            // call http messages/message
        }

        /// <summary>
        /// Response for 'messages/message'.
        /// Envoie un message à un autre membre du site.
        /// </summary>
        public Srk.BetaseriesApi.MessageMessage MessageMessage(string to, string text, string title, string id) {
            // call http messages/message
        }

        /// <summary>
        /// Response for 'messages/read'.
        /// Marque un message comme lu.
        /// </summary>
        public Srk.BetaseriesApi.MessageRead MessageRead(string id) {
            // call http messages/read
        }

        /// <summary>
        /// Response for 'movies/list'.
        /// Affiche la liste de tous les films.
        /// </summary>
        public void MovyList(string start, string limit, string order) {
            // call http movies/list
        }

        /// <summary>
        /// Response for 'movies/member'.
        /// Affiche la liste de tous les films du membre.
        /// </summary>
        public void MovyMember(string state, string start, string limit, string order) {
            // call http movies/member
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Affiche les détails d'un film.
        /// </summary>
        public void MovyMovie(string id) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Ajoute ou met à jour le film dans les films du membre.
        /// </summary>
        public void MovyMovie(string id, string mail, string twitter, string state, string profile) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Supprime un film du compte membre.
        /// </summary>
        public void DeleteMovyMovie(string id) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/random'.
        /// Affiche un film au hasard.
        /// </summary>
        public void MovyRandom(string nb) {
            // call http movies/random
        }

        /// <summary>
        /// Response for 'movies/scraper'.
        /// Récupère les informations d'un film en fonction du nom de fichier
        /// </summary>
        public void MovyScraper(string file) {
            // call http movies/scraper
        }

        /// <summary>
        /// Response for 'movies/search'.
        /// Recherche un film par critères.
        /// </summary>
        public void MovySearch(string title, string order, string nbpp, string page) {
            // call http movies/search
        }

        /// <summary>
        /// Response for 'pictures/badges'.
        /// Retourne une image du badge (32x32).
        /// </summary>
        public void PictureBadge(string id) {
            // call http pictures/badges
        }

        /// <summary>
        /// Response for 'pictures/characters'.
        /// Retourne une image du personnage.
        /// </summary>
        public void PictureCharacter(string id, string width, string height) {
            // call http pictures/characters
        }

        /// <summary>
        /// Response for 'pictures/episodes'.
        /// Retourne une image de l'épisode.
        /// </summary>
        public void PictureEpisode(string id, string width, string height) {
            // call http pictures/episodes
        }

        /// <summary>
        /// Response for 'pictures/members'.
        /// Retourne une image du membre.
        /// </summary>
        public void PictureMember(string id, string width, string height) {
            // call http pictures/members
        }

        /// <summary>
        /// Response for 'pictures/movies'.
        /// Retourne une image du film.
        /// </summary>
        public void PictureMovy(string id, string width, string height) {
            // call http pictures/movies
        }

        /// <summary>
        /// Response for 'pictures/shows'.
        /// Retourne une image de la série.
        /// </summary>
        public void PictureShow(string id, string width, string height, string picked) {
            // call http pictures/shows
        }

        /// <summary>
        /// Response for 'planning/general'.
        /// Affiche tous les épisodes diffusés les 8 derniers jours jusqu'aux 8 prochains jours.
        /// </summary>
        public void PlanningGeneral(string date, string before, string after, string type) {
            // call http planning/general
        }

        /// <summary>
        /// Response for 'planning/incoming'.
        /// Affiche uniquement le premier épisode des prochaines séries qui vont être diffusées.
        /// </summary>
        public void PlanningIncoming() {
            // call http planning/incoming
        }

        /// <summary>
        /// Response for 'planning/member'.
        /// Affiche le planning du membre identifié ou d'un autre membre.
        /// </summary>
        public void PlanningMember(string id, string unseen, string month) {
            // call http planning/member
        }

        /// <summary>
        /// Response for 'shows/archive'.
        /// Archive une série dans le compte du membre.
        /// </summary>
        public void ShowArchive(string id, string thetvdb_id) {
            // call http shows/archive
        }

        /// <summary>
        /// Response for 'shows/archive'.
        /// Sort une série des archives du compte du membre.
        /// </summary>
        public void DeleteShowArchive(string id, string thetvdb_id) {
            // call http shows/archive
        }

        /// <summary>
        /// Response for 'shows/characters'.
        /// Récupère les personnages de la série, ajoutés par les membres de BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.ShowCharacter ShowCharacter(string id, string thetvdb_id) {
            // call http shows/characters
        }

        /// <summary>
        /// Response for 'shows/display'.
        /// Affiche les informations d'une série.
        /// </summary>
        public void ShowDisplay(string id, string thetvdb_id) {
            // call http shows/display
        }

        /// <summary>
        /// Response for 'shows/episodes'.
        /// Affiche les épisodes d'une série.
        /// </summary>
        public void ShowEpisode(string id, string thetvdb_id, string season, string episode, string subtitles) {
            // call http shows/episodes
        }

        /// <summary>
        /// Response for 'shows/favorite'.
        /// Ajoute une série favorite sur le profil du membre identifié.
        /// </summary>
        public void ShowFavorite(string id) {
            // call http shows/favorite
        }

        /// <summary>
        /// Response for 'shows/favorite'.
        /// Supprime une série favorite du profil du membre identifié.
        /// </summary>
        public void DeleteShowFavorite(string id) {
            // call http shows/favorite
        }

        /// <summary>
        /// Response for 'shows/favorites'.
        /// Récupère les séries favorites du membre.
        /// </summary>
        public void ShowFavorite(string id) {
            // call http shows/favorites
        }

        /// <summary>
        /// Response for 'shows/list'.
        /// Affiche la liste de toutes les séries.
        /// </summary>
        public void ShowList(string order, string since) {
            // call http shows/list
        }

        /// <summary>
        /// Response for 'shows/note'.
        /// Note une série.
        /// </summary>
        public void ShowNote(string id, string thetvdb_id, string note) {
            // call http shows/note
        }

        /// <summary>
        /// Response for 'shows/note'.
        /// Supprime une note d'une série.
        /// </summary>
        public void DeleteShowNote(string id, string thetvdb_id) {
            // call http shows/note
        }

        /// <summary>
        /// Response for 'shows/pictures'.
        /// Récupère les images de la série, ajoutées par les membres de BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.ShowPicture ShowPicture(string id, string thetvdb_id) {
            // call http shows/pictures
        }

        /// <summary>
        /// Response for 'shows/random'.
        /// Affiche une série au hasard.
        /// </summary>
        public void ShowRandom(string nb, string summary) {
            // call http shows/random
        }

        /// <summary>
        /// Response for 'shows/recommendation'.
        /// Créer une recommandation d'une série d'un membre pour un ami.
        /// </summary>
        public void ShowRecommendation(string id, string thetvdb_id, string to, string comments) {
            // call http shows/recommendation
        }

        /// <summary>
        /// Response for 'shows/recommendation'.
        /// Supprime une recommandation d'une série envoyée ou reçue.
        /// </summary>
        public void DeleteShowRecommendation(string id) {
            // call http shows/recommendation
        }

        /// <summary>
        /// Response for 'shows/recommendations'.
        /// Récupère les recommandations reçues par l'utilisateur identifié.
        /// </summary>
        public void ShowRecommendation() {
            // call http shows/recommendations
        }

        /// <summary>
        /// Response for 'shows/search'.
        /// Recherche une série.
        /// </summary>
        public void ShowSearch(string title, string summary, string order, string nbpp, string page) {
            // call http shows/search
        }

        /// <summary>
        /// Response for 'shows/show'.
        /// Ajoute une série dans le compte du membre.
        /// </summary>
        public void ShowShow(string id, string thetvdb_id, string episode_id) {
            // call http shows/show
        }

        /// <summary>
        /// Response for 'shows/show'.
        /// Supprime une série du compte du membre.
        /// </summary>
        public void DeleteShowShow(string id, string thetvdb_id) {
            // call http shows/show
        }

        /// <summary>
        /// Response for 'shows/similars'.
        /// Récupère les séries marquées similaires par les membres de BetaSeries.
        /// </summary>
        public void ShowSimilar(string id, string thetvdb_id) {
            // call http shows/similars
        }

        /// <summary>
        /// Response for 'shows/videos'.
        /// Récupère les vidéos associées à la série par les membres de BetaSeries.
        /// </summary>
        public void ShowVideo(string id, string thetvdb_id) {
            // call http shows/videos
        }

        /// <summary>
        /// Response for 'subtitles/episode'.
        /// Affiche les sous-titres pour un épisode donné.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleEpisode SubtitleEpisode(string id, string language) {
            // call http subtitles/episode
        }

        /// <summary>
        /// Response for 'subtitles/last'.
        /// Affiche les derniers sous-titres récupérés par BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleLast SubtitleLast(string number, string language) {
            // call http subtitles/last
        }

        /// <summary>
        /// Response for 'subtitles/report'.
        /// Reporte des sous-titres comme incorrects pour se faire supprimer de la liste.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleReport SubtitleReport(string id, string reason) {
            // call http subtitles/report
        }

        /// <summary>
        /// Response for 'subtitles/show'.
        /// Affiche les sous-titres pour une série donnée.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleShow SubtitleShow(string id, string language) {
            // call http subtitles/show
        }

        /// <summary>
        /// Response for 'timeline/friends'.
        /// Affiche les derniers évènements des amis du membre identifié.
        /// </summary>
        public void TimelineFriend(string nbpp, string since_id, string types) {
            // call http timeline/friends
        }

        /// <summary>
        /// Response for 'timeline/home'.
        /// Affiche les derniers évènements du site.
        /// </summary>
        public void TimelineHome(string nbpp, string since_id, string types) {
            // call http timeline/home
        }

        /// <summary>
        /// Response for 'timeline/member'.
        /// Affiche les derniers évènements du membre spécifié.
        /// </summary>
        public void TimelineMember(string id, string nbpp, string since_id, string types) {
            // call http timeline/member
        }
    }
    public partial class BetaseriesShowsClient {
        private readonly BetaseriesClient client;

        public BetaseriesShowsClient(BetaseriesClient client) {
            this.client = client;
        }


        /// <summary>
        /// Response for 'comments/comment'.
        /// Envoie un commentaire pour l'élément spécifié.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment CommentComment(string type, string id, string text, string in_reply_to) {
            // call http comments/comment
        }

        /// <summary>
        /// Response for 'comments/comment'.
        /// Supprime un commentaire de l'utilisateur identifié.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment DeleteCommentComment(string id) {
            // call http comments/comment
        }

        /// <summary>
        /// Response for 'comments/comments'.
        /// Récupère les commentaires pour un élément donné.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment CommentComment(string type, string id, string nbpp, string since_id, string order, string replies) {
            // call http comments/comments
        }

        /// <summary>
        /// Response for 'comments/replies'.
        /// Récupère les réponses d'un commentaire donné.
        /// </summary>
        public Srk.BetaseriesApi.CommentReply CommentReply(string id, string order) {
            // call http comments/replies
        }

        /// <summary>
        /// Response for 'comments/subscription'.
        /// Inscrit le membre aux notifications e-mail pour l'élément donné.
        /// </summary>
        public void CommentSubscription(string type, string id) {
            // call http comments/subscription
        }

        /// <summary>
        /// Response for 'comments/subscription'.
        /// Désinscrit le membre aux notifications e-mail pour l'élément donné.
        /// </summary>
        public void DeleteCommentSubscription(string type, string id) {
            // call http comments/subscription
        }

        /// <summary>
        /// Response for 'episodes/display'.
        /// Affiche les informations d'un épisode.
        /// </summary>
        public void EpisodeDisplay(string id, string thetvdb_id, string subtitles) {
            // call http episodes/display
        }

        /// <summary>
        /// Response for 'episodes/downloaded'.
        /// Marque un épisode comme téléchargé.
        /// </summary>
        public void EpisodeDownloaded(string id, string thetvdb_id) {
            // call http episodes/downloaded
        }

        /// <summary>
        /// Response for 'episodes/downloaded'.
        /// Enlève le marquage d'un épisode comme téléchargé.
        /// </summary>
        public void DeleteEpisodeDownloaded(string id, string thetvdb_id) {
            // call http episodes/downloaded
        }

        /// <summary>
        /// Response for 'episodes/list'.
        /// Récupère la liste des épisodes à voir.
        /// </summary>
        public void EpisodeList(string subtitles, string limit, string showId, string userId) {
            // call http episodes/list
        }

        /// <summary>
        /// Response for 'episodes/note'.
        /// Note un épisode.
        /// </summary>
        public void EpisodeNote(string id, string thetvdb_id, string note) {
            // call http episodes/note
        }

        /// <summary>
        /// Response for 'episodes/note'.
        /// Supprime une note d'un épisode.
        /// </summary>
        public void DeleteEpisodeNote(string id, string thetvdb_id) {
            // call http episodes/note
        }

        /// <summary>
        /// Response for 'episodes/scraper'.
        /// Récupère les informations d'un épisode en fonction du nom de fichier
        /// </summary>
        public void EpisodeScraper(string file) {
            // call http episodes/scraper
        }

        /// <summary>
        /// Response for 'episodes/search'.
        /// Récupère les informations d'un épisode en fonction d'informations.
        /// </summary>
        public void EpisodeSearch(string show_id, string number, string subtitles) {
            // call http episodes/search
        }

        /// <summary>
        /// Response for 'episodes/watched'.
        /// Marque un épisode comme vu. Vous pouvez spécifier plusieurs épisodes en séparant les ID par une virgule.
        /// </summary>
        public void EpisodeWatched(string id, string thetvdb_id, string bulk, string delete, string note) {
            // call http episodes/watched
        }

        /// <summary>
        /// Response for 'episodes/watched'.
        /// Enlève le marquage d'un épisode comme vu.
        /// </summary>
        public void DeleteEpisodeWatched(string id, string thetvdb_id) {
            // call http episodes/watched
        }

        /// <summary>
        /// Response for 'friends/block'.
        /// Bloque un utilisateur.
        /// </summary>
        public void FriendBlock(string id) {
            // call http friends/block
        }

        /// <summary>
        /// Response for 'friends/block'.
        /// Supprime le blocage d'un utilisateur.
        /// </summary>
        public void DeleteFriendBlock(string id) {
            // call http friends/block
        }

        /// <summary>
        /// Response for 'friends/friend'.
        /// Ajoute un ami dans le compte de l'utilisateur.
        /// </summary>
        public void FriendFriend(string id) {
            // call http friends/friend
        }

        /// <summary>
        /// Response for 'friends/friend'.
        /// Supprime un ami du compte de l'utilisateur.
        /// </summary>
        public void DeleteFriendFriend(string id) {
            // call http friends/friend
        }

        /// <summary>
        /// Response for 'friends/list'.
        /// Récupère la liste des amis du membre.
        /// </summary>
        public void FriendList(string id, string blocked) {
            // call http friends/list
        }

        /// <summary>
        /// Response for 'friends/requests'.
        /// Récupère la liste des demandes envoyées par l'utilisateur.
        /// </summary>
        public void FriendRequest(string received) {
            // call http friends/requests
        }

        /// <summary>
        /// Response for 'members/access_token'.
        /// Récupère un token d'accès avec le code fourni par l'identification OAuth 2.
        /// </summary>
        public void MemberAccesToken(string client_id, string client_secret, string redirect_uri, string code) {
            // call http members/access_token
        }

        /// <summary>
        /// Response for 'members/auth'.
        /// Identification classique du membre.
        /// </summary>
        public void MemberAuth(string login, string password) {
            // call http members/auth
        }

        /// <summary>
        /// Response for 'members/avatar'.
        /// Uploade et remplace l'avatar de l'utilisateur identifié.
        /// </summary>
        public void MemberAvatar(string avatar) {
            // call http members/avatar
        }

        /// <summary>
        /// Response for 'members/avatar'.
        /// Supprime l'avatar de l'utilisateur identifié.
        /// </summary>
        public void DeleteMemberAvatar() {
            // call http members/avatar
        }

        /// <summary>
        /// Response for 'members/badges'.
        /// Affiche les badges du membre.
        /// </summary>
        public void MemberBadge(string id) {
            // call http members/badges
        }

        /// <summary>
        /// Response for 'members/destroy'.
        /// Détruit le token actif.
        /// </summary>
        public void MemberDestroy() {
            // call http members/destroy
        }

        /// <summary>
        /// Response for 'members/infos'.
        /// Renvoie les informations d'un membre, du membre identifié par défaut.
        /// </summary>
        public void MemberInfo(string id, string summary) {
            // call http members/infos
        }

        /// <summary>
        /// Response for 'members/is_active'.
        /// Vérifie que le token est actif.
        /// </summary>
        public void MemberIActive() {
            // call http members/is_active
        }

        /// <summary>
        /// Response for 'members/lost'.
        /// Envoie un e-mail pour réinitialiser le mot de passe.
        /// </summary>
        public void MemberLost(string find) {
            // call http members/lost
        }

        /// <summary>
        /// Response for 'members/notifications'.
        /// Affiche les dernières notifications du membre. Types : badge, banner, bugs, character, commentaire, dons, episode, facebook, film, forum, friend, message, quizz, recommend, site, subtitles, video.
        /// </summary>
        public void MemberNotification(string since_id, string number, string sort, string types, string auto_delete) {
            // call http members/notifications
        }

        /// <summary>
        /// Response for 'members/oauth'.
        /// Identification par OAuth.
        /// </summary>
        public void MemberOauth() {
            // call http members/oauth
        }

        /// <summary>
        /// Response for 'members/oauth'.
        /// Identification par OAuth. Renvoie l'utilisateur sur l'URL de callback que vous avez spécifiée dans votre compte avec le paramètre GET token.
        /// </summary>
        public void MemberOauth() {
            // call http members/oauth
        }

        /// <summary>
        /// Response for 'members/option'.
        /// Modifie une option de l'utilisateur.
        /// </summary>
        public void MemberOption(string name, string value) {
            // call http members/option
        }

        /// <summary>
        /// Response for 'members/options'.
        /// Récupère les options (sous-titres) du membre.
        /// </summary>
        public void MemberOption() {
            // call http members/options
        }

        /// <summary>
        /// Response for 'members/search'.
        /// Recherche des membres.
        /// </summary>
        public void MemberSearch(string login) {
            // call http members/search
        }

        /// <summary>
        /// Response for 'members/signup'.
        /// Crée un nouveau compte membre sur BetaSeries.
        /// </summary>
        public void MemberSignup(string login, string password, string email) {
            // call http members/signup
        }

        /// <summary>
        /// Response for 'members/sync'.
        /// Cherche les membres parmi les amis du compte.
        /// </summary>
        public void MemberSync(string mails[]) {
            // call http members/sync
        }

        /// <summary>
        /// Response for 'members/username'.
        /// Retourne les possibilités de noms d'utilisateur libres sur BetaSeries.
        /// </summary>
        public void MemberUsername(string username) {
            // call http members/username
        }

        /// <summary>
        /// Response for 'messages/discussion'.
        /// Récupère une discussion identifiée par l'ID du premier message.
        /// </summary>
        public Srk.BetaseriesApi.MessageDiscussion MessageDiscussion(string id) {
            // call http messages/discussion
        }

        /// <summary>
        /// Response for 'messages/inbox'.
        /// Récupère la boîte de réception du membre identifié, par pages de 20.
        /// </summary>
        public Srk.BetaseriesApi.MessageInbox MessageInbox(string page) {
            // call http messages/inbox
        }

        /// <summary>
        /// Response for 'messages/message'.
        /// Supprime un message que vous avez écrit.
        /// </summary>
        public Srk.BetaseriesApi.MessageMessage DeleteMessageMessage(string id) {
            // call http messages/message
        }

        /// <summary>
        /// Response for 'messages/message'.
        /// Envoie un message à un autre membre du site.
        /// </summary>
        public Srk.BetaseriesApi.MessageMessage MessageMessage(string to, string text, string title, string id) {
            // call http messages/message
        }

        /// <summary>
        /// Response for 'messages/read'.
        /// Marque un message comme lu.
        /// </summary>
        public Srk.BetaseriesApi.MessageRead MessageRead(string id) {
            // call http messages/read
        }

        /// <summary>
        /// Response for 'movies/list'.
        /// Affiche la liste de tous les films.
        /// </summary>
        public void MovyList(string start, string limit, string order) {
            // call http movies/list
        }

        /// <summary>
        /// Response for 'movies/member'.
        /// Affiche la liste de tous les films du membre.
        /// </summary>
        public void MovyMember(string state, string start, string limit, string order) {
            // call http movies/member
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Affiche les détails d'un film.
        /// </summary>
        public void MovyMovie(string id) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Ajoute ou met à jour le film dans les films du membre.
        /// </summary>
        public void MovyMovie(string id, string mail, string twitter, string state, string profile) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Supprime un film du compte membre.
        /// </summary>
        public void DeleteMovyMovie(string id) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/random'.
        /// Affiche un film au hasard.
        /// </summary>
        public void MovyRandom(string nb) {
            // call http movies/random
        }

        /// <summary>
        /// Response for 'movies/scraper'.
        /// Récupère les informations d'un film en fonction du nom de fichier
        /// </summary>
        public void MovyScraper(string file) {
            // call http movies/scraper
        }

        /// <summary>
        /// Response for 'movies/search'.
        /// Recherche un film par critères.
        /// </summary>
        public void MovySearch(string title, string order, string nbpp, string page) {
            // call http movies/search
        }

        /// <summary>
        /// Response for 'pictures/badges'.
        /// Retourne une image du badge (32x32).
        /// </summary>
        public void PictureBadge(string id) {
            // call http pictures/badges
        }

        /// <summary>
        /// Response for 'pictures/characters'.
        /// Retourne une image du personnage.
        /// </summary>
        public void PictureCharacter(string id, string width, string height) {
            // call http pictures/characters
        }

        /// <summary>
        /// Response for 'pictures/episodes'.
        /// Retourne une image de l'épisode.
        /// </summary>
        public void PictureEpisode(string id, string width, string height) {
            // call http pictures/episodes
        }

        /// <summary>
        /// Response for 'pictures/members'.
        /// Retourne une image du membre.
        /// </summary>
        public void PictureMember(string id, string width, string height) {
            // call http pictures/members
        }

        /// <summary>
        /// Response for 'pictures/movies'.
        /// Retourne une image du film.
        /// </summary>
        public void PictureMovy(string id, string width, string height) {
            // call http pictures/movies
        }

        /// <summary>
        /// Response for 'pictures/shows'.
        /// Retourne une image de la série.
        /// </summary>
        public void PictureShow(string id, string width, string height, string picked) {
            // call http pictures/shows
        }

        /// <summary>
        /// Response for 'planning/general'.
        /// Affiche tous les épisodes diffusés les 8 derniers jours jusqu'aux 8 prochains jours.
        /// </summary>
        public void PlanningGeneral(string date, string before, string after, string type) {
            // call http planning/general
        }

        /// <summary>
        /// Response for 'planning/incoming'.
        /// Affiche uniquement le premier épisode des prochaines séries qui vont être diffusées.
        /// </summary>
        public void PlanningIncoming() {
            // call http planning/incoming
        }

        /// <summary>
        /// Response for 'planning/member'.
        /// Affiche le planning du membre identifié ou d'un autre membre.
        /// </summary>
        public void PlanningMember(string id, string unseen, string month) {
            // call http planning/member
        }

        /// <summary>
        /// Response for 'shows/archive'.
        /// Archive une série dans le compte du membre.
        /// </summary>
        public void ShowArchive(string id, string thetvdb_id) {
            // call http shows/archive
        }

        /// <summary>
        /// Response for 'shows/archive'.
        /// Sort une série des archives du compte du membre.
        /// </summary>
        public void DeleteShowArchive(string id, string thetvdb_id) {
            // call http shows/archive
        }

        /// <summary>
        /// Response for 'shows/characters'.
        /// Récupère les personnages de la série, ajoutés par les membres de BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.ShowCharacter ShowCharacter(string id, string thetvdb_id) {
            // call http shows/characters
        }

        /// <summary>
        /// Response for 'shows/display'.
        /// Affiche les informations d'une série.
        /// </summary>
        public void ShowDisplay(string id, string thetvdb_id) {
            // call http shows/display
        }

        /// <summary>
        /// Response for 'shows/episodes'.
        /// Affiche les épisodes d'une série.
        /// </summary>
        public void ShowEpisode(string id, string thetvdb_id, string season, string episode, string subtitles) {
            // call http shows/episodes
        }

        /// <summary>
        /// Response for 'shows/favorite'.
        /// Ajoute une série favorite sur le profil du membre identifié.
        /// </summary>
        public void ShowFavorite(string id) {
            // call http shows/favorite
        }

        /// <summary>
        /// Response for 'shows/favorite'.
        /// Supprime une série favorite du profil du membre identifié.
        /// </summary>
        public void DeleteShowFavorite(string id) {
            // call http shows/favorite
        }

        /// <summary>
        /// Response for 'shows/favorites'.
        /// Récupère les séries favorites du membre.
        /// </summary>
        public void ShowFavorite(string id) {
            // call http shows/favorites
        }

        /// <summary>
        /// Response for 'shows/list'.
        /// Affiche la liste de toutes les séries.
        /// </summary>
        public void ShowList(string order, string since) {
            // call http shows/list
        }

        /// <summary>
        /// Response for 'shows/note'.
        /// Note une série.
        /// </summary>
        public void ShowNote(string id, string thetvdb_id, string note) {
            // call http shows/note
        }

        /// <summary>
        /// Response for 'shows/note'.
        /// Supprime une note d'une série.
        /// </summary>
        public void DeleteShowNote(string id, string thetvdb_id) {
            // call http shows/note
        }

        /// <summary>
        /// Response for 'shows/pictures'.
        /// Récupère les images de la série, ajoutées par les membres de BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.ShowPicture ShowPicture(string id, string thetvdb_id) {
            // call http shows/pictures
        }

        /// <summary>
        /// Response for 'shows/random'.
        /// Affiche une série au hasard.
        /// </summary>
        public void ShowRandom(string nb, string summary) {
            // call http shows/random
        }

        /// <summary>
        /// Response for 'shows/recommendation'.
        /// Créer une recommandation d'une série d'un membre pour un ami.
        /// </summary>
        public void ShowRecommendation(string id, string thetvdb_id, string to, string comments) {
            // call http shows/recommendation
        }

        /// <summary>
        /// Response for 'shows/recommendation'.
        /// Supprime une recommandation d'une série envoyée ou reçue.
        /// </summary>
        public void DeleteShowRecommendation(string id) {
            // call http shows/recommendation
        }

        /// <summary>
        /// Response for 'shows/recommendations'.
        /// Récupère les recommandations reçues par l'utilisateur identifié.
        /// </summary>
        public void ShowRecommendation() {
            // call http shows/recommendations
        }

        /// <summary>
        /// Response for 'shows/search'.
        /// Recherche une série.
        /// </summary>
        public void ShowSearch(string title, string summary, string order, string nbpp, string page) {
            // call http shows/search
        }

        /// <summary>
        /// Response for 'shows/show'.
        /// Ajoute une série dans le compte du membre.
        /// </summary>
        public void ShowShow(string id, string thetvdb_id, string episode_id) {
            // call http shows/show
        }

        /// <summary>
        /// Response for 'shows/show'.
        /// Supprime une série du compte du membre.
        /// </summary>
        public void DeleteShowShow(string id, string thetvdb_id) {
            // call http shows/show
        }

        /// <summary>
        /// Response for 'shows/similars'.
        /// Récupère les séries marquées similaires par les membres de BetaSeries.
        /// </summary>
        public void ShowSimilar(string id, string thetvdb_id) {
            // call http shows/similars
        }

        /// <summary>
        /// Response for 'shows/videos'.
        /// Récupère les vidéos associées à la série par les membres de BetaSeries.
        /// </summary>
        public void ShowVideo(string id, string thetvdb_id) {
            // call http shows/videos
        }

        /// <summary>
        /// Response for 'subtitles/episode'.
        /// Affiche les sous-titres pour un épisode donné.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleEpisode SubtitleEpisode(string id, string language) {
            // call http subtitles/episode
        }

        /// <summary>
        /// Response for 'subtitles/last'.
        /// Affiche les derniers sous-titres récupérés par BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleLast SubtitleLast(string number, string language) {
            // call http subtitles/last
        }

        /// <summary>
        /// Response for 'subtitles/report'.
        /// Reporte des sous-titres comme incorrects pour se faire supprimer de la liste.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleReport SubtitleReport(string id, string reason) {
            // call http subtitles/report
        }

        /// <summary>
        /// Response for 'subtitles/show'.
        /// Affiche les sous-titres pour une série donnée.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleShow SubtitleShow(string id, string language) {
            // call http subtitles/show
        }

        /// <summary>
        /// Response for 'timeline/friends'.
        /// Affiche les derniers évènements des amis du membre identifié.
        /// </summary>
        public void TimelineFriend(string nbpp, string since_id, string types) {
            // call http timeline/friends
        }

        /// <summary>
        /// Response for 'timeline/home'.
        /// Affiche les derniers évènements du site.
        /// </summary>
        public void TimelineHome(string nbpp, string since_id, string types) {
            // call http timeline/home
        }

        /// <summary>
        /// Response for 'timeline/member'.
        /// Affiche les derniers évènements du membre spécifié.
        /// </summary>
        public void TimelineMember(string id, string nbpp, string since_id, string types) {
            // call http timeline/member
        }
    }
    public partial class BetaseriesSubtitlesClient {
        private readonly BetaseriesClient client;

        public BetaseriesSubtitlesClient(BetaseriesClient client) {
            this.client = client;
        }


        /// <summary>
        /// Response for 'comments/comment'.
        /// Envoie un commentaire pour l'élément spécifié.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment CommentComment(string type, string id, string text, string in_reply_to) {
            // call http comments/comment
        }

        /// <summary>
        /// Response for 'comments/comment'.
        /// Supprime un commentaire de l'utilisateur identifié.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment DeleteCommentComment(string id) {
            // call http comments/comment
        }

        /// <summary>
        /// Response for 'comments/comments'.
        /// Récupère les commentaires pour un élément donné.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment CommentComment(string type, string id, string nbpp, string since_id, string order, string replies) {
            // call http comments/comments
        }

        /// <summary>
        /// Response for 'comments/replies'.
        /// Récupère les réponses d'un commentaire donné.
        /// </summary>
        public Srk.BetaseriesApi.CommentReply CommentReply(string id, string order) {
            // call http comments/replies
        }

        /// <summary>
        /// Response for 'comments/subscription'.
        /// Inscrit le membre aux notifications e-mail pour l'élément donné.
        /// </summary>
        public void CommentSubscription(string type, string id) {
            // call http comments/subscription
        }

        /// <summary>
        /// Response for 'comments/subscription'.
        /// Désinscrit le membre aux notifications e-mail pour l'élément donné.
        /// </summary>
        public void DeleteCommentSubscription(string type, string id) {
            // call http comments/subscription
        }

        /// <summary>
        /// Response for 'episodes/display'.
        /// Affiche les informations d'un épisode.
        /// </summary>
        public void EpisodeDisplay(string id, string thetvdb_id, string subtitles) {
            // call http episodes/display
        }

        /// <summary>
        /// Response for 'episodes/downloaded'.
        /// Marque un épisode comme téléchargé.
        /// </summary>
        public void EpisodeDownloaded(string id, string thetvdb_id) {
            // call http episodes/downloaded
        }

        /// <summary>
        /// Response for 'episodes/downloaded'.
        /// Enlève le marquage d'un épisode comme téléchargé.
        /// </summary>
        public void DeleteEpisodeDownloaded(string id, string thetvdb_id) {
            // call http episodes/downloaded
        }

        /// <summary>
        /// Response for 'episodes/list'.
        /// Récupère la liste des épisodes à voir.
        /// </summary>
        public void EpisodeList(string subtitles, string limit, string showId, string userId) {
            // call http episodes/list
        }

        /// <summary>
        /// Response for 'episodes/note'.
        /// Note un épisode.
        /// </summary>
        public void EpisodeNote(string id, string thetvdb_id, string note) {
            // call http episodes/note
        }

        /// <summary>
        /// Response for 'episodes/note'.
        /// Supprime une note d'un épisode.
        /// </summary>
        public void DeleteEpisodeNote(string id, string thetvdb_id) {
            // call http episodes/note
        }

        /// <summary>
        /// Response for 'episodes/scraper'.
        /// Récupère les informations d'un épisode en fonction du nom de fichier
        /// </summary>
        public void EpisodeScraper(string file) {
            // call http episodes/scraper
        }

        /// <summary>
        /// Response for 'episodes/search'.
        /// Récupère les informations d'un épisode en fonction d'informations.
        /// </summary>
        public void EpisodeSearch(string show_id, string number, string subtitles) {
            // call http episodes/search
        }

        /// <summary>
        /// Response for 'episodes/watched'.
        /// Marque un épisode comme vu. Vous pouvez spécifier plusieurs épisodes en séparant les ID par une virgule.
        /// </summary>
        public void EpisodeWatched(string id, string thetvdb_id, string bulk, string delete, string note) {
            // call http episodes/watched
        }

        /// <summary>
        /// Response for 'episodes/watched'.
        /// Enlève le marquage d'un épisode comme vu.
        /// </summary>
        public void DeleteEpisodeWatched(string id, string thetvdb_id) {
            // call http episodes/watched
        }

        /// <summary>
        /// Response for 'friends/block'.
        /// Bloque un utilisateur.
        /// </summary>
        public void FriendBlock(string id) {
            // call http friends/block
        }

        /// <summary>
        /// Response for 'friends/block'.
        /// Supprime le blocage d'un utilisateur.
        /// </summary>
        public void DeleteFriendBlock(string id) {
            // call http friends/block
        }

        /// <summary>
        /// Response for 'friends/friend'.
        /// Ajoute un ami dans le compte de l'utilisateur.
        /// </summary>
        public void FriendFriend(string id) {
            // call http friends/friend
        }

        /// <summary>
        /// Response for 'friends/friend'.
        /// Supprime un ami du compte de l'utilisateur.
        /// </summary>
        public void DeleteFriendFriend(string id) {
            // call http friends/friend
        }

        /// <summary>
        /// Response for 'friends/list'.
        /// Récupère la liste des amis du membre.
        /// </summary>
        public void FriendList(string id, string blocked) {
            // call http friends/list
        }

        /// <summary>
        /// Response for 'friends/requests'.
        /// Récupère la liste des demandes envoyées par l'utilisateur.
        /// </summary>
        public void FriendRequest(string received) {
            // call http friends/requests
        }

        /// <summary>
        /// Response for 'members/access_token'.
        /// Récupère un token d'accès avec le code fourni par l'identification OAuth 2.
        /// </summary>
        public void MemberAccesToken(string client_id, string client_secret, string redirect_uri, string code) {
            // call http members/access_token
        }

        /// <summary>
        /// Response for 'members/auth'.
        /// Identification classique du membre.
        /// </summary>
        public void MemberAuth(string login, string password) {
            // call http members/auth
        }

        /// <summary>
        /// Response for 'members/avatar'.
        /// Uploade et remplace l'avatar de l'utilisateur identifié.
        /// </summary>
        public void MemberAvatar(string avatar) {
            // call http members/avatar
        }

        /// <summary>
        /// Response for 'members/avatar'.
        /// Supprime l'avatar de l'utilisateur identifié.
        /// </summary>
        public void DeleteMemberAvatar() {
            // call http members/avatar
        }

        /// <summary>
        /// Response for 'members/badges'.
        /// Affiche les badges du membre.
        /// </summary>
        public void MemberBadge(string id) {
            // call http members/badges
        }

        /// <summary>
        /// Response for 'members/destroy'.
        /// Détruit le token actif.
        /// </summary>
        public void MemberDestroy() {
            // call http members/destroy
        }

        /// <summary>
        /// Response for 'members/infos'.
        /// Renvoie les informations d'un membre, du membre identifié par défaut.
        /// </summary>
        public void MemberInfo(string id, string summary) {
            // call http members/infos
        }

        /// <summary>
        /// Response for 'members/is_active'.
        /// Vérifie que le token est actif.
        /// </summary>
        public void MemberIActive() {
            // call http members/is_active
        }

        /// <summary>
        /// Response for 'members/lost'.
        /// Envoie un e-mail pour réinitialiser le mot de passe.
        /// </summary>
        public void MemberLost(string find) {
            // call http members/lost
        }

        /// <summary>
        /// Response for 'members/notifications'.
        /// Affiche les dernières notifications du membre. Types : badge, banner, bugs, character, commentaire, dons, episode, facebook, film, forum, friend, message, quizz, recommend, site, subtitles, video.
        /// </summary>
        public void MemberNotification(string since_id, string number, string sort, string types, string auto_delete) {
            // call http members/notifications
        }

        /// <summary>
        /// Response for 'members/oauth'.
        /// Identification par OAuth.
        /// </summary>
        public void MemberOauth() {
            // call http members/oauth
        }

        /// <summary>
        /// Response for 'members/oauth'.
        /// Identification par OAuth. Renvoie l'utilisateur sur l'URL de callback que vous avez spécifiée dans votre compte avec le paramètre GET token.
        /// </summary>
        public void MemberOauth() {
            // call http members/oauth
        }

        /// <summary>
        /// Response for 'members/option'.
        /// Modifie une option de l'utilisateur.
        /// </summary>
        public void MemberOption(string name, string value) {
            // call http members/option
        }

        /// <summary>
        /// Response for 'members/options'.
        /// Récupère les options (sous-titres) du membre.
        /// </summary>
        public void MemberOption() {
            // call http members/options
        }

        /// <summary>
        /// Response for 'members/search'.
        /// Recherche des membres.
        /// </summary>
        public void MemberSearch(string login) {
            // call http members/search
        }

        /// <summary>
        /// Response for 'members/signup'.
        /// Crée un nouveau compte membre sur BetaSeries.
        /// </summary>
        public void MemberSignup(string login, string password, string email) {
            // call http members/signup
        }

        /// <summary>
        /// Response for 'members/sync'.
        /// Cherche les membres parmi les amis du compte.
        /// </summary>
        public void MemberSync(string mails[]) {
            // call http members/sync
        }

        /// <summary>
        /// Response for 'members/username'.
        /// Retourne les possibilités de noms d'utilisateur libres sur BetaSeries.
        /// </summary>
        public void MemberUsername(string username) {
            // call http members/username
        }

        /// <summary>
        /// Response for 'messages/discussion'.
        /// Récupère une discussion identifiée par l'ID du premier message.
        /// </summary>
        public Srk.BetaseriesApi.MessageDiscussion MessageDiscussion(string id) {
            // call http messages/discussion
        }

        /// <summary>
        /// Response for 'messages/inbox'.
        /// Récupère la boîte de réception du membre identifié, par pages de 20.
        /// </summary>
        public Srk.BetaseriesApi.MessageInbox MessageInbox(string page) {
            // call http messages/inbox
        }

        /// <summary>
        /// Response for 'messages/message'.
        /// Supprime un message que vous avez écrit.
        /// </summary>
        public Srk.BetaseriesApi.MessageMessage DeleteMessageMessage(string id) {
            // call http messages/message
        }

        /// <summary>
        /// Response for 'messages/message'.
        /// Envoie un message à un autre membre du site.
        /// </summary>
        public Srk.BetaseriesApi.MessageMessage MessageMessage(string to, string text, string title, string id) {
            // call http messages/message
        }

        /// <summary>
        /// Response for 'messages/read'.
        /// Marque un message comme lu.
        /// </summary>
        public Srk.BetaseriesApi.MessageRead MessageRead(string id) {
            // call http messages/read
        }

        /// <summary>
        /// Response for 'movies/list'.
        /// Affiche la liste de tous les films.
        /// </summary>
        public void MovyList(string start, string limit, string order) {
            // call http movies/list
        }

        /// <summary>
        /// Response for 'movies/member'.
        /// Affiche la liste de tous les films du membre.
        /// </summary>
        public void MovyMember(string state, string start, string limit, string order) {
            // call http movies/member
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Affiche les détails d'un film.
        /// </summary>
        public void MovyMovie(string id) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Ajoute ou met à jour le film dans les films du membre.
        /// </summary>
        public void MovyMovie(string id, string mail, string twitter, string state, string profile) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Supprime un film du compte membre.
        /// </summary>
        public void DeleteMovyMovie(string id) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/random'.
        /// Affiche un film au hasard.
        /// </summary>
        public void MovyRandom(string nb) {
            // call http movies/random
        }

        /// <summary>
        /// Response for 'movies/scraper'.
        /// Récupère les informations d'un film en fonction du nom de fichier
        /// </summary>
        public void MovyScraper(string file) {
            // call http movies/scraper
        }

        /// <summary>
        /// Response for 'movies/search'.
        /// Recherche un film par critères.
        /// </summary>
        public void MovySearch(string title, string order, string nbpp, string page) {
            // call http movies/search
        }

        /// <summary>
        /// Response for 'pictures/badges'.
        /// Retourne une image du badge (32x32).
        /// </summary>
        public void PictureBadge(string id) {
            // call http pictures/badges
        }

        /// <summary>
        /// Response for 'pictures/characters'.
        /// Retourne une image du personnage.
        /// </summary>
        public void PictureCharacter(string id, string width, string height) {
            // call http pictures/characters
        }

        /// <summary>
        /// Response for 'pictures/episodes'.
        /// Retourne une image de l'épisode.
        /// </summary>
        public void PictureEpisode(string id, string width, string height) {
            // call http pictures/episodes
        }

        /// <summary>
        /// Response for 'pictures/members'.
        /// Retourne une image du membre.
        /// </summary>
        public void PictureMember(string id, string width, string height) {
            // call http pictures/members
        }

        /// <summary>
        /// Response for 'pictures/movies'.
        /// Retourne une image du film.
        /// </summary>
        public void PictureMovy(string id, string width, string height) {
            // call http pictures/movies
        }

        /// <summary>
        /// Response for 'pictures/shows'.
        /// Retourne une image de la série.
        /// </summary>
        public void PictureShow(string id, string width, string height, string picked) {
            // call http pictures/shows
        }

        /// <summary>
        /// Response for 'planning/general'.
        /// Affiche tous les épisodes diffusés les 8 derniers jours jusqu'aux 8 prochains jours.
        /// </summary>
        public void PlanningGeneral(string date, string before, string after, string type) {
            // call http planning/general
        }

        /// <summary>
        /// Response for 'planning/incoming'.
        /// Affiche uniquement le premier épisode des prochaines séries qui vont être diffusées.
        /// </summary>
        public void PlanningIncoming() {
            // call http planning/incoming
        }

        /// <summary>
        /// Response for 'planning/member'.
        /// Affiche le planning du membre identifié ou d'un autre membre.
        /// </summary>
        public void PlanningMember(string id, string unseen, string month) {
            // call http planning/member
        }

        /// <summary>
        /// Response for 'shows/archive'.
        /// Archive une série dans le compte du membre.
        /// </summary>
        public void ShowArchive(string id, string thetvdb_id) {
            // call http shows/archive
        }

        /// <summary>
        /// Response for 'shows/archive'.
        /// Sort une série des archives du compte du membre.
        /// </summary>
        public void DeleteShowArchive(string id, string thetvdb_id) {
            // call http shows/archive
        }

        /// <summary>
        /// Response for 'shows/characters'.
        /// Récupère les personnages de la série, ajoutés par les membres de BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.ShowCharacter ShowCharacter(string id, string thetvdb_id) {
            // call http shows/characters
        }

        /// <summary>
        /// Response for 'shows/display'.
        /// Affiche les informations d'une série.
        /// </summary>
        public void ShowDisplay(string id, string thetvdb_id) {
            // call http shows/display
        }

        /// <summary>
        /// Response for 'shows/episodes'.
        /// Affiche les épisodes d'une série.
        /// </summary>
        public void ShowEpisode(string id, string thetvdb_id, string season, string episode, string subtitles) {
            // call http shows/episodes
        }

        /// <summary>
        /// Response for 'shows/favorite'.
        /// Ajoute une série favorite sur le profil du membre identifié.
        /// </summary>
        public void ShowFavorite(string id) {
            // call http shows/favorite
        }

        /// <summary>
        /// Response for 'shows/favorite'.
        /// Supprime une série favorite du profil du membre identifié.
        /// </summary>
        public void DeleteShowFavorite(string id) {
            // call http shows/favorite
        }

        /// <summary>
        /// Response for 'shows/favorites'.
        /// Récupère les séries favorites du membre.
        /// </summary>
        public void ShowFavorite(string id) {
            // call http shows/favorites
        }

        /// <summary>
        /// Response for 'shows/list'.
        /// Affiche la liste de toutes les séries.
        /// </summary>
        public void ShowList(string order, string since) {
            // call http shows/list
        }

        /// <summary>
        /// Response for 'shows/note'.
        /// Note une série.
        /// </summary>
        public void ShowNote(string id, string thetvdb_id, string note) {
            // call http shows/note
        }

        /// <summary>
        /// Response for 'shows/note'.
        /// Supprime une note d'une série.
        /// </summary>
        public void DeleteShowNote(string id, string thetvdb_id) {
            // call http shows/note
        }

        /// <summary>
        /// Response for 'shows/pictures'.
        /// Récupère les images de la série, ajoutées par les membres de BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.ShowPicture ShowPicture(string id, string thetvdb_id) {
            // call http shows/pictures
        }

        /// <summary>
        /// Response for 'shows/random'.
        /// Affiche une série au hasard.
        /// </summary>
        public void ShowRandom(string nb, string summary) {
            // call http shows/random
        }

        /// <summary>
        /// Response for 'shows/recommendation'.
        /// Créer une recommandation d'une série d'un membre pour un ami.
        /// </summary>
        public void ShowRecommendation(string id, string thetvdb_id, string to, string comments) {
            // call http shows/recommendation
        }

        /// <summary>
        /// Response for 'shows/recommendation'.
        /// Supprime une recommandation d'une série envoyée ou reçue.
        /// </summary>
        public void DeleteShowRecommendation(string id) {
            // call http shows/recommendation
        }

        /// <summary>
        /// Response for 'shows/recommendations'.
        /// Récupère les recommandations reçues par l'utilisateur identifié.
        /// </summary>
        public void ShowRecommendation() {
            // call http shows/recommendations
        }

        /// <summary>
        /// Response for 'shows/search'.
        /// Recherche une série.
        /// </summary>
        public void ShowSearch(string title, string summary, string order, string nbpp, string page) {
            // call http shows/search
        }

        /// <summary>
        /// Response for 'shows/show'.
        /// Ajoute une série dans le compte du membre.
        /// </summary>
        public void ShowShow(string id, string thetvdb_id, string episode_id) {
            // call http shows/show
        }

        /// <summary>
        /// Response for 'shows/show'.
        /// Supprime une série du compte du membre.
        /// </summary>
        public void DeleteShowShow(string id, string thetvdb_id) {
            // call http shows/show
        }

        /// <summary>
        /// Response for 'shows/similars'.
        /// Récupère les séries marquées similaires par les membres de BetaSeries.
        /// </summary>
        public void ShowSimilar(string id, string thetvdb_id) {
            // call http shows/similars
        }

        /// <summary>
        /// Response for 'shows/videos'.
        /// Récupère les vidéos associées à la série par les membres de BetaSeries.
        /// </summary>
        public void ShowVideo(string id, string thetvdb_id) {
            // call http shows/videos
        }

        /// <summary>
        /// Response for 'subtitles/episode'.
        /// Affiche les sous-titres pour un épisode donné.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleEpisode SubtitleEpisode(string id, string language) {
            // call http subtitles/episode
        }

        /// <summary>
        /// Response for 'subtitles/last'.
        /// Affiche les derniers sous-titres récupérés par BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleLast SubtitleLast(string number, string language) {
            // call http subtitles/last
        }

        /// <summary>
        /// Response for 'subtitles/report'.
        /// Reporte des sous-titres comme incorrects pour se faire supprimer de la liste.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleReport SubtitleReport(string id, string reason) {
            // call http subtitles/report
        }

        /// <summary>
        /// Response for 'subtitles/show'.
        /// Affiche les sous-titres pour une série donnée.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleShow SubtitleShow(string id, string language) {
            // call http subtitles/show
        }

        /// <summary>
        /// Response for 'timeline/friends'.
        /// Affiche les derniers évènements des amis du membre identifié.
        /// </summary>
        public void TimelineFriend(string nbpp, string since_id, string types) {
            // call http timeline/friends
        }

        /// <summary>
        /// Response for 'timeline/home'.
        /// Affiche les derniers évènements du site.
        /// </summary>
        public void TimelineHome(string nbpp, string since_id, string types) {
            // call http timeline/home
        }

        /// <summary>
        /// Response for 'timeline/member'.
        /// Affiche les derniers évènements du membre spécifié.
        /// </summary>
        public void TimelineMember(string id, string nbpp, string since_id, string types) {
            // call http timeline/member
        }
    }
    public partial class BetaseriesTimelineClient {
        private readonly BetaseriesClient client;

        public BetaseriesTimelineClient(BetaseriesClient client) {
            this.client = client;
        }


        /// <summary>
        /// Response for 'comments/comment'.
        /// Envoie un commentaire pour l'élément spécifié.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment CommentComment(string type, string id, string text, string in_reply_to) {
            // call http comments/comment
        }

        /// <summary>
        /// Response for 'comments/comment'.
        /// Supprime un commentaire de l'utilisateur identifié.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment DeleteCommentComment(string id) {
            // call http comments/comment
        }

        /// <summary>
        /// Response for 'comments/comments'.
        /// Récupère les commentaires pour un élément donné.
        /// </summary>
        public Srk.BetaseriesApi.CommentComment CommentComment(string type, string id, string nbpp, string since_id, string order, string replies) {
            // call http comments/comments
        }

        /// <summary>
        /// Response for 'comments/replies'.
        /// Récupère les réponses d'un commentaire donné.
        /// </summary>
        public Srk.BetaseriesApi.CommentReply CommentReply(string id, string order) {
            // call http comments/replies
        }

        /// <summary>
        /// Response for 'comments/subscription'.
        /// Inscrit le membre aux notifications e-mail pour l'élément donné.
        /// </summary>
        public void CommentSubscription(string type, string id) {
            // call http comments/subscription
        }

        /// <summary>
        /// Response for 'comments/subscription'.
        /// Désinscrit le membre aux notifications e-mail pour l'élément donné.
        /// </summary>
        public void DeleteCommentSubscription(string type, string id) {
            // call http comments/subscription
        }

        /// <summary>
        /// Response for 'episodes/display'.
        /// Affiche les informations d'un épisode.
        /// </summary>
        public void EpisodeDisplay(string id, string thetvdb_id, string subtitles) {
            // call http episodes/display
        }

        /// <summary>
        /// Response for 'episodes/downloaded'.
        /// Marque un épisode comme téléchargé.
        /// </summary>
        public void EpisodeDownloaded(string id, string thetvdb_id) {
            // call http episodes/downloaded
        }

        /// <summary>
        /// Response for 'episodes/downloaded'.
        /// Enlève le marquage d'un épisode comme téléchargé.
        /// </summary>
        public void DeleteEpisodeDownloaded(string id, string thetvdb_id) {
            // call http episodes/downloaded
        }

        /// <summary>
        /// Response for 'episodes/list'.
        /// Récupère la liste des épisodes à voir.
        /// </summary>
        public void EpisodeList(string subtitles, string limit, string showId, string userId) {
            // call http episodes/list
        }

        /// <summary>
        /// Response for 'episodes/note'.
        /// Note un épisode.
        /// </summary>
        public void EpisodeNote(string id, string thetvdb_id, string note) {
            // call http episodes/note
        }

        /// <summary>
        /// Response for 'episodes/note'.
        /// Supprime une note d'un épisode.
        /// </summary>
        public void DeleteEpisodeNote(string id, string thetvdb_id) {
            // call http episodes/note
        }

        /// <summary>
        /// Response for 'episodes/scraper'.
        /// Récupère les informations d'un épisode en fonction du nom de fichier
        /// </summary>
        public void EpisodeScraper(string file) {
            // call http episodes/scraper
        }

        /// <summary>
        /// Response for 'episodes/search'.
        /// Récupère les informations d'un épisode en fonction d'informations.
        /// </summary>
        public void EpisodeSearch(string show_id, string number, string subtitles) {
            // call http episodes/search
        }

        /// <summary>
        /// Response for 'episodes/watched'.
        /// Marque un épisode comme vu. Vous pouvez spécifier plusieurs épisodes en séparant les ID par une virgule.
        /// </summary>
        public void EpisodeWatched(string id, string thetvdb_id, string bulk, string delete, string note) {
            // call http episodes/watched
        }

        /// <summary>
        /// Response for 'episodes/watched'.
        /// Enlève le marquage d'un épisode comme vu.
        /// </summary>
        public void DeleteEpisodeWatched(string id, string thetvdb_id) {
            // call http episodes/watched
        }

        /// <summary>
        /// Response for 'friends/block'.
        /// Bloque un utilisateur.
        /// </summary>
        public void FriendBlock(string id) {
            // call http friends/block
        }

        /// <summary>
        /// Response for 'friends/block'.
        /// Supprime le blocage d'un utilisateur.
        /// </summary>
        public void DeleteFriendBlock(string id) {
            // call http friends/block
        }

        /// <summary>
        /// Response for 'friends/friend'.
        /// Ajoute un ami dans le compte de l'utilisateur.
        /// </summary>
        public void FriendFriend(string id) {
            // call http friends/friend
        }

        /// <summary>
        /// Response for 'friends/friend'.
        /// Supprime un ami du compte de l'utilisateur.
        /// </summary>
        public void DeleteFriendFriend(string id) {
            // call http friends/friend
        }

        /// <summary>
        /// Response for 'friends/list'.
        /// Récupère la liste des amis du membre.
        /// </summary>
        public void FriendList(string id, string blocked) {
            // call http friends/list
        }

        /// <summary>
        /// Response for 'friends/requests'.
        /// Récupère la liste des demandes envoyées par l'utilisateur.
        /// </summary>
        public void FriendRequest(string received) {
            // call http friends/requests
        }

        /// <summary>
        /// Response for 'members/access_token'.
        /// Récupère un token d'accès avec le code fourni par l'identification OAuth 2.
        /// </summary>
        public void MemberAccesToken(string client_id, string client_secret, string redirect_uri, string code) {
            // call http members/access_token
        }

        /// <summary>
        /// Response for 'members/auth'.
        /// Identification classique du membre.
        /// </summary>
        public void MemberAuth(string login, string password) {
            // call http members/auth
        }

        /// <summary>
        /// Response for 'members/avatar'.
        /// Uploade et remplace l'avatar de l'utilisateur identifié.
        /// </summary>
        public void MemberAvatar(string avatar) {
            // call http members/avatar
        }

        /// <summary>
        /// Response for 'members/avatar'.
        /// Supprime l'avatar de l'utilisateur identifié.
        /// </summary>
        public void DeleteMemberAvatar() {
            // call http members/avatar
        }

        /// <summary>
        /// Response for 'members/badges'.
        /// Affiche les badges du membre.
        /// </summary>
        public void MemberBadge(string id) {
            // call http members/badges
        }

        /// <summary>
        /// Response for 'members/destroy'.
        /// Détruit le token actif.
        /// </summary>
        public void MemberDestroy() {
            // call http members/destroy
        }

        /// <summary>
        /// Response for 'members/infos'.
        /// Renvoie les informations d'un membre, du membre identifié par défaut.
        /// </summary>
        public void MemberInfo(string id, string summary) {
            // call http members/infos
        }

        /// <summary>
        /// Response for 'members/is_active'.
        /// Vérifie que le token est actif.
        /// </summary>
        public void MemberIActive() {
            // call http members/is_active
        }

        /// <summary>
        /// Response for 'members/lost'.
        /// Envoie un e-mail pour réinitialiser le mot de passe.
        /// </summary>
        public void MemberLost(string find) {
            // call http members/lost
        }

        /// <summary>
        /// Response for 'members/notifications'.
        /// Affiche les dernières notifications du membre. Types : badge, banner, bugs, character, commentaire, dons, episode, facebook, film, forum, friend, message, quizz, recommend, site, subtitles, video.
        /// </summary>
        public void MemberNotification(string since_id, string number, string sort, string types, string auto_delete) {
            // call http members/notifications
        }

        /// <summary>
        /// Response for 'members/oauth'.
        /// Identification par OAuth.
        /// </summary>
        public void MemberOauth() {
            // call http members/oauth
        }

        /// <summary>
        /// Response for 'members/oauth'.
        /// Identification par OAuth. Renvoie l'utilisateur sur l'URL de callback que vous avez spécifiée dans votre compte avec le paramètre GET token.
        /// </summary>
        public void MemberOauth() {
            // call http members/oauth
        }

        /// <summary>
        /// Response for 'members/option'.
        /// Modifie une option de l'utilisateur.
        /// </summary>
        public void MemberOption(string name, string value) {
            // call http members/option
        }

        /// <summary>
        /// Response for 'members/options'.
        /// Récupère les options (sous-titres) du membre.
        /// </summary>
        public void MemberOption() {
            // call http members/options
        }

        /// <summary>
        /// Response for 'members/search'.
        /// Recherche des membres.
        /// </summary>
        public void MemberSearch(string login) {
            // call http members/search
        }

        /// <summary>
        /// Response for 'members/signup'.
        /// Crée un nouveau compte membre sur BetaSeries.
        /// </summary>
        public void MemberSignup(string login, string password, string email) {
            // call http members/signup
        }

        /// <summary>
        /// Response for 'members/sync'.
        /// Cherche les membres parmi les amis du compte.
        /// </summary>
        public void MemberSync(string mails[]) {
            // call http members/sync
        }

        /// <summary>
        /// Response for 'members/username'.
        /// Retourne les possibilités de noms d'utilisateur libres sur BetaSeries.
        /// </summary>
        public void MemberUsername(string username) {
            // call http members/username
        }

        /// <summary>
        /// Response for 'messages/discussion'.
        /// Récupère une discussion identifiée par l'ID du premier message.
        /// </summary>
        public Srk.BetaseriesApi.MessageDiscussion MessageDiscussion(string id) {
            // call http messages/discussion
        }

        /// <summary>
        /// Response for 'messages/inbox'.
        /// Récupère la boîte de réception du membre identifié, par pages de 20.
        /// </summary>
        public Srk.BetaseriesApi.MessageInbox MessageInbox(string page) {
            // call http messages/inbox
        }

        /// <summary>
        /// Response for 'messages/message'.
        /// Supprime un message que vous avez écrit.
        /// </summary>
        public Srk.BetaseriesApi.MessageMessage DeleteMessageMessage(string id) {
            // call http messages/message
        }

        /// <summary>
        /// Response for 'messages/message'.
        /// Envoie un message à un autre membre du site.
        /// </summary>
        public Srk.BetaseriesApi.MessageMessage MessageMessage(string to, string text, string title, string id) {
            // call http messages/message
        }

        /// <summary>
        /// Response for 'messages/read'.
        /// Marque un message comme lu.
        /// </summary>
        public Srk.BetaseriesApi.MessageRead MessageRead(string id) {
            // call http messages/read
        }

        /// <summary>
        /// Response for 'movies/list'.
        /// Affiche la liste de tous les films.
        /// </summary>
        public void MovyList(string start, string limit, string order) {
            // call http movies/list
        }

        /// <summary>
        /// Response for 'movies/member'.
        /// Affiche la liste de tous les films du membre.
        /// </summary>
        public void MovyMember(string state, string start, string limit, string order) {
            // call http movies/member
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Affiche les détails d'un film.
        /// </summary>
        public void MovyMovie(string id) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Ajoute ou met à jour le film dans les films du membre.
        /// </summary>
        public void MovyMovie(string id, string mail, string twitter, string state, string profile) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/movie'.
        /// Supprime un film du compte membre.
        /// </summary>
        public void DeleteMovyMovie(string id) {
            // call http movies/movie
        }

        /// <summary>
        /// Response for 'movies/random'.
        /// Affiche un film au hasard.
        /// </summary>
        public void MovyRandom(string nb) {
            // call http movies/random
        }

        /// <summary>
        /// Response for 'movies/scraper'.
        /// Récupère les informations d'un film en fonction du nom de fichier
        /// </summary>
        public void MovyScraper(string file) {
            // call http movies/scraper
        }

        /// <summary>
        /// Response for 'movies/search'.
        /// Recherche un film par critères.
        /// </summary>
        public void MovySearch(string title, string order, string nbpp, string page) {
            // call http movies/search
        }

        /// <summary>
        /// Response for 'pictures/badges'.
        /// Retourne une image du badge (32x32).
        /// </summary>
        public void PictureBadge(string id) {
            // call http pictures/badges
        }

        /// <summary>
        /// Response for 'pictures/characters'.
        /// Retourne une image du personnage.
        /// </summary>
        public void PictureCharacter(string id, string width, string height) {
            // call http pictures/characters
        }

        /// <summary>
        /// Response for 'pictures/episodes'.
        /// Retourne une image de l'épisode.
        /// </summary>
        public void PictureEpisode(string id, string width, string height) {
            // call http pictures/episodes
        }

        /// <summary>
        /// Response for 'pictures/members'.
        /// Retourne une image du membre.
        /// </summary>
        public void PictureMember(string id, string width, string height) {
            // call http pictures/members
        }

        /// <summary>
        /// Response for 'pictures/movies'.
        /// Retourne une image du film.
        /// </summary>
        public void PictureMovy(string id, string width, string height) {
            // call http pictures/movies
        }

        /// <summary>
        /// Response for 'pictures/shows'.
        /// Retourne une image de la série.
        /// </summary>
        public void PictureShow(string id, string width, string height, string picked) {
            // call http pictures/shows
        }

        /// <summary>
        /// Response for 'planning/general'.
        /// Affiche tous les épisodes diffusés les 8 derniers jours jusqu'aux 8 prochains jours.
        /// </summary>
        public void PlanningGeneral(string date, string before, string after, string type) {
            // call http planning/general
        }

        /// <summary>
        /// Response for 'planning/incoming'.
        /// Affiche uniquement le premier épisode des prochaines séries qui vont être diffusées.
        /// </summary>
        public void PlanningIncoming() {
            // call http planning/incoming
        }

        /// <summary>
        /// Response for 'planning/member'.
        /// Affiche le planning du membre identifié ou d'un autre membre.
        /// </summary>
        public void PlanningMember(string id, string unseen, string month) {
            // call http planning/member
        }

        /// <summary>
        /// Response for 'shows/archive'.
        /// Archive une série dans le compte du membre.
        /// </summary>
        public void ShowArchive(string id, string thetvdb_id) {
            // call http shows/archive
        }

        /// <summary>
        /// Response for 'shows/archive'.
        /// Sort une série des archives du compte du membre.
        /// </summary>
        public void DeleteShowArchive(string id, string thetvdb_id) {
            // call http shows/archive
        }

        /// <summary>
        /// Response for 'shows/characters'.
        /// Récupère les personnages de la série, ajoutés par les membres de BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.ShowCharacter ShowCharacter(string id, string thetvdb_id) {
            // call http shows/characters
        }

        /// <summary>
        /// Response for 'shows/display'.
        /// Affiche les informations d'une série.
        /// </summary>
        public void ShowDisplay(string id, string thetvdb_id) {
            // call http shows/display
        }

        /// <summary>
        /// Response for 'shows/episodes'.
        /// Affiche les épisodes d'une série.
        /// </summary>
        public void ShowEpisode(string id, string thetvdb_id, string season, string episode, string subtitles) {
            // call http shows/episodes
        }

        /// <summary>
        /// Response for 'shows/favorite'.
        /// Ajoute une série favorite sur le profil du membre identifié.
        /// </summary>
        public void ShowFavorite(string id) {
            // call http shows/favorite
        }

        /// <summary>
        /// Response for 'shows/favorite'.
        /// Supprime une série favorite du profil du membre identifié.
        /// </summary>
        public void DeleteShowFavorite(string id) {
            // call http shows/favorite
        }

        /// <summary>
        /// Response for 'shows/favorites'.
        /// Récupère les séries favorites du membre.
        /// </summary>
        public void ShowFavorite(string id) {
            // call http shows/favorites
        }

        /// <summary>
        /// Response for 'shows/list'.
        /// Affiche la liste de toutes les séries.
        /// </summary>
        public void ShowList(string order, string since) {
            // call http shows/list
        }

        /// <summary>
        /// Response for 'shows/note'.
        /// Note une série.
        /// </summary>
        public void ShowNote(string id, string thetvdb_id, string note) {
            // call http shows/note
        }

        /// <summary>
        /// Response for 'shows/note'.
        /// Supprime une note d'une série.
        /// </summary>
        public void DeleteShowNote(string id, string thetvdb_id) {
            // call http shows/note
        }

        /// <summary>
        /// Response for 'shows/pictures'.
        /// Récupère les images de la série, ajoutées par les membres de BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.ShowPicture ShowPicture(string id, string thetvdb_id) {
            // call http shows/pictures
        }

        /// <summary>
        /// Response for 'shows/random'.
        /// Affiche une série au hasard.
        /// </summary>
        public void ShowRandom(string nb, string summary) {
            // call http shows/random
        }

        /// <summary>
        /// Response for 'shows/recommendation'.
        /// Créer une recommandation d'une série d'un membre pour un ami.
        /// </summary>
        public void ShowRecommendation(string id, string thetvdb_id, string to, string comments) {
            // call http shows/recommendation
        }

        /// <summary>
        /// Response for 'shows/recommendation'.
        /// Supprime une recommandation d'une série envoyée ou reçue.
        /// </summary>
        public void DeleteShowRecommendation(string id) {
            // call http shows/recommendation
        }

        /// <summary>
        /// Response for 'shows/recommendations'.
        /// Récupère les recommandations reçues par l'utilisateur identifié.
        /// </summary>
        public void ShowRecommendation() {
            // call http shows/recommendations
        }

        /// <summary>
        /// Response for 'shows/search'.
        /// Recherche une série.
        /// </summary>
        public void ShowSearch(string title, string summary, string order, string nbpp, string page) {
            // call http shows/search
        }

        /// <summary>
        /// Response for 'shows/show'.
        /// Ajoute une série dans le compte du membre.
        /// </summary>
        public void ShowShow(string id, string thetvdb_id, string episode_id) {
            // call http shows/show
        }

        /// <summary>
        /// Response for 'shows/show'.
        /// Supprime une série du compte du membre.
        /// </summary>
        public void DeleteShowShow(string id, string thetvdb_id) {
            // call http shows/show
        }

        /// <summary>
        /// Response for 'shows/similars'.
        /// Récupère les séries marquées similaires par les membres de BetaSeries.
        /// </summary>
        public void ShowSimilar(string id, string thetvdb_id) {
            // call http shows/similars
        }

        /// <summary>
        /// Response for 'shows/videos'.
        /// Récupère les vidéos associées à la série par les membres de BetaSeries.
        /// </summary>
        public void ShowVideo(string id, string thetvdb_id) {
            // call http shows/videos
        }

        /// <summary>
        /// Response for 'subtitles/episode'.
        /// Affiche les sous-titres pour un épisode donné.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleEpisode SubtitleEpisode(string id, string language) {
            // call http subtitles/episode
        }

        /// <summary>
        /// Response for 'subtitles/last'.
        /// Affiche les derniers sous-titres récupérés par BetaSeries.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleLast SubtitleLast(string number, string language) {
            // call http subtitles/last
        }

        /// <summary>
        /// Response for 'subtitles/report'.
        /// Reporte des sous-titres comme incorrects pour se faire supprimer de la liste.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleReport SubtitleReport(string id, string reason) {
            // call http subtitles/report
        }

        /// <summary>
        /// Response for 'subtitles/show'.
        /// Affiche les sous-titres pour une série donnée.
        /// </summary>
        public Srk.BetaseriesApi.SubtitleShow SubtitleShow(string id, string language) {
            // call http subtitles/show
        }

        /// <summary>
        /// Response for 'timeline/friends'.
        /// Affiche les derniers évènements des amis du membre identifié.
        /// </summary>
        public void TimelineFriend(string nbpp, string since_id, string types) {
            // call http timeline/friends
        }

        /// <summary>
        /// Response for 'timeline/home'.
        /// Affiche les derniers évènements du site.
        /// </summary>
        public void TimelineHome(string nbpp, string since_id, string types) {
            // call http timeline/home
        }

        /// <summary>
        /// Response for 'timeline/member'.
        /// Affiche les derniers évènements du membre spécifié.
        /// </summary>
        public void TimelineMember(string id, string nbpp, string since_id, string types) {
            // call http timeline/member
        }
    }
}

#endregion


/*
Session IDictionary`2
Errors CompilerErrorCollection
CurrentIndent String
Microsoft.VisualStudio.TextTemplating.11.0, Version=11.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
Microsoft.VisualStudio.TextTemplating.TextTransformation
*/


